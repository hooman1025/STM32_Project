
Exam04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004198  08004198  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004198  08004198  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004198  08004198  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004210  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004210  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6ca  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d20  00000000  00000000  0002b763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  0002e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce1  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d630  00000000  00000000  00047b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090895  00000000  00000000  00055171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  000e5a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800409c 	.word	0x0800409c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800409c 	.word	0x0800409c

0800014c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fe6d 	bl	8002e3c <HAL_UART_Transmit>

	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000104 	.word	0x20000104

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fc7d 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f895 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f9eb 	bl	8000558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000182:	f000 f9bf 	bl	8000504 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000186:	f000 f8eb 	bl	8000360 <MX_ADC1_Init>
  MX_TIM1_Init();
 800018a:	f000 f937 	bl	80003fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 800018e:	4842      	ldr	r0, [pc, #264]	; (8000298 <main+0x128>)
 8000190:	f000 ffae 	bl	80010f0 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000194:	210a      	movs	r1, #10
 8000196:	4840      	ldr	r0, [pc, #256]	; (8000298 <main+0x128>)
 8000198:	f000 fea4 	bl	8000ee4 <HAL_ADC_PollForConversion>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_ADC_Start(&hadc1);
 800019c:	483e      	ldr	r0, [pc, #248]	; (8000298 <main+0x128>)
 800019e:	f000 fdc7 	bl	8000d30 <HAL_ADC_Start>
		HAL_Delay(10);
 80001a2:	200a      	movs	r0, #10
 80001a4:	f000 fcc8 	bl	8000b38 <HAL_Delay>

		for (int i = 0; i < 2; i++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	60fb      	str	r3, [r7, #12]
 80001ac:	e00e      	b.n	80001cc <main+0x5c>
			HAL_ADC_PollForConversion(&hadc1, 10);
 80001ae:	210a      	movs	r1, #10
 80001b0:	4839      	ldr	r0, [pc, #228]	; (8000298 <main+0x128>)
 80001b2:	f000 fe97 	bl	8000ee4 <HAL_ADC_PollForConversion>
			joy_value[i] = HAL_ADC_GetValue(&hadc1);
 80001b6:	4838      	ldr	r0, [pc, #224]	; (8000298 <main+0x128>)
 80001b8:	f001 f850 	bl	800125c <HAL_ADC_GetValue>
 80001bc:	4602      	mov	r2, r0
 80001be:	4937      	ldr	r1, [pc, #220]	; (800029c <main+0x12c>)
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 2; i++) {
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	3301      	adds	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	dded      	ble.n	80001ae <main+0x3e>
		}
		uint32_t joyx_value = joy_value[0];
 80001d2:	4b32      	ldr	r3, [pc, #200]	; (800029c <main+0x12c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	60bb      	str	r3, [r7, #8]
		uint32_t joyy_value = joy_value[1];
 80001d8:	4b30      	ldr	r3, [pc, #192]	; (800029c <main+0x12c>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	607b      	str	r3, [r7, #4]

		HAL_ADC_Stop(&hadc1);
 80001de:	482e      	ldr	r0, [pc, #184]	; (8000298 <main+0x128>)
 80001e0:	f000 fe54 	bl	8000e8c <HAL_ADC_Stop>

		printf("X : %ld, Y : %ld \r\n", joyx_value, joyy_value);
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	68b9      	ldr	r1, [r7, #8]
 80001e8:	482d      	ldr	r0, [pc, #180]	; (80002a0 <main+0x130>)
 80001ea:	f002 ffc3 	bl	8003174 <iprintf>

		HAL_Delay(100);
 80001ee:	2064      	movs	r0, #100	; 0x64
 80001f0:	f000 fca2 	bl	8000b38 <HAL_Delay>

		if (joyy_value < 300) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80001fa:	d20a      	bcs.n	8000212 <main+0xa2>
			HAL_GPIO_WritePin(GPIOC, MTL_1_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	4828      	ldr	r0, [pc, #160]	; (80002a4 <main+0x134>)
 8000202:	f001 fc5d 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_1_Pin, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	2110      	movs	r1, #16
 800020a:	4826      	ldr	r0, [pc, #152]	; (80002a4 <main+0x134>)
 800020c:	f001 fc58 	bl	8001ac0 <HAL_GPIO_WritePin>
 8000210:	e7c4      	b.n	800019c <main+0x2c>
		} else if (joyy_value > 4000) {
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000218:	d90a      	bls.n	8000230 <main+0xc0>
			HAL_GPIO_WritePin(GPIOC, MTL_2_Pin, 1);
 800021a:	2201      	movs	r2, #1
 800021c:	2102      	movs	r1, #2
 800021e:	4821      	ldr	r0, [pc, #132]	; (80002a4 <main+0x134>)
 8000220:	f001 fc4e 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_2_Pin, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	2120      	movs	r1, #32
 8000228:	481e      	ldr	r0, [pc, #120]	; (80002a4 <main+0x134>)
 800022a:	f001 fc49 	bl	8001ac0 <HAL_GPIO_WritePin>
 800022e:	e7b5      	b.n	800019c <main+0x2c>
		} else if (joyx_value < 300) {
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000236:	d20a      	bcs.n	800024e <main+0xde>
			HAL_GPIO_WritePin(GPIOC, MTL_1_Pin, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4819      	ldr	r0, [pc, #100]	; (80002a4 <main+0x134>)
 800023e:	f001 fc3f 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_2_Pin, 1);
 8000242:	2201      	movs	r2, #1
 8000244:	2120      	movs	r1, #32
 8000246:	4817      	ldr	r0, [pc, #92]	; (80002a4 <main+0x134>)
 8000248:	f001 fc3a 	bl	8001ac0 <HAL_GPIO_WritePin>
 800024c:	e7a6      	b.n	800019c <main+0x2c>
		} else if (joyx_value > 4000) {
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000254:	d90a      	bls.n	800026c <main+0xfc>
			HAL_GPIO_WritePin(GPIOC, MTL_2_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	2102      	movs	r1, #2
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <main+0x134>)
 800025c:	f001 fc30 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_1_Pin, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2110      	movs	r1, #16
 8000264:	480f      	ldr	r0, [pc, #60]	; (80002a4 <main+0x134>)
 8000266:	f001 fc2b 	bl	8001ac0 <HAL_GPIO_WritePin>
 800026a:	e797      	b.n	800019c <main+0x2c>
		} else {
			HAL_GPIO_WritePin(GPIOC, MTL_1_Pin, 0);
 800026c:	2200      	movs	r2, #0
 800026e:	2101      	movs	r1, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0x134>)
 8000272:	f001 fc25 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_1_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <main+0x134>)
 800027c:	f001 fc20 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTL_2_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	4807      	ldr	r0, [pc, #28]	; (80002a4 <main+0x134>)
 8000286:	f001 fc1b 	bl	8001ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_2_Pin, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0x134>)
 8000290:	f001 fc16 	bl	8001ac0 <HAL_GPIO_WritePin>
	while (1) {
 8000294:	e782      	b.n	800019c <main+0x2c>
 8000296:	bf00      	nop
 8000298:	2000008c 	.word	0x2000008c
 800029c:	20000148 	.word	0x20000148
 80002a0:	080040b4 	.word	0x080040b4
 80002a4:	40011000 	.word	0x40011000

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 ff54 	bl	8003164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d8:	2301      	movs	r3, #1
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002f4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fc18 	bl	8001b34 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800030a:	f000 f9b5 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2302      	movs	r3, #2
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fe84 	bl	8002038 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000336:	f000 f99f 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800033a:	2302      	movs	r3, #2
 800033c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800033e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f002 f80e 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000352:	f000 f991 	bl	8000678 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	; 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <MX_ADC1_Init+0x94>)
 8000372:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <MX_ADC1_Init+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000376:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_ADC1_Init+0x94>)
 8000378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800037c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <MX_ADC1_Init+0x94>)
 8000380:	2201      	movs	r2, #1
 8000382:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_ADC1_Init+0x94>)
 8000386:	2200      	movs	r2, #0
 8000388:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_ADC1_Init+0x94>)
 800038c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000390:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_ADC1_Init+0x94>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_ADC1_Init+0x94>)
 800039a:	2202      	movs	r2, #2
 800039c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <MX_ADC1_Init+0x94>)
 80003a0:	f000 fbee 	bl	8000b80 <HAL_ADC_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003aa:	f000 f965 	bl	8000678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003ae:	2306      	movs	r3, #6
 80003b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003b6:	2307      	movs	r3, #7
 80003b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	480d      	ldr	r0, [pc, #52]	; (80003f4 <MX_ADC1_Init+0x94>)
 80003c0:	f000 ff58 	bl	8001274 <HAL_ADC_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003ca:	f000 f955 	bl	8000678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003ce:	2307      	movs	r3, #7
 80003d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <MX_ADC1_Init+0x94>)
 80003dc:	f000 ff4a 	bl	8001274 <HAL_ADC_ConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003e6:	f000 f947 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000008c 	.word	0x2000008c
 80003f8:	40012400 	.word	0x40012400

080003fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b092      	sub	sp, #72	; 0x48
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
 800041c:	615a      	str	r2, [r3, #20]
 800041e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2220      	movs	r2, #32
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fe9c 	bl	8003164 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800042c:	4b33      	ldr	r3, [pc, #204]	; (80004fc <MX_TIM1_Init+0x100>)
 800042e:	4a34      	ldr	r2, [pc, #208]	; (8000500 <MX_TIM1_Init+0x104>)
 8000430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <MX_TIM1_Init+0x100>)
 8000434:	223f      	movs	r2, #63	; 0x3f
 8000436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_TIM1_Init+0x100>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800043e:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <MX_TIM1_Init+0x100>)
 8000440:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_TIM1_Init+0x100>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <MX_TIM1_Init+0x100>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_TIM1_Init+0x100>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000458:	4828      	ldr	r0, [pc, #160]	; (80004fc <MX_TIM1_Init+0x100>)
 800045a:	f002 f8fb 	bl	8002654 <HAL_TIM_PWM_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000464:	f000 f908 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2300      	movs	r3, #0
 800046a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	2300      	movs	r3, #0
 800046e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000474:	4619      	mov	r1, r3
 8000476:	4821      	ldr	r0, [pc, #132]	; (80004fc <MX_TIM1_Init+0x100>)
 8000478:	f002 fbe4 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000482:	f000 f8f9 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000486:	2360      	movs	r3, #96	; 0x60
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10-1;
 800048a:	2309      	movs	r3, #9
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048e:	2300      	movs	r3, #0
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000492:	2300      	movs	r3, #0
 8000494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4814      	ldr	r0, [pc, #80]	; (80004fc <MX_TIM1_Init+0x100>)
 80004ac:	f002 f922 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80004b6:	f000 f8df 	bl	8000678 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4807      	ldr	r0, [pc, #28]	; (80004fc <MX_TIM1_Init+0x100>)
 80004de:	f002 fc0f 	bl	8002d00 <HAL_TIMEx_ConfigBreakDeadTime>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80004e8:	f000 f8c6 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <MX_TIM1_Init+0x100>)
 80004ee:	f000 f955 	bl	800079c <HAL_TIM_MspPostInit>

}
 80004f2:	bf00      	nop
 80004f4:	3748      	adds	r7, #72	; 0x48
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000bc 	.word	0x200000bc
 8000500:	40012c00 	.word	0x40012c00

08000504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_USART2_UART_Init+0x50>)
 800050c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_USART2_UART_Init+0x4c>)
 800053c:	f002 fc31 	bl	8002da2 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000546:	f000 f897 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000104 	.word	0x20000104
 8000554:	40004400 	.word	0x40004400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056c:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <MX_GPIO_Init+0x10c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a3c      	ldr	r2, [pc, #240]	; (8000664 <MX_GPIO_Init+0x10c>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <MX_GPIO_Init+0x10c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0310 	and.w	r3, r3, #16
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <MX_GPIO_Init+0x10c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a36      	ldr	r2, [pc, #216]	; (8000664 <MX_GPIO_Init+0x10c>)
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_GPIO_Init+0x10c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_GPIO_Init+0x10c>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a30      	ldr	r2, [pc, #192]	; (8000664 <MX_GPIO_Init+0x10c>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_GPIO_Init+0x10c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_GPIO_Init+0x10c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <MX_GPIO_Init+0x10c>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_GPIO_Init+0x10c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MTL_1_Pin|MTL_2_Pin|MTR_1_Pin|MTR_2_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2133      	movs	r1, #51	; 0x33
 80005d0:	4825      	ldr	r0, [pc, #148]	; (8000668 <MX_GPIO_Init+0x110>)
 80005d2:	f001 fa75 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2106      	movs	r1, #6
 80005da:	4824      	ldr	r0, [pc, #144]	; (800066c <MX_GPIO_Init+0x114>)
 80005dc:	f001 fa70 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <MX_GPIO_Init+0x118>)
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	481c      	ldr	r0, [pc, #112]	; (8000668 <MX_GPIO_Init+0x110>)
 80005f6:	f001 f8df 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MTL_1_Pin MTL_2_Pin MTR_1_Pin MTR_2_Pin */
  GPIO_InitStruct.Pin = MTL_1_Pin|MTL_2_Pin|MTR_1_Pin|MTR_2_Pin;
 80005fa:	2333      	movs	r3, #51	; 0x33
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2302      	movs	r3, #2
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <MX_GPIO_Init+0x110>)
 8000612:	f001 f8d1 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW5_Pin */
  GPIO_InitStruct.Pin = SW5_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW5_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0x11c>)
 800062a:	f001 f8c5 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800062e:	2306      	movs	r3, #6
 8000630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2302      	movs	r3, #2
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_GPIO_Init+0x114>)
 8000646:	f001 f8b7 	bl	80017b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f001 f87b 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	; 0x28
 8000656:	f001 f894 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3720      	adds	r7, #32
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	40011000 	.word	0x40011000
 800066c:	40010c00 	.word	0x40010c00
 8000670:	10110000 	.word	0x10110000
 8000674:	40010800 	.word	0x40010800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_MspInit+0x5c>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_MspInit+0x5c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_MspInit+0x5c>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x5c>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x5c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x5c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_MspInit+0x60>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <HAL_MspInit+0x60>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010000 	.word	0x40010000

080006e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_ADC_MspInit+0x6c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d121      	bne.n	800074c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_ADC_MspInit+0x70>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_ADC_MspInit+0x70>)
 800070e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_ADC_MspInit+0x70>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_MspInit+0x70>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <HAL_ADC_MspInit+0x70>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_ADC_MspInit+0x70>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000738:	23c0      	movs	r3, #192	; 0xc0
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073c:	2303      	movs	r3, #3
 800073e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <HAL_ADC_MspInit+0x74>)
 8000748:	f001 f836 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40012400 	.word	0x40012400
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <HAL_TIM_PWM_MspInit+0x34>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d10b      	bne.n	800078a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_TIM_PWM_MspInit+0x38>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_TIM_PWM_MspInit+0x38>)
 8000778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_TIM_PWM_MspInit+0x38>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40012c00 	.word	0x40012c00
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_TIM_MspPostInit+0x5c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d118      	bne.n	80007ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <HAL_TIM_MspPostInit+0x64>)
 80007ea:	f000 ffe5 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40012c00 	.word	0x40012c00
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <HAL_UART_MspInit+0x70>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d123      	bne.n	800086c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_UART_MspInit+0x74>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_UART_MspInit+0x74>)
 800082a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082e:	61d3      	str	r3, [r2, #28]
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_MspInit+0x74>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_UART_MspInit+0x74>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_UART_MspInit+0x74>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_UART_MspInit+0x74>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000854:	230c      	movs	r3, #12
 8000856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <HAL_UART_MspInit+0x78>)
 8000868:	f000 ffa6 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 f91b 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}

080008ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008d6:	f001 f90b 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e00a      	b.n	8000906 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008f0:	f3af 8000 	nop.w
 80008f4:	4601      	mov	r1, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	60ba      	str	r2, [r7, #8]
 80008fc:	b2ca      	uxtb	r2, r1
 80008fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	429a      	cmp	r2, r3
 800090c:	dbf0      	blt.n	80008f0 <_read+0x12>
	}

return len;
 800090e:	687b      	ldr	r3, [r7, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e009      	b.n	800093e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	60ba      	str	r2, [r7, #8]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc0a 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	3301      	adds	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	dbf1      	blt.n	800092a <_write+0x12>
	}
	return len;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_close>:

int _close(int file)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	return -1;
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000976:	605a      	str	r2, [r3, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <_isatty>:

int _isatty(int file)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	return 1;
 800098c:	2301      	movs	r3, #1
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f002 fb96 	bl	8003110 <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20005000 	.word	0x20005000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000150 	.word	0x20000150
 8000a18:	20000168 	.word	0x20000168

08000a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a4e:	f7ff ffe5 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fb63 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fb8b 	bl	8000170 <main>
  bx lr
 8000a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a64:	080041a0 	.word	0x080041a0
  ldr r2, =_sbss
 8000a68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a6c:	20000168 	.word	0x20000168

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 fe55 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fdf8 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fe6d 	bl	800179e <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 fe35 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000154 	.word	0x20000154

08000b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000154 	.word	0x20000154

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff fff0 	bl	8000b24 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffe0 	bl	8000b24 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e0be      	b.n	8000d20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fd92 	bl	80006e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 fca7 	bl	8001518 <ADC_ConversionStop_Disable>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8099 	bne.w	8000d0e <HAL_ADC_Init+0x18e>
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8095 	bne.w	8000d0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bec:	f023 0302 	bic.w	r3, r3, #2
 8000bf0:	f043 0202 	orr.w	r2, r3, #2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7b1b      	ldrb	r3, [r3, #12]
 8000c06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c18:	d003      	beq.n	8000c22 <HAL_ADC_Init+0xa2>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d102      	bne.n	8000c28 <HAL_ADC_Init+0xa8>
 8000c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c26:	e000      	b.n	8000c2a <HAL_ADC_Init+0xaa>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7d1b      	ldrb	r3, [r3, #20]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d119      	bne.n	8000c6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7b1b      	ldrb	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	035a      	lsls	r2, r3, #13
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	e00b      	b.n	8000c6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	f043 0220 	orr.w	r2, r3, #32
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	f043 0201 	orr.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_ADC_Init+0x1a8>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9c:	d003      	beq.n	8000ca6 <HAL_ADC_Init+0x126>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d104      	bne.n	8000cb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	051b      	lsls	r3, r3, #20
 8000cae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_ADC_Init+0x1ac>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d10b      	bne.n	8000cec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	f023 0303 	bic.w	r3, r3, #3
 8000ce2:	f043 0201 	orr.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cea:	e018      	b.n	8000d1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	f023 0312 	bic.w	r3, r3, #18
 8000cf4:	f043 0210 	orr.w	r2, r3, #16
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0c:	e007      	b.n	8000d1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	f043 0210 	orr.w	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	ffe1f7fd 	.word	0xffe1f7fd
 8000d2c:	ff1f0efe 	.word	0xff1f0efe

08000d30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Start+0x1a>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e098      	b.n	8000e7c <HAL_ADC_Start+0x14c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 fb86 	bl	8001464 <ADC_Enable>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8087 	bne.w	8000e72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a41      	ldr	r2, [pc, #260]	; (8000e84 <HAL_ADC_Start+0x154>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d105      	bne.n	8000d8e <HAL_ADC_Start+0x5e>
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d115      	bne.n	8000dba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d026      	beq.n	8000df6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000db8:	e01d      	b.n	8000df6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d004      	beq.n	8000dda <HAL_ADC_Start+0xaa>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <HAL_ADC_Start+0x154>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10d      	bne.n	8000df6 <HAL_ADC_Start+0xc6>
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f023 0206 	bic.w	r2, r3, #6
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0e:	e002      	b.n	8000e16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f06f 0202 	mvn.w	r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e36:	d113      	bne.n	8000e60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_ADC_Start+0x154>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	e00c      	b.n	8000e7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e003      	b.n	8000e7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40012800 	.word	0x40012800
 8000e88:	40012400 	.word	0x40012400

08000e8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Stop+0x1a>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e01a      	b.n	8000edc <HAL_ADC_Stop+0x50>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fb32 	bl	8001518 <ADC_ConversionStop_Disable>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000efa:	f7ff fe13 	bl	8000b24 <HAL_GetTick>
 8000efe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00b      	beq.n	8000f26 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	f043 0220 	orr.w	r2, r3, #32
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0d3      	b.n	80010ce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d131      	bne.n	8000f98 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d12a      	bne.n	8000f98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f42:	e021      	b.n	8000f88 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4a:	d01d      	beq.n	8000f88 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <HAL_ADC_PollForConversion+0x7e>
 8000f52:	f7ff fde7 	bl	8000b24 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d212      	bcs.n	8000f88 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10b      	bne.n	8000f88 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	f043 0204 	orr.w	r2, r3, #4
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e0a2      	b.n	80010ce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0d6      	beq.n	8000f44 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f96:	e070      	b.n	800107a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <HAL_ADC_PollForConversion+0x1f4>)
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f001 fa99 	bl	80024d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6919      	ldr	r1, [r3, #16]
 8000fae:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <HAL_ADC_PollForConversion+0x1f8>)
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d118      	bne.n	8000fe8 <HAL_ADC_PollForConversion+0x104>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68d9      	ldr	r1, [r3, #12]
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <HAL_ADC_PollForConversion+0x1fc>)
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d111      	bne.n	8000fe8 <HAL_ADC_PollForConversion+0x104>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6919      	ldr	r1, [r3, #16]
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_ADC_PollForConversion+0x200>)
 8000fcc:	400b      	ands	r3, r1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d108      	bne.n	8000fe4 <HAL_ADC_PollForConversion+0x100>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68d9      	ldr	r1, [r3, #12]
 8000fd8:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_ADC_PollForConversion+0x204>)
 8000fda:	400b      	ands	r3, r1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_PollForConversion+0x100>
 8000fe0:	2314      	movs	r3, #20
 8000fe2:	e020      	b.n	8001026 <HAL_ADC_PollForConversion+0x142>
 8000fe4:	2329      	movs	r3, #41	; 0x29
 8000fe6:	e01e      	b.n	8001026 <HAL_ADC_PollForConversion+0x142>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6919      	ldr	r1, [r3, #16]
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_ADC_PollForConversion+0x200>)
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <HAL_ADC_PollForConversion+0x120>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68d9      	ldr	r1, [r3, #12]
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_ADC_PollForConversion+0x204>)
 8000ffe:	400b      	ands	r3, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <HAL_ADC_PollForConversion+0x13c>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6919      	ldr	r1, [r3, #16]
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_ADC_PollForConversion+0x208>)
 800100c:	400b      	ands	r3, r1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <HAL_ADC_PollForConversion+0x140>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68d9      	ldr	r1, [r3, #12]
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <HAL_ADC_PollForConversion+0x208>)
 800101a:	400b      	ands	r3, r1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_ADC_PollForConversion+0x140>
 8001020:	2354      	movs	r3, #84	; 0x54
 8001022:	e000      	b.n	8001026 <HAL_ADC_PollForConversion+0x142>
 8001024:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800102c:	e021      	b.n	8001072 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d01a      	beq.n	800106c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <HAL_ADC_PollForConversion+0x168>
 800103c:	f7ff fd72 	bl	8000b24 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d20f      	bcs.n	800106c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d90b      	bls.n	800106c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f043 0204 	orr.w	r2, r3, #4
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e030      	b.n	80010ce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	429a      	cmp	r2, r3
 8001078:	d8d9      	bhi.n	800102e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f06f 0212 	mvn.w	r2, #18
 8001082:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800109a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800109e:	d115      	bne.n	80010cc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d111      	bne.n	80010cc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d105      	bne.n	80010cc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000
 80010dc:	24924924 	.word	0x24924924
 80010e0:	00924924 	.word	0x00924924
 80010e4:	12492492 	.word	0x12492492
 80010e8:	00492492 	.word	0x00492492
 80010ec:	00249249 	.word	0x00249249

080010f0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_ADC_Start_IT+0x1a>
 8001106:	2302      	movs	r3, #2
 8001108:	e0a0      	b.n	800124c <HAL_ADC_Start_IT+0x15c>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f9a6 	bl	8001464 <ADC_Enable>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 808f 	bne.w	8001242 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_ADC_Start_IT+0x164>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d105      	bne.n	800114e <HAL_ADC_Start_IT+0x5e>
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_ADC_Start_IT+0x168>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d115      	bne.n	800117a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	2b00      	cmp	r3, #0
 8001166:	d026      	beq.n	80011b6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001170:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001178:	e01d      	b.n	80011b6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a33      	ldr	r2, [pc, #204]	; (8001258 <HAL_ADC_Start_IT+0x168>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d004      	beq.n	800119a <HAL_ADC_Start_IT+0xaa>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <HAL_ADC_Start_IT+0x164>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d10d      	bne.n	80011b6 <HAL_ADC_Start_IT+0xc6>
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_ADC_Start_IT+0x168>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f023 0206 	bic.w	r2, r3, #6
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ce:	e002      	b.n	80011d6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f06f 0202 	mvn.w	r2, #2
 80011e6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001202:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001206:	d113      	bne.n	8001230 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800120c:	4a11      	ldr	r2, [pc, #68]	; (8001254 <HAL_ADC_Start_IT+0x164>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d105      	bne.n	800121e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_ADC_Start_IT+0x168>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	e00c      	b.n	800124a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	e003      	b.n	800124a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40012800 	.word	0x40012800
 8001258:	40012400 	.word	0x40012400

0800125c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x20>
 8001290:	2302      	movs	r3, #2
 8001292:	e0dc      	b.n	800144e <HAL_ADC_ConfigChannel+0x1da>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d81c      	bhi.n	80012de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b05      	subs	r3, #5
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b05      	subs	r3, #5
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
 80012dc:	e03c      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d81c      	bhi.n	8001320 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	3b23      	subs	r3, #35	; 0x23
 80012f8:	221f      	movs	r2, #31
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	4019      	ands	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b23      	subs	r3, #35	; 0x23
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	e01b      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b41      	subs	r3, #65	; 0x41
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	3b41      	subs	r3, #65	; 0x41
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b09      	cmp	r3, #9
 800135e:	d91c      	bls.n	800139a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	3b1e      	subs	r3, #30
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	4019      	ands	r1, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6898      	ldr	r0, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	3b1e      	subs	r3, #30
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	e019      	b.n	80013ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6919      	ldr	r1, [r3, #16]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d003      	beq.n	80013de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013da:	2b11      	cmp	r3, #17
 80013dc:	d132      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_ADC_ConfigChannel+0x1e4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d125      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d126      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001404:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d11a      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_ConfigChannel+0x1e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_ADC_ConfigChannel+0x1ec>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9a      	lsrs	r2, r3, #18
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x1b2>
 8001432:	e007      	b.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40012400 	.word	0x40012400
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d040      	beq.n	8001504 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <ADC_Enable+0xac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <ADC_Enable+0xb0>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a0:	e002      	b.n	80014a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ae:	f7ff fb39 	bl	8000b24 <HAL_GetTick>
 80014b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014b4:	e01f      	b.n	80014f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014b6:	f7ff fb35 	bl	8000b24 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d918      	bls.n	80014f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d011      	beq.n	80014f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f043 0210 	orr.w	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e007      	b.n	8001506 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d1d8      	bne.n	80014b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000
 8001514:	431bde83 	.word	0x431bde83

08001518 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d12e      	bne.n	8001590 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001542:	f7ff faef 	bl	8000b24 <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001548:	e01b      	b.n	8001582 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154a:	f7ff faeb 	bl	8000b24 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d914      	bls.n	8001582 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10d      	bne.n	8001582 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f043 0210 	orr.w	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e007      	b.n	8001592 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d0dc      	beq.n	800154a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4906      	ldr	r1, [pc, #24]	; (8001634 <__NVIC_EnableIRQ+0x34>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff90 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff2d 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff42 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff35 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b08b      	sub	sp, #44	; 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e169      	b.n	8001aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017cc:	2201      	movs	r2, #1
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8158 	bne.w	8001a9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a9a      	ldr	r2, [pc, #616]	; (8001a58 <HAL_GPIO_Init+0x2a0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d05e      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 80017f4:	4a98      	ldr	r2, [pc, #608]	; (8001a58 <HAL_GPIO_Init+0x2a0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d875      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 80017fa:	4a98      	ldr	r2, [pc, #608]	; (8001a5c <HAL_GPIO_Init+0x2a4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d058      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001800:	4a96      	ldr	r2, [pc, #600]	; (8001a5c <HAL_GPIO_Init+0x2a4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d86f      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001806:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <HAL_GPIO_Init+0x2a8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d052      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 800180c:	4a94      	ldr	r2, [pc, #592]	; (8001a60 <HAL_GPIO_Init+0x2a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d869      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001812:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04c      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001818:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d863      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800181e:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d046      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001824:	4a90      	ldr	r2, [pc, #576]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d85d      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d82a      	bhi.n	8001884 <HAL_GPIO_Init+0xcc>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d859      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <HAL_GPIO_Init+0x80>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	080018b3 	.word	0x080018b3
 800183c:	0800188d 	.word	0x0800188d
 8001840:	0800189f 	.word	0x0800189f
 8001844:	080018e1 	.word	0x080018e1
 8001848:	080018e7 	.word	0x080018e7
 800184c:	080018e7 	.word	0x080018e7
 8001850:	080018e7 	.word	0x080018e7
 8001854:	080018e7 	.word	0x080018e7
 8001858:	080018e7 	.word	0x080018e7
 800185c:	080018e7 	.word	0x080018e7
 8001860:	080018e7 	.word	0x080018e7
 8001864:	080018e7 	.word	0x080018e7
 8001868:	080018e7 	.word	0x080018e7
 800186c:	080018e7 	.word	0x080018e7
 8001870:	080018e7 	.word	0x080018e7
 8001874:	080018e7 	.word	0x080018e7
 8001878:	080018e7 	.word	0x080018e7
 800187c:	08001895 	.word	0x08001895
 8001880:	080018a9 	.word	0x080018a9
 8001884:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <HAL_GPIO_Init+0x2b4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188a:	e02c      	b.n	80018e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e029      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e024      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	3308      	adds	r3, #8
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e01f      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e01a      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ba:	2304      	movs	r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e013      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	611a      	str	r2, [r3, #16]
          break;
 80018d2:	e009      	b.n	80018e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	615a      	str	r2, [r3, #20]
          break;
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          break;
 80018e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d801      	bhi.n	80018f2 <HAL_GPIO_Init+0x13a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_Init+0x13e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d802      	bhi.n	8001904 <HAL_GPIO_Init+0x14c>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x152>
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	3b08      	subs	r3, #8
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	210f      	movs	r1, #15
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80b1 	beq.w	8001a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001950:	4a48      	ldr	r2, [pc, #288]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1ec>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <HAL_GPIO_Init+0x2c4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3e      	ldr	r2, [pc, #248]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1e4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_GPIO_Init+0x2cc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1e0>
 8001994:	2303      	movs	r3, #3
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 8001998:	2304      	movs	r3, #4
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 800199c:	2302      	movs	r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 80019a4:	2300      	movs	r3, #0
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b6:	492f      	ldr	r1, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	492c      	ldr	r1, [pc, #176]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4928      	ldr	r1, [pc, #160]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4922      	ldr	r1, [pc, #136]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	491e      	ldr	r1, [pc, #120]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4918      	ldr	r1, [pc, #96]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4914      	ldr	r1, [pc, #80]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d021      	beq.n	8001a8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e021      	b.n	8001a9a <HAL_GPIO_Init+0x2e2>
 8001a56:	bf00      	nop
 8001a58:	10320000 	.word	0x10320000
 8001a5c:	10310000 	.word	0x10310000
 8001a60:	10220000 	.word	0x10220000
 8001a64:	10210000 	.word	0x10210000
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	10110000 	.word	0x10110000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40011400 	.word	0x40011400
 8001a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4909      	ldr	r1, [pc, #36]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ae8e 	bne.w	80017cc <HAL_GPIO_Init+0x14>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	372c      	adds	r7, #44	; 0x2c
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f806 	bl	8001b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e272      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8087 	beq.w	8001c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d00c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b60:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d112      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d10b      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d06c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d168      	bne.n	8001c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e24c      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x76>
 8001b9c:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7f      	ldr	r2, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e02e      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x98>
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xbc>
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7fe ff88 	bl	8000b24 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7fe ff84 	bl	8000b24 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e200      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xe4>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe ff74 	bl	8000b24 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7fe ff70 	bl	8000b24 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1ec      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x10c>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c0      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4939      	ldr	r1, [pc, #228]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7fe ff29 	bl	8000b24 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7fe ff25 	bl	8000b24 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a1      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4927      	ldr	r1, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7fe ff08 	bl	8000b24 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d18:	f7fe ff04 	bl	8000b24 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e180      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03a      	beq.n	8001db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d019      	beq.n	8001d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7fe fee8 	bl	8000b24 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe fee4 	bl	8000b24 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e160      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 fad8 	bl	800232c <RCC_Delay>
 8001d7c:	e01c      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7fe fece 	bl	8000b24 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8a:	e00f      	b.n	8001dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7fe feca 	bl	8000b24 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d908      	bls.n	8001dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e146      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	42420000 	.word	0x42420000
 8001da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e9      	bne.n	8001d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a6 	beq.w	8001f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b8b      	ldr	r3, [pc, #556]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a87      	ldr	r2, [pc, #540]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b85      	ldr	r3, [pc, #532]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a7e      	ldr	r2, [pc, #504]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fe8b 	bl	8000b24 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7fe fe87 	bl	8000b24 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e103      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x312>
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e02d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x334>
 8001e4e:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	e01c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x356>
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a60      	ldr	r2, [pc, #384]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a5d      	ldr	r2, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a5a      	ldr	r2, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe fe3b 	bl	8000b24 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe fe37 	bl	8000b24 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0b1      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fe25 	bl	8000b24 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7fe fe21 	bl	8000b24 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e09b      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8087 	beq.w	800202a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d061      	beq.n	8001fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d146      	bne.n	8001fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fdf5 	bl	8000b24 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe fdf1 	bl	8000b24 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e06d      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4921      	ldr	r1, [pc, #132]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a19      	ldr	r1, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	491b      	ldr	r1, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fdc5 	bl	8000b24 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fdc1 	bl	8000b24 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e03d      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x46a>
 8001fbc:	e035      	b.n	800202a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fdae 	bl	8000b24 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe fdaa 	bl	8000b24 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e026      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x498>
 8001fea:	e01e      	b.n	800202a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e019      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x500>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d0      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4965      	ldr	r1, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d040      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e073      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4936      	ldr	r1, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7fe fcfc 	bl	8000b24 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7fe fcf8 	bl	8000b24 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e053      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4922      	ldr	r1, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1cc>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fc5a 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	080040e8 	.word	0x080040e8
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b490      	push	{r4, r7}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002214:	1d3c      	adds	r4, r7, #4
 8002216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800221c:	f240 2301 	movw	r3, #513	; 0x201
 8002220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d002      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x40>
 8002246:	2b08      	cmp	r3, #8
 8002248:	d003      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x46>
 800224a:	e02b      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800224e:	623b      	str	r3, [r7, #32]
      break;
 8002250:	e02b      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	0c9b      	lsrs	r3, r3, #18
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3328      	adds	r3, #40	; 0x28
 800225c:	443b      	add	r3, r7
 800225e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002262:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0c5b      	lsrs	r3, r3, #17
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	3328      	adds	r3, #40	; 0x28
 800227a:	443b      	add	r3, r7
 800227c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002286:	fb03 f202 	mul.w	r2, r3, r2
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e004      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	623b      	str	r3, [r7, #32]
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc90      	pop	{r4, r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	080040c8 	.word	0x080040c8
 80022bc:	40021000 	.word	0x40021000
 80022c0:	007a1200 	.word	0x007a1200
 80022c4:	003d0900 	.word	0x003d0900

080022c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e0:	f7ff fff2 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	080040f8 	.word	0x080040f8

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002308:	f7ff ffde 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0adb      	lsrs	r3, r3, #11
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	080040f8 	.word	0x080040f8

0800232c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <RCC_Delay+0x34>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <RCC_Delay+0x38>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0a5b      	lsrs	r3, r3, #9
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002348:	bf00      	nop
  }
  while (Delay --);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	60fa      	str	r2, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f9      	bne.n	8002348 <RCC_Delay+0x1c>
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000000 	.word	0x20000000
 8002364:	10624dd3 	.word	0x10624dd3

08002368 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d07d      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002388:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239e:	61d3      	str	r3, [r2, #28]
 80023a0:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023bc:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a42      	ldr	r2, [pc, #264]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7fe fbac 	bl	8000b24 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	e008      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fba8 	bl	8000b24 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e06d      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ee:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d02e      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d027      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002414:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002422:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fb77 	bl	8000b24 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fb73 	bl	8000b24 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e036      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4917      	ldr	r1, [pc, #92]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	4313      	orrs	r3, r2
 800246c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	490b      	ldr	r1, [pc, #44]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40007000 	.word	0x40007000
 80024d0:	42420440 	.word	0x42420440

080024d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b08d      	sub	sp, #52	; 0x34
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024dc:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80024de:	f107 040c 	add.w	r4, r7, #12
 80024e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e8:	f240 2301 	movw	r3, #513	; 0x201
 80024ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b10      	cmp	r3, #16
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b10      	cmp	r3, #16
 800250c:	f200 808e 	bhi.w	800262c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d049      	beq.n	80025aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d079      	beq.n	8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800251c:	e086      	b.n	800262c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002524:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d07f      	beq.n	8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	0c9b      	lsrs	r3, r3, #18
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	443b      	add	r3, r7
 800253c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002540:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800254c:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c5b      	lsrs	r3, r3, #17
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	3330      	adds	r3, #48	; 0x30
 8002558:	443b      	add	r3, r7
 800255a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800256a:	4a37      	ldr	r2, [pc, #220]	; (8002648 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257a:	e004      	b.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	4a33      	ldr	r2, [pc, #204]	; (800264c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002592:	d102      	bne.n	800259a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002598:	e04a      	b.n	8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025a8:	e042      	b.n	8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ba:	d108      	bne.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80025c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80025cc:	e01f      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d109      	bne.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80025e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ec:	e00f      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025f8:	d11c      	bne.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002606:	f24f 4324 	movw	r3, #62500	; 0xf424
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800260c:	e012      	b.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800260e:	e011      	b.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002610:	f7ff fe78 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0b9b      	lsrs	r3, r3, #14
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	3301      	adds	r3, #1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800262a:	e004      	b.n	8002636 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800262c:	bf00      	nop
 800262e:	e002      	b.n	8002636 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002634:	bf00      	nop
    }
  }
  return (frequency);
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002638:	4618      	mov	r0, r3
 800263a:	3734      	adds	r7, #52	; 0x34
 800263c:	46bd      	mov	sp, r7
 800263e:	bd90      	pop	{r4, r7, pc}
 8002640:	080040d8 	.word	0x080040d8
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	003d0900 	.word	0x003d0900
 8002650:	aaaaaaab 	.word	0xaaaaaaab

08002654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e041      	b.n	80026ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe f870 	bl	8000760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f000 f8ec 	bl	8002870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800270a:	2302      	movs	r3, #2
 800270c:	e0ac      	b.n	8002868 <HAL_TIM_PWM_ConfigChannel+0x174>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	f200 809f 	bhi.w	800285c <HAL_TIM_PWM_ConfigChannel+0x168>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002759 	.word	0x08002759
 8002728:	0800285d 	.word	0x0800285d
 800272c:	0800285d 	.word	0x0800285d
 8002730:	0800285d 	.word	0x0800285d
 8002734:	08002799 	.word	0x08002799
 8002738:	0800285d 	.word	0x0800285d
 800273c:	0800285d 	.word	0x0800285d
 8002740:	0800285d 	.word	0x0800285d
 8002744:	080027db 	.word	0x080027db
 8002748:	0800285d 	.word	0x0800285d
 800274c:	0800285d 	.word	0x0800285d
 8002750:	0800285d 	.word	0x0800285d
 8002754:	0800281b 	.word	0x0800281b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f8e8 	bl	8002934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0208 	orr.w	r2, r2, #8
 8002772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	619a      	str	r2, [r3, #24]
      break;
 8002796:	e062      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f92e 	bl	8002a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6999      	ldr	r1, [r3, #24]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	021a      	lsls	r2, r3, #8
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	619a      	str	r2, [r3, #24]
      break;
 80027d8:	e041      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f977 	bl	8002ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0208 	orr.w	r2, r2, #8
 80027f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0204 	bic.w	r2, r2, #4
 8002804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
      break;
 8002818:	e021      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f9c1 	bl	8002ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69d9      	ldr	r1, [r3, #28]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	61da      	str	r2, [r3, #28]
      break;
 800285a:	e000      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800285c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <TIM_Base_SetConfig+0xb8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00b      	beq.n	80028a0 <TIM_Base_SetConfig+0x30>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d007      	beq.n	80028a0 <TIM_Base_SetConfig+0x30>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a26      	ldr	r2, [pc, #152]	; (800292c <TIM_Base_SetConfig+0xbc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d003      	beq.n	80028a0 <TIM_Base_SetConfig+0x30>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a25      	ldr	r2, [pc, #148]	; (8002930 <TIM_Base_SetConfig+0xc0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <TIM_Base_SetConfig+0xb8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0x62>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0x62>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <TIM_Base_SetConfig+0xbc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0x62>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <TIM_Base_SetConfig+0xc0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <TIM_Base_SetConfig+0xb8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d103      	bne.n	8002918 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	615a      	str	r2, [r3, #20]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800

08002934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0201 	bic.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 0302 	bic.w	r3, r3, #2
 800297c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <TIM_OC1_SetConfig+0xc8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d10c      	bne.n	80029aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f023 0308 	bic.w	r3, r3, #8
 8002996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <TIM_OC1_SetConfig+0xc8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d111      	bne.n	80029d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	621a      	str	r2, [r3, #32]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40012c00 	.word	0x40012c00

08002a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0210 	bic.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f023 0320 	bic.w	r3, r3, #32
 8002a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <TIM_OC2_SetConfig+0xd0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10d      	bne.n	8002a7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <TIM_OC2_SetConfig+0xd0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d113      	bne.n	8002aac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012c00 	.word	0x40012c00

08002ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <TIM_OC3_SetConfig+0xd0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10d      	bne.n	8002b4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <TIM_OC3_SetConfig+0xd0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d113      	bne.n	8002b7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40012c00 	.word	0x40012c00

08002ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <TIM_OC4_SetConfig+0x98>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d109      	bne.n	8002c1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00

08002c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e046      	b.n	8002cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800

08002d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e03d      	b.n	8002d98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e03f      	b.n	8002e34 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fd1b 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2224      	movs	r2, #36	; 0x24
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f904 	bl	8002ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d17c      	bne.n	8002f56 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Transmit+0x2c>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e075      	b.n	8002f58 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Transmit+0x3e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e06e      	b.n	8002f58 <HAL_UART_Transmit+0x11c>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2221      	movs	r2, #33	; 0x21
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e90:	f7fd fe48 	bl	8000b24 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eaa:	d108      	bne.n	8002ebe <HAL_UART_Transmit+0x82>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e003      	b.n	8002ec6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ece:	e02a      	b.n	8002f26 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f840 	bl	8002f60 <UART_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e036      	b.n	8002f58 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3302      	adds	r3, #2
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e007      	b.n	8002f18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1cf      	bne.n	8002ed0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2140      	movs	r1, #64	; 0x40
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f810 	bl	8002f60 <UART_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e006      	b.n	8002f58 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f70:	e02c      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d028      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f80:	f7fd fdd0 	bl	8000b24 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d21d      	bcs.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e00f      	b.n	8002fec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d0c3      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800302e:	f023 030c 	bic.w	r3, r3, #12
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	430b      	orrs	r3, r1
 800303a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2c      	ldr	r2, [pc, #176]	; (8003108 <UART_SetConfig+0x114>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d103      	bne.n	8003064 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7ff f952 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	e002      	b.n	800306a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff f93a 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8003068:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	4a22      	ldr	r2, [pc, #136]	; (800310c <UART_SetConfig+0x118>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	0119      	lsls	r1, r3, #4
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <UART_SetConfig+0x118>)
 80030a2:	fba3 0302 	umull	r0, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	fb00 f303 	mul.w	r3, r0, r3
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	3332      	adds	r3, #50	; 0x32
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c0:	4419      	add	r1, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <UART_SetConfig+0x118>)
 80030da:	fba3 0302 	umull	r0, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	440a      	add	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40013800 	.word	0x40013800
 800310c:	51eb851f 	.word	0x51eb851f

08003110 <__errno>:
 8003110:	4b01      	ldr	r3, [pc, #4]	; (8003118 <__errno+0x8>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	2600      	movs	r6, #0
 8003120:	4d0c      	ldr	r5, [pc, #48]	; (8003154 <__libc_init_array+0x38>)
 8003122:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	42a6      	cmp	r6, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	f000 ffb6 	bl	800409c <_init>
 8003130:	2600      	movs	r6, #0
 8003132:	4d0a      	ldr	r5, [pc, #40]	; (800315c <__libc_init_array+0x40>)
 8003134:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x44>)
 8003136:	1b64      	subs	r4, r4, r5
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	42a6      	cmp	r6, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f855 3b04 	ldr.w	r3, [r5], #4
 8003144:	4798      	blx	r3
 8003146:	3601      	adds	r6, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f855 3b04 	ldr.w	r3, [r5], #4
 800314e:	4798      	blx	r3
 8003150:	3601      	adds	r6, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	08004198 	.word	0x08004198
 8003158:	08004198 	.word	0x08004198
 800315c:	08004198 	.word	0x08004198
 8003160:	0800419c 	.word	0x0800419c

08003164 <memset>:
 8003164:	4603      	mov	r3, r0
 8003166:	4402      	add	r2, r0
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	f803 1b01 	strb.w	r1, [r3], #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <iprintf>:
 8003174:	b40f      	push	{r0, r1, r2, r3}
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <iprintf+0x2c>)
 8003178:	b513      	push	{r0, r1, r4, lr}
 800317a:	681c      	ldr	r4, [r3, #0]
 800317c:	b124      	cbz	r4, 8003188 <iprintf+0x14>
 800317e:	69a3      	ldr	r3, [r4, #24]
 8003180:	b913      	cbnz	r3, 8003188 <iprintf+0x14>
 8003182:	4620      	mov	r0, r4
 8003184:	f000 f866 	bl	8003254 <__sinit>
 8003188:	ab05      	add	r3, sp, #20
 800318a:	4620      	mov	r0, r4
 800318c:	9a04      	ldr	r2, [sp, #16]
 800318e:	68a1      	ldr	r1, [r4, #8]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	f000 f9bb 	bl	800350c <_vfiprintf_r>
 8003196:	b002      	add	sp, #8
 8003198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800319c:	b004      	add	sp, #16
 800319e:	4770      	bx	lr
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <std>:
 80031a4:	2300      	movs	r3, #0
 80031a6:	b510      	push	{r4, lr}
 80031a8:	4604      	mov	r4, r0
 80031aa:	e9c0 3300 	strd	r3, r3, [r0]
 80031ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031b2:	6083      	str	r3, [r0, #8]
 80031b4:	8181      	strh	r1, [r0, #12]
 80031b6:	6643      	str	r3, [r0, #100]	; 0x64
 80031b8:	81c2      	strh	r2, [r0, #14]
 80031ba:	6183      	str	r3, [r0, #24]
 80031bc:	4619      	mov	r1, r3
 80031be:	2208      	movs	r2, #8
 80031c0:	305c      	adds	r0, #92	; 0x5c
 80031c2:	f7ff ffcf 	bl	8003164 <memset>
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <std+0x38>)
 80031c8:	6224      	str	r4, [r4, #32]
 80031ca:	6263      	str	r3, [r4, #36]	; 0x24
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <std+0x3c>)
 80031ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <std+0x40>)
 80031d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <std+0x44>)
 80031d6:	6323      	str	r3, [r4, #48]	; 0x30
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	bf00      	nop
 80031dc:	08003ab9 	.word	0x08003ab9
 80031e0:	08003adb 	.word	0x08003adb
 80031e4:	08003b13 	.word	0x08003b13
 80031e8:	08003b37 	.word	0x08003b37

080031ec <_cleanup_r>:
 80031ec:	4901      	ldr	r1, [pc, #4]	; (80031f4 <_cleanup_r+0x8>)
 80031ee:	f000 b8af 	b.w	8003350 <_fwalk_reent>
 80031f2:	bf00      	nop
 80031f4:	08003e09 	.word	0x08003e09

080031f8 <__sfmoreglue>:
 80031f8:	2268      	movs	r2, #104	; 0x68
 80031fa:	b570      	push	{r4, r5, r6, lr}
 80031fc:	1e4d      	subs	r5, r1, #1
 80031fe:	4355      	muls	r5, r2
 8003200:	460e      	mov	r6, r1
 8003202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003206:	f000 f8e5 	bl	80033d4 <_malloc_r>
 800320a:	4604      	mov	r4, r0
 800320c:	b140      	cbz	r0, 8003220 <__sfmoreglue+0x28>
 800320e:	2100      	movs	r1, #0
 8003210:	e9c0 1600 	strd	r1, r6, [r0]
 8003214:	300c      	adds	r0, #12
 8003216:	60a0      	str	r0, [r4, #8]
 8003218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800321c:	f7ff ffa2 	bl	8003164 <memset>
 8003220:	4620      	mov	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}

08003224 <__sfp_lock_acquire>:
 8003224:	4801      	ldr	r0, [pc, #4]	; (800322c <__sfp_lock_acquire+0x8>)
 8003226:	f000 b8b3 	b.w	8003390 <__retarget_lock_acquire_recursive>
 800322a:	bf00      	nop
 800322c:	20000159 	.word	0x20000159

08003230 <__sfp_lock_release>:
 8003230:	4801      	ldr	r0, [pc, #4]	; (8003238 <__sfp_lock_release+0x8>)
 8003232:	f000 b8ae 	b.w	8003392 <__retarget_lock_release_recursive>
 8003236:	bf00      	nop
 8003238:	20000159 	.word	0x20000159

0800323c <__sinit_lock_acquire>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__sinit_lock_acquire+0x8>)
 800323e:	f000 b8a7 	b.w	8003390 <__retarget_lock_acquire_recursive>
 8003242:	bf00      	nop
 8003244:	2000015a 	.word	0x2000015a

08003248 <__sinit_lock_release>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__sinit_lock_release+0x8>)
 800324a:	f000 b8a2 	b.w	8003392 <__retarget_lock_release_recursive>
 800324e:	bf00      	nop
 8003250:	2000015a 	.word	0x2000015a

08003254 <__sinit>:
 8003254:	b510      	push	{r4, lr}
 8003256:	4604      	mov	r4, r0
 8003258:	f7ff fff0 	bl	800323c <__sinit_lock_acquire>
 800325c:	69a3      	ldr	r3, [r4, #24]
 800325e:	b11b      	cbz	r3, 8003268 <__sinit+0x14>
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003264:	f7ff bff0 	b.w	8003248 <__sinit_lock_release>
 8003268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800326c:	6523      	str	r3, [r4, #80]	; 0x50
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <__sinit+0x68>)
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <__sinit+0x6c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	62a2      	str	r2, [r4, #40]	; 0x28
 8003276:	42a3      	cmp	r3, r4
 8003278:	bf08      	it	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	4620      	mov	r0, r4
 800327e:	bf08      	it	eq
 8003280:	61a3      	streq	r3, [r4, #24]
 8003282:	f000 f81f 	bl	80032c4 <__sfp>
 8003286:	6060      	str	r0, [r4, #4]
 8003288:	4620      	mov	r0, r4
 800328a:	f000 f81b 	bl	80032c4 <__sfp>
 800328e:	60a0      	str	r0, [r4, #8]
 8003290:	4620      	mov	r0, r4
 8003292:	f000 f817 	bl	80032c4 <__sfp>
 8003296:	2200      	movs	r2, #0
 8003298:	2104      	movs	r1, #4
 800329a:	60e0      	str	r0, [r4, #12]
 800329c:	6860      	ldr	r0, [r4, #4]
 800329e:	f7ff ff81 	bl	80031a4 <std>
 80032a2:	2201      	movs	r2, #1
 80032a4:	2109      	movs	r1, #9
 80032a6:	68a0      	ldr	r0, [r4, #8]
 80032a8:	f7ff ff7c 	bl	80031a4 <std>
 80032ac:	2202      	movs	r2, #2
 80032ae:	2112      	movs	r1, #18
 80032b0:	68e0      	ldr	r0, [r4, #12]
 80032b2:	f7ff ff77 	bl	80031a4 <std>
 80032b6:	2301      	movs	r3, #1
 80032b8:	61a3      	str	r3, [r4, #24]
 80032ba:	e7d1      	b.n	8003260 <__sinit+0xc>
 80032bc:	08004100 	.word	0x08004100
 80032c0:	080031ed 	.word	0x080031ed

080032c4 <__sfp>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	4607      	mov	r7, r0
 80032c8:	f7ff ffac 	bl	8003224 <__sfp_lock_acquire>
 80032cc:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <__sfp+0x84>)
 80032ce:	681e      	ldr	r6, [r3, #0]
 80032d0:	69b3      	ldr	r3, [r6, #24]
 80032d2:	b913      	cbnz	r3, 80032da <__sfp+0x16>
 80032d4:	4630      	mov	r0, r6
 80032d6:	f7ff ffbd 	bl	8003254 <__sinit>
 80032da:	3648      	adds	r6, #72	; 0x48
 80032dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	d503      	bpl.n	80032ec <__sfp+0x28>
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	b30b      	cbz	r3, 800332c <__sfp+0x68>
 80032e8:	6836      	ldr	r6, [r6, #0]
 80032ea:	e7f7      	b.n	80032dc <__sfp+0x18>
 80032ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032f0:	b9d5      	cbnz	r5, 8003328 <__sfp+0x64>
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <__sfp+0x88>)
 80032f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032f8:	60e3      	str	r3, [r4, #12]
 80032fa:	6665      	str	r5, [r4, #100]	; 0x64
 80032fc:	f000 f847 	bl	800338e <__retarget_lock_init_recursive>
 8003300:	f7ff ff96 	bl	8003230 <__sfp_lock_release>
 8003304:	2208      	movs	r2, #8
 8003306:	4629      	mov	r1, r5
 8003308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800330c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003310:	6025      	str	r5, [r4, #0]
 8003312:	61a5      	str	r5, [r4, #24]
 8003314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003318:	f7ff ff24 	bl	8003164 <memset>
 800331c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003324:	4620      	mov	r0, r4
 8003326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003328:	3468      	adds	r4, #104	; 0x68
 800332a:	e7d9      	b.n	80032e0 <__sfp+0x1c>
 800332c:	2104      	movs	r1, #4
 800332e:	4638      	mov	r0, r7
 8003330:	f7ff ff62 	bl	80031f8 <__sfmoreglue>
 8003334:	4604      	mov	r4, r0
 8003336:	6030      	str	r0, [r6, #0]
 8003338:	2800      	cmp	r0, #0
 800333a:	d1d5      	bne.n	80032e8 <__sfp+0x24>
 800333c:	f7ff ff78 	bl	8003230 <__sfp_lock_release>
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	e7ee      	b.n	8003324 <__sfp+0x60>
 8003346:	bf00      	nop
 8003348:	08004100 	.word	0x08004100
 800334c:	ffff0001 	.word	0xffff0001

08003350 <_fwalk_reent>:
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003354:	4606      	mov	r6, r0
 8003356:	4688      	mov	r8, r1
 8003358:	2700      	movs	r7, #0
 800335a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800335e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003362:	f1b9 0901 	subs.w	r9, r9, #1
 8003366:	d505      	bpl.n	8003374 <_fwalk_reent+0x24>
 8003368:	6824      	ldr	r4, [r4, #0]
 800336a:	2c00      	cmp	r4, #0
 800336c:	d1f7      	bne.n	800335e <_fwalk_reent+0xe>
 800336e:	4638      	mov	r0, r7
 8003370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003374:	89ab      	ldrh	r3, [r5, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d907      	bls.n	800338a <_fwalk_reent+0x3a>
 800337a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800337e:	3301      	adds	r3, #1
 8003380:	d003      	beq.n	800338a <_fwalk_reent+0x3a>
 8003382:	4629      	mov	r1, r5
 8003384:	4630      	mov	r0, r6
 8003386:	47c0      	blx	r8
 8003388:	4307      	orrs	r7, r0
 800338a:	3568      	adds	r5, #104	; 0x68
 800338c:	e7e9      	b.n	8003362 <_fwalk_reent+0x12>

0800338e <__retarget_lock_init_recursive>:
 800338e:	4770      	bx	lr

08003390 <__retarget_lock_acquire_recursive>:
 8003390:	4770      	bx	lr

08003392 <__retarget_lock_release_recursive>:
 8003392:	4770      	bx	lr

08003394 <sbrk_aligned>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4e0e      	ldr	r6, [pc, #56]	; (80033d0 <sbrk_aligned+0x3c>)
 8003398:	460c      	mov	r4, r1
 800339a:	6831      	ldr	r1, [r6, #0]
 800339c:	4605      	mov	r5, r0
 800339e:	b911      	cbnz	r1, 80033a6 <sbrk_aligned+0x12>
 80033a0:	f000 fb7a 	bl	8003a98 <_sbrk_r>
 80033a4:	6030      	str	r0, [r6, #0]
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 fb75 	bl	8003a98 <_sbrk_r>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d00a      	beq.n	80033c8 <sbrk_aligned+0x34>
 80033b2:	1cc4      	adds	r4, r0, #3
 80033b4:	f024 0403 	bic.w	r4, r4, #3
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d007      	beq.n	80033cc <sbrk_aligned+0x38>
 80033bc:	1a21      	subs	r1, r4, r0
 80033be:	4628      	mov	r0, r5
 80033c0:	f000 fb6a 	bl	8003a98 <_sbrk_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	d101      	bne.n	80033cc <sbrk_aligned+0x38>
 80033c8:	f04f 34ff 	mov.w	r4, #4294967295
 80033cc:	4620      	mov	r0, r4
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	20000160 	.word	0x20000160

080033d4 <_malloc_r>:
 80033d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d8:	1ccd      	adds	r5, r1, #3
 80033da:	f025 0503 	bic.w	r5, r5, #3
 80033de:	3508      	adds	r5, #8
 80033e0:	2d0c      	cmp	r5, #12
 80033e2:	bf38      	it	cc
 80033e4:	250c      	movcc	r5, #12
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	4607      	mov	r7, r0
 80033ea:	db01      	blt.n	80033f0 <_malloc_r+0x1c>
 80033ec:	42a9      	cmp	r1, r5
 80033ee:	d905      	bls.n	80033fc <_malloc_r+0x28>
 80033f0:	230c      	movs	r3, #12
 80033f2:	2600      	movs	r6, #0
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4630      	mov	r0, r6
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fc:	4e2e      	ldr	r6, [pc, #184]	; (80034b8 <_malloc_r+0xe4>)
 80033fe:	f000 fdc5 	bl	8003f8c <__malloc_lock>
 8003402:	6833      	ldr	r3, [r6, #0]
 8003404:	461c      	mov	r4, r3
 8003406:	bb34      	cbnz	r4, 8003456 <_malloc_r+0x82>
 8003408:	4629      	mov	r1, r5
 800340a:	4638      	mov	r0, r7
 800340c:	f7ff ffc2 	bl	8003394 <sbrk_aligned>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	4604      	mov	r4, r0
 8003414:	d14d      	bne.n	80034b2 <_malloc_r+0xde>
 8003416:	6834      	ldr	r4, [r6, #0]
 8003418:	4626      	mov	r6, r4
 800341a:	2e00      	cmp	r6, #0
 800341c:	d140      	bne.n	80034a0 <_malloc_r+0xcc>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	4631      	mov	r1, r6
 8003422:	4638      	mov	r0, r7
 8003424:	eb04 0803 	add.w	r8, r4, r3
 8003428:	f000 fb36 	bl	8003a98 <_sbrk_r>
 800342c:	4580      	cmp	r8, r0
 800342e:	d13a      	bne.n	80034a6 <_malloc_r+0xd2>
 8003430:	6821      	ldr	r1, [r4, #0]
 8003432:	3503      	adds	r5, #3
 8003434:	1a6d      	subs	r5, r5, r1
 8003436:	f025 0503 	bic.w	r5, r5, #3
 800343a:	3508      	adds	r5, #8
 800343c:	2d0c      	cmp	r5, #12
 800343e:	bf38      	it	cc
 8003440:	250c      	movcc	r5, #12
 8003442:	4638      	mov	r0, r7
 8003444:	4629      	mov	r1, r5
 8003446:	f7ff ffa5 	bl	8003394 <sbrk_aligned>
 800344a:	3001      	adds	r0, #1
 800344c:	d02b      	beq.n	80034a6 <_malloc_r+0xd2>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	442b      	add	r3, r5
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	e00e      	b.n	8003474 <_malloc_r+0xa0>
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	1b52      	subs	r2, r2, r5
 800345a:	d41e      	bmi.n	800349a <_malloc_r+0xc6>
 800345c:	2a0b      	cmp	r2, #11
 800345e:	d916      	bls.n	800348e <_malloc_r+0xba>
 8003460:	1961      	adds	r1, r4, r5
 8003462:	42a3      	cmp	r3, r4
 8003464:	6025      	str	r5, [r4, #0]
 8003466:	bf18      	it	ne
 8003468:	6059      	strne	r1, [r3, #4]
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	bf08      	it	eq
 800346e:	6031      	streq	r1, [r6, #0]
 8003470:	5162      	str	r2, [r4, r5]
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	4638      	mov	r0, r7
 8003476:	f104 060b 	add.w	r6, r4, #11
 800347a:	f000 fd8d 	bl	8003f98 <__malloc_unlock>
 800347e:	f026 0607 	bic.w	r6, r6, #7
 8003482:	1d23      	adds	r3, r4, #4
 8003484:	1af2      	subs	r2, r6, r3
 8003486:	d0b6      	beq.n	80033f6 <_malloc_r+0x22>
 8003488:	1b9b      	subs	r3, r3, r6
 800348a:	50a3      	str	r3, [r4, r2]
 800348c:	e7b3      	b.n	80033f6 <_malloc_r+0x22>
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	42a3      	cmp	r3, r4
 8003492:	bf0c      	ite	eq
 8003494:	6032      	streq	r2, [r6, #0]
 8003496:	605a      	strne	r2, [r3, #4]
 8003498:	e7ec      	b.n	8003474 <_malloc_r+0xa0>
 800349a:	4623      	mov	r3, r4
 800349c:	6864      	ldr	r4, [r4, #4]
 800349e:	e7b2      	b.n	8003406 <_malloc_r+0x32>
 80034a0:	4634      	mov	r4, r6
 80034a2:	6876      	ldr	r6, [r6, #4]
 80034a4:	e7b9      	b.n	800341a <_malloc_r+0x46>
 80034a6:	230c      	movs	r3, #12
 80034a8:	4638      	mov	r0, r7
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	f000 fd74 	bl	8003f98 <__malloc_unlock>
 80034b0:	e7a1      	b.n	80033f6 <_malloc_r+0x22>
 80034b2:	6025      	str	r5, [r4, #0]
 80034b4:	e7de      	b.n	8003474 <_malloc_r+0xa0>
 80034b6:	bf00      	nop
 80034b8:	2000015c 	.word	0x2000015c

080034bc <__sfputc_r>:
 80034bc:	6893      	ldr	r3, [r2, #8]
 80034be:	b410      	push	{r4}
 80034c0:	3b01      	subs	r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	6093      	str	r3, [r2, #8]
 80034c6:	da07      	bge.n	80034d8 <__sfputc_r+0x1c>
 80034c8:	6994      	ldr	r4, [r2, #24]
 80034ca:	42a3      	cmp	r3, r4
 80034cc:	db01      	blt.n	80034d2 <__sfputc_r+0x16>
 80034ce:	290a      	cmp	r1, #10
 80034d0:	d102      	bne.n	80034d8 <__sfputc_r+0x1c>
 80034d2:	bc10      	pop	{r4}
 80034d4:	f000 bb34 	b.w	8003b40 <__swbuf_r>
 80034d8:	6813      	ldr	r3, [r2, #0]
 80034da:	1c58      	adds	r0, r3, #1
 80034dc:	6010      	str	r0, [r2, #0]
 80034de:	7019      	strb	r1, [r3, #0]
 80034e0:	4608      	mov	r0, r1
 80034e2:	bc10      	pop	{r4}
 80034e4:	4770      	bx	lr

080034e6 <__sfputs_r>:
 80034e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e8:	4606      	mov	r6, r0
 80034ea:	460f      	mov	r7, r1
 80034ec:	4614      	mov	r4, r2
 80034ee:	18d5      	adds	r5, r2, r3
 80034f0:	42ac      	cmp	r4, r5
 80034f2:	d101      	bne.n	80034f8 <__sfputs_r+0x12>
 80034f4:	2000      	movs	r0, #0
 80034f6:	e007      	b.n	8003508 <__sfputs_r+0x22>
 80034f8:	463a      	mov	r2, r7
 80034fa:	4630      	mov	r0, r6
 80034fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003500:	f7ff ffdc 	bl	80034bc <__sfputc_r>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d1f3      	bne.n	80034f0 <__sfputs_r+0xa>
 8003508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800350c <_vfiprintf_r>:
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	460d      	mov	r5, r1
 8003512:	4614      	mov	r4, r2
 8003514:	4698      	mov	r8, r3
 8003516:	4606      	mov	r6, r0
 8003518:	b09d      	sub	sp, #116	; 0x74
 800351a:	b118      	cbz	r0, 8003524 <_vfiprintf_r+0x18>
 800351c:	6983      	ldr	r3, [r0, #24]
 800351e:	b90b      	cbnz	r3, 8003524 <_vfiprintf_r+0x18>
 8003520:	f7ff fe98 	bl	8003254 <__sinit>
 8003524:	4b89      	ldr	r3, [pc, #548]	; (800374c <_vfiprintf_r+0x240>)
 8003526:	429d      	cmp	r5, r3
 8003528:	d11b      	bne.n	8003562 <_vfiprintf_r+0x56>
 800352a:	6875      	ldr	r5, [r6, #4]
 800352c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800352e:	07d9      	lsls	r1, r3, #31
 8003530:	d405      	bmi.n	800353e <_vfiprintf_r+0x32>
 8003532:	89ab      	ldrh	r3, [r5, #12]
 8003534:	059a      	lsls	r2, r3, #22
 8003536:	d402      	bmi.n	800353e <_vfiprintf_r+0x32>
 8003538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800353a:	f7ff ff29 	bl	8003390 <__retarget_lock_acquire_recursive>
 800353e:	89ab      	ldrh	r3, [r5, #12]
 8003540:	071b      	lsls	r3, r3, #28
 8003542:	d501      	bpl.n	8003548 <_vfiprintf_r+0x3c>
 8003544:	692b      	ldr	r3, [r5, #16]
 8003546:	b9eb      	cbnz	r3, 8003584 <_vfiprintf_r+0x78>
 8003548:	4629      	mov	r1, r5
 800354a:	4630      	mov	r0, r6
 800354c:	f000 fb5c 	bl	8003c08 <__swsetup_r>
 8003550:	b1c0      	cbz	r0, 8003584 <_vfiprintf_r+0x78>
 8003552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003554:	07dc      	lsls	r4, r3, #31
 8003556:	d50e      	bpl.n	8003576 <_vfiprintf_r+0x6a>
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	b01d      	add	sp, #116	; 0x74
 800355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <_vfiprintf_r+0x244>)
 8003564:	429d      	cmp	r5, r3
 8003566:	d101      	bne.n	800356c <_vfiprintf_r+0x60>
 8003568:	68b5      	ldr	r5, [r6, #8]
 800356a:	e7df      	b.n	800352c <_vfiprintf_r+0x20>
 800356c:	4b79      	ldr	r3, [pc, #484]	; (8003754 <_vfiprintf_r+0x248>)
 800356e:	429d      	cmp	r5, r3
 8003570:	bf08      	it	eq
 8003572:	68f5      	ldreq	r5, [r6, #12]
 8003574:	e7da      	b.n	800352c <_vfiprintf_r+0x20>
 8003576:	89ab      	ldrh	r3, [r5, #12]
 8003578:	0598      	lsls	r0, r3, #22
 800357a:	d4ed      	bmi.n	8003558 <_vfiprintf_r+0x4c>
 800357c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800357e:	f7ff ff08 	bl	8003392 <__retarget_lock_release_recursive>
 8003582:	e7e9      	b.n	8003558 <_vfiprintf_r+0x4c>
 8003584:	2300      	movs	r3, #0
 8003586:	9309      	str	r3, [sp, #36]	; 0x24
 8003588:	2320      	movs	r3, #32
 800358a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800358e:	2330      	movs	r3, #48	; 0x30
 8003590:	f04f 0901 	mov.w	r9, #1
 8003594:	f8cd 800c 	str.w	r8, [sp, #12]
 8003598:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003758 <_vfiprintf_r+0x24c>
 800359c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035a0:	4623      	mov	r3, r4
 80035a2:	469a      	mov	sl, r3
 80035a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035a8:	b10a      	cbz	r2, 80035ae <_vfiprintf_r+0xa2>
 80035aa:	2a25      	cmp	r2, #37	; 0x25
 80035ac:	d1f9      	bne.n	80035a2 <_vfiprintf_r+0x96>
 80035ae:	ebba 0b04 	subs.w	fp, sl, r4
 80035b2:	d00b      	beq.n	80035cc <_vfiprintf_r+0xc0>
 80035b4:	465b      	mov	r3, fp
 80035b6:	4622      	mov	r2, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	4630      	mov	r0, r6
 80035bc:	f7ff ff93 	bl	80034e6 <__sfputs_r>
 80035c0:	3001      	adds	r0, #1
 80035c2:	f000 80aa 	beq.w	800371a <_vfiprintf_r+0x20e>
 80035c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035c8:	445a      	add	r2, fp
 80035ca:	9209      	str	r2, [sp, #36]	; 0x24
 80035cc:	f89a 3000 	ldrb.w	r3, [sl]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80a2 	beq.w	800371a <_vfiprintf_r+0x20e>
 80035d6:	2300      	movs	r3, #0
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035e0:	f10a 0a01 	add.w	sl, sl, #1
 80035e4:	9304      	str	r3, [sp, #16]
 80035e6:	9307      	str	r3, [sp, #28]
 80035e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ec:	931a      	str	r3, [sp, #104]	; 0x68
 80035ee:	4654      	mov	r4, sl
 80035f0:	2205      	movs	r2, #5
 80035f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f6:	4858      	ldr	r0, [pc, #352]	; (8003758 <_vfiprintf_r+0x24c>)
 80035f8:	f000 fcba 	bl	8003f70 <memchr>
 80035fc:	9a04      	ldr	r2, [sp, #16]
 80035fe:	b9d8      	cbnz	r0, 8003638 <_vfiprintf_r+0x12c>
 8003600:	06d1      	lsls	r1, r2, #27
 8003602:	bf44      	itt	mi
 8003604:	2320      	movmi	r3, #32
 8003606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800360a:	0713      	lsls	r3, r2, #28
 800360c:	bf44      	itt	mi
 800360e:	232b      	movmi	r3, #43	; 0x2b
 8003610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003614:	f89a 3000 	ldrb.w	r3, [sl]
 8003618:	2b2a      	cmp	r3, #42	; 0x2a
 800361a:	d015      	beq.n	8003648 <_vfiprintf_r+0x13c>
 800361c:	4654      	mov	r4, sl
 800361e:	2000      	movs	r0, #0
 8003620:	f04f 0c0a 	mov.w	ip, #10
 8003624:	9a07      	ldr	r2, [sp, #28]
 8003626:	4621      	mov	r1, r4
 8003628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800362c:	3b30      	subs	r3, #48	; 0x30
 800362e:	2b09      	cmp	r3, #9
 8003630:	d94e      	bls.n	80036d0 <_vfiprintf_r+0x1c4>
 8003632:	b1b0      	cbz	r0, 8003662 <_vfiprintf_r+0x156>
 8003634:	9207      	str	r2, [sp, #28]
 8003636:	e014      	b.n	8003662 <_vfiprintf_r+0x156>
 8003638:	eba0 0308 	sub.w	r3, r0, r8
 800363c:	fa09 f303 	lsl.w	r3, r9, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	46a2      	mov	sl, r4
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	e7d2      	b.n	80035ee <_vfiprintf_r+0xe2>
 8003648:	9b03      	ldr	r3, [sp, #12]
 800364a:	1d19      	adds	r1, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	9103      	str	r1, [sp, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	bfbb      	ittet	lt
 8003654:	425b      	neglt	r3, r3
 8003656:	f042 0202 	orrlt.w	r2, r2, #2
 800365a:	9307      	strge	r3, [sp, #28]
 800365c:	9307      	strlt	r3, [sp, #28]
 800365e:	bfb8      	it	lt
 8003660:	9204      	strlt	r2, [sp, #16]
 8003662:	7823      	ldrb	r3, [r4, #0]
 8003664:	2b2e      	cmp	r3, #46	; 0x2e
 8003666:	d10c      	bne.n	8003682 <_vfiprintf_r+0x176>
 8003668:	7863      	ldrb	r3, [r4, #1]
 800366a:	2b2a      	cmp	r3, #42	; 0x2a
 800366c:	d135      	bne.n	80036da <_vfiprintf_r+0x1ce>
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	3402      	adds	r4, #2
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	9203      	str	r2, [sp, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	bfb8      	it	lt
 800367c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003680:	9305      	str	r3, [sp, #20]
 8003682:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800375c <_vfiprintf_r+0x250>
 8003686:	2203      	movs	r2, #3
 8003688:	4650      	mov	r0, sl
 800368a:	7821      	ldrb	r1, [r4, #0]
 800368c:	f000 fc70 	bl	8003f70 <memchr>
 8003690:	b140      	cbz	r0, 80036a4 <_vfiprintf_r+0x198>
 8003692:	2340      	movs	r3, #64	; 0x40
 8003694:	eba0 000a 	sub.w	r0, r0, sl
 8003698:	fa03 f000 	lsl.w	r0, r3, r0
 800369c:	9b04      	ldr	r3, [sp, #16]
 800369e:	3401      	adds	r4, #1
 80036a0:	4303      	orrs	r3, r0
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a8:	2206      	movs	r2, #6
 80036aa:	482d      	ldr	r0, [pc, #180]	; (8003760 <_vfiprintf_r+0x254>)
 80036ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036b0:	f000 fc5e 	bl	8003f70 <memchr>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d03f      	beq.n	8003738 <_vfiprintf_r+0x22c>
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <_vfiprintf_r+0x258>)
 80036ba:	bb1b      	cbnz	r3, 8003704 <_vfiprintf_r+0x1f8>
 80036bc:	9b03      	ldr	r3, [sp, #12]
 80036be:	3307      	adds	r3, #7
 80036c0:	f023 0307 	bic.w	r3, r3, #7
 80036c4:	3308      	adds	r3, #8
 80036c6:	9303      	str	r3, [sp, #12]
 80036c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ca:	443b      	add	r3, r7
 80036cc:	9309      	str	r3, [sp, #36]	; 0x24
 80036ce:	e767      	b.n	80035a0 <_vfiprintf_r+0x94>
 80036d0:	460c      	mov	r4, r1
 80036d2:	2001      	movs	r0, #1
 80036d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80036d8:	e7a5      	b.n	8003626 <_vfiprintf_r+0x11a>
 80036da:	2300      	movs	r3, #0
 80036dc:	f04f 0c0a 	mov.w	ip, #10
 80036e0:	4619      	mov	r1, r3
 80036e2:	3401      	adds	r4, #1
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	4620      	mov	r0, r4
 80036e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ec:	3a30      	subs	r2, #48	; 0x30
 80036ee:	2a09      	cmp	r2, #9
 80036f0:	d903      	bls.n	80036fa <_vfiprintf_r+0x1ee>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0c5      	beq.n	8003682 <_vfiprintf_r+0x176>
 80036f6:	9105      	str	r1, [sp, #20]
 80036f8:	e7c3      	b.n	8003682 <_vfiprintf_r+0x176>
 80036fa:	4604      	mov	r4, r0
 80036fc:	2301      	movs	r3, #1
 80036fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003702:	e7f0      	b.n	80036e6 <_vfiprintf_r+0x1da>
 8003704:	ab03      	add	r3, sp, #12
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	462a      	mov	r2, r5
 800370a:	4630      	mov	r0, r6
 800370c:	4b16      	ldr	r3, [pc, #88]	; (8003768 <_vfiprintf_r+0x25c>)
 800370e:	a904      	add	r1, sp, #16
 8003710:	f3af 8000 	nop.w
 8003714:	4607      	mov	r7, r0
 8003716:	1c78      	adds	r0, r7, #1
 8003718:	d1d6      	bne.n	80036c8 <_vfiprintf_r+0x1bc>
 800371a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800371c:	07d9      	lsls	r1, r3, #31
 800371e:	d405      	bmi.n	800372c <_vfiprintf_r+0x220>
 8003720:	89ab      	ldrh	r3, [r5, #12]
 8003722:	059a      	lsls	r2, r3, #22
 8003724:	d402      	bmi.n	800372c <_vfiprintf_r+0x220>
 8003726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003728:	f7ff fe33 	bl	8003392 <__retarget_lock_release_recursive>
 800372c:	89ab      	ldrh	r3, [r5, #12]
 800372e:	065b      	lsls	r3, r3, #25
 8003730:	f53f af12 	bmi.w	8003558 <_vfiprintf_r+0x4c>
 8003734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003736:	e711      	b.n	800355c <_vfiprintf_r+0x50>
 8003738:	ab03      	add	r3, sp, #12
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	462a      	mov	r2, r5
 800373e:	4630      	mov	r0, r6
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <_vfiprintf_r+0x25c>)
 8003742:	a904      	add	r1, sp, #16
 8003744:	f000 f882 	bl	800384c <_printf_i>
 8003748:	e7e4      	b.n	8003714 <_vfiprintf_r+0x208>
 800374a:	bf00      	nop
 800374c:	08004124 	.word	0x08004124
 8003750:	08004144 	.word	0x08004144
 8003754:	08004104 	.word	0x08004104
 8003758:	08004164 	.word	0x08004164
 800375c:	0800416a 	.word	0x0800416a
 8003760:	0800416e 	.word	0x0800416e
 8003764:	00000000 	.word	0x00000000
 8003768:	080034e7 	.word	0x080034e7

0800376c <_printf_common>:
 800376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	4616      	mov	r6, r2
 8003772:	4699      	mov	r9, r3
 8003774:	688a      	ldr	r2, [r1, #8]
 8003776:	690b      	ldr	r3, [r1, #16]
 8003778:	4607      	mov	r7, r0
 800377a:	4293      	cmp	r3, r2
 800377c:	bfb8      	it	lt
 800377e:	4613      	movlt	r3, r2
 8003780:	6033      	str	r3, [r6, #0]
 8003782:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003786:	460c      	mov	r4, r1
 8003788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800378c:	b10a      	cbz	r2, 8003792 <_printf_common+0x26>
 800378e:	3301      	adds	r3, #1
 8003790:	6033      	str	r3, [r6, #0]
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	0699      	lsls	r1, r3, #26
 8003796:	bf42      	ittt	mi
 8003798:	6833      	ldrmi	r3, [r6, #0]
 800379a:	3302      	addmi	r3, #2
 800379c:	6033      	strmi	r3, [r6, #0]
 800379e:	6825      	ldr	r5, [r4, #0]
 80037a0:	f015 0506 	ands.w	r5, r5, #6
 80037a4:	d106      	bne.n	80037b4 <_printf_common+0x48>
 80037a6:	f104 0a19 	add.w	sl, r4, #25
 80037aa:	68e3      	ldr	r3, [r4, #12]
 80037ac:	6832      	ldr	r2, [r6, #0]
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	dc28      	bgt.n	8003806 <_printf_common+0x9a>
 80037b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037b8:	1e13      	subs	r3, r2, #0
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	bf18      	it	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	0692      	lsls	r2, r2, #26
 80037c2:	d42d      	bmi.n	8003820 <_printf_common+0xb4>
 80037c4:	4649      	mov	r1, r9
 80037c6:	4638      	mov	r0, r7
 80037c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037cc:	47c0      	blx	r8
 80037ce:	3001      	adds	r0, #1
 80037d0:	d020      	beq.n	8003814 <_printf_common+0xa8>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	68e5      	ldr	r5, [r4, #12]
 80037d6:	f003 0306 	and.w	r3, r3, #6
 80037da:	2b04      	cmp	r3, #4
 80037dc:	bf18      	it	ne
 80037de:	2500      	movne	r5, #0
 80037e0:	6832      	ldr	r2, [r6, #0]
 80037e2:	f04f 0600 	mov.w	r6, #0
 80037e6:	68a3      	ldr	r3, [r4, #8]
 80037e8:	bf08      	it	eq
 80037ea:	1aad      	subeq	r5, r5, r2
 80037ec:	6922      	ldr	r2, [r4, #16]
 80037ee:	bf08      	it	eq
 80037f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bfc4      	itt	gt
 80037f8:	1a9b      	subgt	r3, r3, r2
 80037fa:	18ed      	addgt	r5, r5, r3
 80037fc:	341a      	adds	r4, #26
 80037fe:	42b5      	cmp	r5, r6
 8003800:	d11a      	bne.n	8003838 <_printf_common+0xcc>
 8003802:	2000      	movs	r0, #0
 8003804:	e008      	b.n	8003818 <_printf_common+0xac>
 8003806:	2301      	movs	r3, #1
 8003808:	4652      	mov	r2, sl
 800380a:	4649      	mov	r1, r9
 800380c:	4638      	mov	r0, r7
 800380e:	47c0      	blx	r8
 8003810:	3001      	adds	r0, #1
 8003812:	d103      	bne.n	800381c <_printf_common+0xb0>
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800381c:	3501      	adds	r5, #1
 800381e:	e7c4      	b.n	80037aa <_printf_common+0x3e>
 8003820:	2030      	movs	r0, #48	; 0x30
 8003822:	18e1      	adds	r1, r4, r3
 8003824:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800382e:	4422      	add	r2, r4
 8003830:	3302      	adds	r3, #2
 8003832:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003836:	e7c5      	b.n	80037c4 <_printf_common+0x58>
 8003838:	2301      	movs	r3, #1
 800383a:	4622      	mov	r2, r4
 800383c:	4649      	mov	r1, r9
 800383e:	4638      	mov	r0, r7
 8003840:	47c0      	blx	r8
 8003842:	3001      	adds	r0, #1
 8003844:	d0e6      	beq.n	8003814 <_printf_common+0xa8>
 8003846:	3601      	adds	r6, #1
 8003848:	e7d9      	b.n	80037fe <_printf_common+0x92>
	...

0800384c <_printf_i>:
 800384c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003850:	7e0f      	ldrb	r7, [r1, #24]
 8003852:	4691      	mov	r9, r2
 8003854:	2f78      	cmp	r7, #120	; 0x78
 8003856:	4680      	mov	r8, r0
 8003858:	460c      	mov	r4, r1
 800385a:	469a      	mov	sl, r3
 800385c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800385e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003862:	d807      	bhi.n	8003874 <_printf_i+0x28>
 8003864:	2f62      	cmp	r7, #98	; 0x62
 8003866:	d80a      	bhi.n	800387e <_printf_i+0x32>
 8003868:	2f00      	cmp	r7, #0
 800386a:	f000 80d9 	beq.w	8003a20 <_printf_i+0x1d4>
 800386e:	2f58      	cmp	r7, #88	; 0x58
 8003870:	f000 80a4 	beq.w	80039bc <_printf_i+0x170>
 8003874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800387c:	e03a      	b.n	80038f4 <_printf_i+0xa8>
 800387e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003882:	2b15      	cmp	r3, #21
 8003884:	d8f6      	bhi.n	8003874 <_printf_i+0x28>
 8003886:	a101      	add	r1, pc, #4	; (adr r1, 800388c <_printf_i+0x40>)
 8003888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800388c:	080038e5 	.word	0x080038e5
 8003890:	080038f9 	.word	0x080038f9
 8003894:	08003875 	.word	0x08003875
 8003898:	08003875 	.word	0x08003875
 800389c:	08003875 	.word	0x08003875
 80038a0:	08003875 	.word	0x08003875
 80038a4:	080038f9 	.word	0x080038f9
 80038a8:	08003875 	.word	0x08003875
 80038ac:	08003875 	.word	0x08003875
 80038b0:	08003875 	.word	0x08003875
 80038b4:	08003875 	.word	0x08003875
 80038b8:	08003a07 	.word	0x08003a07
 80038bc:	08003929 	.word	0x08003929
 80038c0:	080039e9 	.word	0x080039e9
 80038c4:	08003875 	.word	0x08003875
 80038c8:	08003875 	.word	0x08003875
 80038cc:	08003a29 	.word	0x08003a29
 80038d0:	08003875 	.word	0x08003875
 80038d4:	08003929 	.word	0x08003929
 80038d8:	08003875 	.word	0x08003875
 80038dc:	08003875 	.word	0x08003875
 80038e0:	080039f1 	.word	0x080039f1
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	602a      	str	r2, [r5, #0]
 80038ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0a4      	b.n	8003a42 <_printf_i+0x1f6>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	6829      	ldr	r1, [r5, #0]
 80038fc:	0606      	lsls	r6, r0, #24
 80038fe:	f101 0304 	add.w	r3, r1, #4
 8003902:	d50a      	bpl.n	800391a <_printf_i+0xce>
 8003904:	680e      	ldr	r6, [r1, #0]
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	2e00      	cmp	r6, #0
 800390a:	da03      	bge.n	8003914 <_printf_i+0xc8>
 800390c:	232d      	movs	r3, #45	; 0x2d
 800390e:	4276      	negs	r6, r6
 8003910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003914:	230a      	movs	r3, #10
 8003916:	485e      	ldr	r0, [pc, #376]	; (8003a90 <_printf_i+0x244>)
 8003918:	e019      	b.n	800394e <_printf_i+0x102>
 800391a:	680e      	ldr	r6, [r1, #0]
 800391c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	bf18      	it	ne
 8003924:	b236      	sxthne	r6, r6
 8003926:	e7ef      	b.n	8003908 <_printf_i+0xbc>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	1d19      	adds	r1, r3, #4
 800392e:	6029      	str	r1, [r5, #0]
 8003930:	0601      	lsls	r1, r0, #24
 8003932:	d501      	bpl.n	8003938 <_printf_i+0xec>
 8003934:	681e      	ldr	r6, [r3, #0]
 8003936:	e002      	b.n	800393e <_printf_i+0xf2>
 8003938:	0646      	lsls	r6, r0, #25
 800393a:	d5fb      	bpl.n	8003934 <_printf_i+0xe8>
 800393c:	881e      	ldrh	r6, [r3, #0]
 800393e:	2f6f      	cmp	r7, #111	; 0x6f
 8003940:	bf0c      	ite	eq
 8003942:	2308      	moveq	r3, #8
 8003944:	230a      	movne	r3, #10
 8003946:	4852      	ldr	r0, [pc, #328]	; (8003a90 <_printf_i+0x244>)
 8003948:	2100      	movs	r1, #0
 800394a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800394e:	6865      	ldr	r5, [r4, #4]
 8003950:	2d00      	cmp	r5, #0
 8003952:	bfa8      	it	ge
 8003954:	6821      	ldrge	r1, [r4, #0]
 8003956:	60a5      	str	r5, [r4, #8]
 8003958:	bfa4      	itt	ge
 800395a:	f021 0104 	bicge.w	r1, r1, #4
 800395e:	6021      	strge	r1, [r4, #0]
 8003960:	b90e      	cbnz	r6, 8003966 <_printf_i+0x11a>
 8003962:	2d00      	cmp	r5, #0
 8003964:	d04d      	beq.n	8003a02 <_printf_i+0x1b6>
 8003966:	4615      	mov	r5, r2
 8003968:	fbb6 f1f3 	udiv	r1, r6, r3
 800396c:	fb03 6711 	mls	r7, r3, r1, r6
 8003970:	5dc7      	ldrb	r7, [r0, r7]
 8003972:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003976:	4637      	mov	r7, r6
 8003978:	42bb      	cmp	r3, r7
 800397a:	460e      	mov	r6, r1
 800397c:	d9f4      	bls.n	8003968 <_printf_i+0x11c>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d10b      	bne.n	800399a <_printf_i+0x14e>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	07de      	lsls	r6, r3, #31
 8003986:	d508      	bpl.n	800399a <_printf_i+0x14e>
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	6861      	ldr	r1, [r4, #4]
 800398c:	4299      	cmp	r1, r3
 800398e:	bfde      	ittt	le
 8003990:	2330      	movle	r3, #48	; 0x30
 8003992:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003996:	f105 35ff 	addle.w	r5, r5, #4294967295
 800399a:	1b52      	subs	r2, r2, r5
 800399c:	6122      	str	r2, [r4, #16]
 800399e:	464b      	mov	r3, r9
 80039a0:	4621      	mov	r1, r4
 80039a2:	4640      	mov	r0, r8
 80039a4:	f8cd a000 	str.w	sl, [sp]
 80039a8:	aa03      	add	r2, sp, #12
 80039aa:	f7ff fedf 	bl	800376c <_printf_common>
 80039ae:	3001      	adds	r0, #1
 80039b0:	d14c      	bne.n	8003a4c <_printf_i+0x200>
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	b004      	add	sp, #16
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	4834      	ldr	r0, [pc, #208]	; (8003a90 <_printf_i+0x244>)
 80039be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039c2:	6829      	ldr	r1, [r5, #0]
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80039ca:	6029      	str	r1, [r5, #0]
 80039cc:	061d      	lsls	r5, r3, #24
 80039ce:	d514      	bpl.n	80039fa <_printf_i+0x1ae>
 80039d0:	07df      	lsls	r7, r3, #31
 80039d2:	bf44      	itt	mi
 80039d4:	f043 0320 	orrmi.w	r3, r3, #32
 80039d8:	6023      	strmi	r3, [r4, #0]
 80039da:	b91e      	cbnz	r6, 80039e4 <_printf_i+0x198>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	f023 0320 	bic.w	r3, r3, #32
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	2310      	movs	r3, #16
 80039e6:	e7af      	b.n	8003948 <_printf_i+0xfc>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	f043 0320 	orr.w	r3, r3, #32
 80039ee:	6023      	str	r3, [r4, #0]
 80039f0:	2378      	movs	r3, #120	; 0x78
 80039f2:	4828      	ldr	r0, [pc, #160]	; (8003a94 <_printf_i+0x248>)
 80039f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039f8:	e7e3      	b.n	80039c2 <_printf_i+0x176>
 80039fa:	0659      	lsls	r1, r3, #25
 80039fc:	bf48      	it	mi
 80039fe:	b2b6      	uxthmi	r6, r6
 8003a00:	e7e6      	b.n	80039d0 <_printf_i+0x184>
 8003a02:	4615      	mov	r5, r2
 8003a04:	e7bb      	b.n	800397e <_printf_i+0x132>
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	6826      	ldr	r6, [r4, #0]
 8003a0a:	1d18      	adds	r0, r3, #4
 8003a0c:	6961      	ldr	r1, [r4, #20]
 8003a0e:	6028      	str	r0, [r5, #0]
 8003a10:	0635      	lsls	r5, r6, #24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	d501      	bpl.n	8003a1a <_printf_i+0x1ce>
 8003a16:	6019      	str	r1, [r3, #0]
 8003a18:	e002      	b.n	8003a20 <_printf_i+0x1d4>
 8003a1a:	0670      	lsls	r0, r6, #25
 8003a1c:	d5fb      	bpl.n	8003a16 <_printf_i+0x1ca>
 8003a1e:	8019      	strh	r1, [r3, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	4615      	mov	r5, r2
 8003a24:	6123      	str	r3, [r4, #16]
 8003a26:	e7ba      	b.n	800399e <_printf_i+0x152>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	1d1a      	adds	r2, r3, #4
 8003a2e:	602a      	str	r2, [r5, #0]
 8003a30:	681d      	ldr	r5, [r3, #0]
 8003a32:	6862      	ldr	r2, [r4, #4]
 8003a34:	4628      	mov	r0, r5
 8003a36:	f000 fa9b 	bl	8003f70 <memchr>
 8003a3a:	b108      	cbz	r0, 8003a40 <_printf_i+0x1f4>
 8003a3c:	1b40      	subs	r0, r0, r5
 8003a3e:	6060      	str	r0, [r4, #4]
 8003a40:	6863      	ldr	r3, [r4, #4]
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	2300      	movs	r3, #0
 8003a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a4a:	e7a8      	b.n	800399e <_printf_i+0x152>
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4649      	mov	r1, r9
 8003a50:	4640      	mov	r0, r8
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	47d0      	blx	sl
 8003a56:	3001      	adds	r0, #1
 8003a58:	d0ab      	beq.n	80039b2 <_printf_i+0x166>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	079b      	lsls	r3, r3, #30
 8003a5e:	d413      	bmi.n	8003a88 <_printf_i+0x23c>
 8003a60:	68e0      	ldr	r0, [r4, #12]
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	4298      	cmp	r0, r3
 8003a66:	bfb8      	it	lt
 8003a68:	4618      	movlt	r0, r3
 8003a6a:	e7a4      	b.n	80039b6 <_printf_i+0x16a>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4632      	mov	r2, r6
 8003a70:	4649      	mov	r1, r9
 8003a72:	4640      	mov	r0, r8
 8003a74:	47d0      	blx	sl
 8003a76:	3001      	adds	r0, #1
 8003a78:	d09b      	beq.n	80039b2 <_printf_i+0x166>
 8003a7a:	3501      	adds	r5, #1
 8003a7c:	68e3      	ldr	r3, [r4, #12]
 8003a7e:	9903      	ldr	r1, [sp, #12]
 8003a80:	1a5b      	subs	r3, r3, r1
 8003a82:	42ab      	cmp	r3, r5
 8003a84:	dcf2      	bgt.n	8003a6c <_printf_i+0x220>
 8003a86:	e7eb      	b.n	8003a60 <_printf_i+0x214>
 8003a88:	2500      	movs	r5, #0
 8003a8a:	f104 0619 	add.w	r6, r4, #25
 8003a8e:	e7f5      	b.n	8003a7c <_printf_i+0x230>
 8003a90:	08004175 	.word	0x08004175
 8003a94:	08004186 	.word	0x08004186

08003a98 <_sbrk_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4d05      	ldr	r5, [pc, #20]	; (8003ab4 <_sbrk_r+0x1c>)
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	f7fc ff84 	bl	80009b0 <_sbrk>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk_r+0x1a>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_sbrk_r+0x1a>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20000164 	.word	0x20000164

08003ab8 <__sread>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	460c      	mov	r4, r1
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	f000 fab8 	bl	8004034 <_read_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	bfab      	itete	ge
 8003ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003aca:	89a3      	ldrhlt	r3, [r4, #12]
 8003acc:	181b      	addge	r3, r3, r0
 8003ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ad2:	bfac      	ite	ge
 8003ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ad6:	81a3      	strhlt	r3, [r4, #12]
 8003ad8:	bd10      	pop	{r4, pc}

08003ada <__swrite>:
 8003ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	461f      	mov	r7, r3
 8003ae0:	898b      	ldrh	r3, [r1, #12]
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	05db      	lsls	r3, r3, #23
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	4616      	mov	r6, r2
 8003aea:	d505      	bpl.n	8003af8 <__swrite+0x1e>
 8003aec:	2302      	movs	r3, #2
 8003aee:	2200      	movs	r2, #0
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	f000 f9c4 	bl	8003e80 <_lseek_r>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	4632      	mov	r2, r6
 8003afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	4628      	mov	r0, r5
 8003b04:	463b      	mov	r3, r7
 8003b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0e:	f000 b869 	b.w	8003be4 <_write_r>

08003b12 <__sseek>:
 8003b12:	b510      	push	{r4, lr}
 8003b14:	460c      	mov	r4, r1
 8003b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1a:	f000 f9b1 	bl	8003e80 <_lseek_r>
 8003b1e:	1c43      	adds	r3, r0, #1
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	bf15      	itete	ne
 8003b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b2e:	81a3      	strheq	r3, [r4, #12]
 8003b30:	bf18      	it	ne
 8003b32:	81a3      	strhne	r3, [r4, #12]
 8003b34:	bd10      	pop	{r4, pc}

08003b36 <__sclose>:
 8003b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3a:	f000 b8d3 	b.w	8003ce4 <_close_r>
	...

08003b40 <__swbuf_r>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	460e      	mov	r6, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	4605      	mov	r5, r0
 8003b48:	b118      	cbz	r0, 8003b52 <__swbuf_r+0x12>
 8003b4a:	6983      	ldr	r3, [r0, #24]
 8003b4c:	b90b      	cbnz	r3, 8003b52 <__swbuf_r+0x12>
 8003b4e:	f7ff fb81 	bl	8003254 <__sinit>
 8003b52:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <__swbuf_r+0x98>)
 8003b54:	429c      	cmp	r4, r3
 8003b56:	d12b      	bne.n	8003bb0 <__swbuf_r+0x70>
 8003b58:	686c      	ldr	r4, [r5, #4]
 8003b5a:	69a3      	ldr	r3, [r4, #24]
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	071a      	lsls	r2, r3, #28
 8003b62:	d52f      	bpl.n	8003bc4 <__swbuf_r+0x84>
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	b36b      	cbz	r3, 8003bc4 <__swbuf_r+0x84>
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	b2f6      	uxtb	r6, r6
 8003b6e:	1ac0      	subs	r0, r0, r3
 8003b70:	6963      	ldr	r3, [r4, #20]
 8003b72:	4637      	mov	r7, r6
 8003b74:	4283      	cmp	r3, r0
 8003b76:	dc04      	bgt.n	8003b82 <__swbuf_r+0x42>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f944 	bl	8003e08 <_fflush_r>
 8003b80:	bb30      	cbnz	r0, 8003bd0 <__swbuf_r+0x90>
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	3001      	adds	r0, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	60a3      	str	r3, [r4, #8]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	6022      	str	r2, [r4, #0]
 8003b90:	701e      	strb	r6, [r3, #0]
 8003b92:	6963      	ldr	r3, [r4, #20]
 8003b94:	4283      	cmp	r3, r0
 8003b96:	d004      	beq.n	8003ba2 <__swbuf_r+0x62>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	07db      	lsls	r3, r3, #31
 8003b9c:	d506      	bpl.n	8003bac <__swbuf_r+0x6c>
 8003b9e:	2e0a      	cmp	r6, #10
 8003ba0:	d104      	bne.n	8003bac <__swbuf_r+0x6c>
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f000 f92f 	bl	8003e08 <_fflush_r>
 8003baa:	b988      	cbnz	r0, 8003bd0 <__swbuf_r+0x90>
 8003bac:	4638      	mov	r0, r7
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <__swbuf_r+0x9c>)
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	d101      	bne.n	8003bba <__swbuf_r+0x7a>
 8003bb6:	68ac      	ldr	r4, [r5, #8]
 8003bb8:	e7cf      	b.n	8003b5a <__swbuf_r+0x1a>
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <__swbuf_r+0xa0>)
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	bf08      	it	eq
 8003bc0:	68ec      	ldreq	r4, [r5, #12]
 8003bc2:	e7ca      	b.n	8003b5a <__swbuf_r+0x1a>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 f81e 	bl	8003c08 <__swsetup_r>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d0cb      	beq.n	8003b68 <__swbuf_r+0x28>
 8003bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8003bd4:	e7ea      	b.n	8003bac <__swbuf_r+0x6c>
 8003bd6:	bf00      	nop
 8003bd8:	08004124 	.word	0x08004124
 8003bdc:	08004144 	.word	0x08004144
 8003be0:	08004104 	.word	0x08004104

08003be4 <_write_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	2200      	movs	r2, #0
 8003bee:	4d05      	ldr	r5, [pc, #20]	; (8003c04 <_write_r+0x20>)
 8003bf0:	602a      	str	r2, [r5, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7fc fe90 	bl	8000918 <_write>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_write_r+0x1e>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_write_r+0x1e>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	20000164 	.word	0x20000164

08003c08 <__swsetup_r>:
 8003c08:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <__swsetup_r+0xcc>)
 8003c0a:	b570      	push	{r4, r5, r6, lr}
 8003c0c:	681d      	ldr	r5, [r3, #0]
 8003c0e:	4606      	mov	r6, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	b125      	cbz	r5, 8003c1e <__swsetup_r+0x16>
 8003c14:	69ab      	ldr	r3, [r5, #24]
 8003c16:	b913      	cbnz	r3, 8003c1e <__swsetup_r+0x16>
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f7ff fb1b 	bl	8003254 <__sinit>
 8003c1e:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <__swsetup_r+0xd0>)
 8003c20:	429c      	cmp	r4, r3
 8003c22:	d10f      	bne.n	8003c44 <__swsetup_r+0x3c>
 8003c24:	686c      	ldr	r4, [r5, #4]
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c2c:	0719      	lsls	r1, r3, #28
 8003c2e:	d42c      	bmi.n	8003c8a <__swsetup_r+0x82>
 8003c30:	06dd      	lsls	r5, r3, #27
 8003c32:	d411      	bmi.n	8003c58 <__swsetup_r+0x50>
 8003c34:	2309      	movs	r3, #9
 8003c36:	6033      	str	r3, [r6, #0]
 8003c38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	e03e      	b.n	8003cc2 <__swsetup_r+0xba>
 8003c44:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <__swsetup_r+0xd4>)
 8003c46:	429c      	cmp	r4, r3
 8003c48:	d101      	bne.n	8003c4e <__swsetup_r+0x46>
 8003c4a:	68ac      	ldr	r4, [r5, #8]
 8003c4c:	e7eb      	b.n	8003c26 <__swsetup_r+0x1e>
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <__swsetup_r+0xd8>)
 8003c50:	429c      	cmp	r4, r3
 8003c52:	bf08      	it	eq
 8003c54:	68ec      	ldreq	r4, [r5, #12]
 8003c56:	e7e6      	b.n	8003c26 <__swsetup_r+0x1e>
 8003c58:	0758      	lsls	r0, r3, #29
 8003c5a:	d512      	bpl.n	8003c82 <__swsetup_r+0x7a>
 8003c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c5e:	b141      	cbz	r1, 8003c72 <__swsetup_r+0x6a>
 8003c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c64:	4299      	cmp	r1, r3
 8003c66:	d002      	beq.n	8003c6e <__swsetup_r+0x66>
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f000 f99b 	bl	8003fa4 <_free_r>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6363      	str	r3, [r4, #52]	; 0x34
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	f043 0308 	orr.w	r3, r3, #8
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	b94b      	cbnz	r3, 8003ca2 <__swsetup_r+0x9a>
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d003      	beq.n	8003ca2 <__swsetup_r+0x9a>
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f000 f927 	bl	8003ef0 <__smakebuf_r>
 8003ca2:	89a0      	ldrh	r0, [r4, #12]
 8003ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ca8:	f010 0301 	ands.w	r3, r0, #1
 8003cac:	d00a      	beq.n	8003cc4 <__swsetup_r+0xbc>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	6963      	ldr	r3, [r4, #20]
 8003cb4:	425b      	negs	r3, r3
 8003cb6:	61a3      	str	r3, [r4, #24]
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	b943      	cbnz	r3, 8003cce <__swsetup_r+0xc6>
 8003cbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003cc0:	d1ba      	bne.n	8003c38 <__swsetup_r+0x30>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	0781      	lsls	r1, r0, #30
 8003cc6:	bf58      	it	pl
 8003cc8:	6963      	ldrpl	r3, [r4, #20]
 8003cca:	60a3      	str	r3, [r4, #8]
 8003ccc:	e7f4      	b.n	8003cb8 <__swsetup_r+0xb0>
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e7f7      	b.n	8003cc2 <__swsetup_r+0xba>
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c
 8003cd8:	08004124 	.word	0x08004124
 8003cdc:	08004144 	.word	0x08004144
 8003ce0:	08004104 	.word	0x08004104

08003ce4 <_close_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	4d05      	ldr	r5, [pc, #20]	; (8003d00 <_close_r+0x1c>)
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	f7fc fe2e 	bl	8000950 <_close>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_close_r+0x1a>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_close_r+0x1a>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000164 	.word	0x20000164

08003d04 <__sflush_r>:
 8003d04:	898a      	ldrh	r2, [r1, #12]
 8003d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d08:	4605      	mov	r5, r0
 8003d0a:	0710      	lsls	r0, r2, #28
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	d457      	bmi.n	8003dc0 <__sflush_r+0xbc>
 8003d10:	684b      	ldr	r3, [r1, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	dc04      	bgt.n	8003d20 <__sflush_r+0x1c>
 8003d16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dc01      	bgt.n	8003d20 <__sflush_r+0x1c>
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	d0fa      	beq.n	8003d1c <__sflush_r+0x18>
 8003d26:	2300      	movs	r3, #0
 8003d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d2c:	682f      	ldr	r7, [r5, #0]
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	d032      	beq.n	8003d98 <__sflush_r+0x94>
 8003d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	075a      	lsls	r2, r3, #29
 8003d38:	d505      	bpl.n	8003d46 <__sflush_r+0x42>
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	1ac0      	subs	r0, r0, r3
 8003d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d40:	b10b      	cbz	r3, 8003d46 <__sflush_r+0x42>
 8003d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d44:	1ac0      	subs	r0, r0, r3
 8003d46:	2300      	movs	r3, #0
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	6a21      	ldr	r1, [r4, #32]
 8003d50:	47b0      	blx	r6
 8003d52:	1c43      	adds	r3, r0, #1
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	d106      	bne.n	8003d66 <__sflush_r+0x62>
 8003d58:	6829      	ldr	r1, [r5, #0]
 8003d5a:	291d      	cmp	r1, #29
 8003d5c:	d82c      	bhi.n	8003db8 <__sflush_r+0xb4>
 8003d5e:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <__sflush_r+0x100>)
 8003d60:	40ca      	lsrs	r2, r1
 8003d62:	07d6      	lsls	r6, r2, #31
 8003d64:	d528      	bpl.n	8003db8 <__sflush_r+0xb4>
 8003d66:	2200      	movs	r2, #0
 8003d68:	6062      	str	r2, [r4, #4]
 8003d6a:	6922      	ldr	r2, [r4, #16]
 8003d6c:	04d9      	lsls	r1, r3, #19
 8003d6e:	6022      	str	r2, [r4, #0]
 8003d70:	d504      	bpl.n	8003d7c <__sflush_r+0x78>
 8003d72:	1c42      	adds	r2, r0, #1
 8003d74:	d101      	bne.n	8003d7a <__sflush_r+0x76>
 8003d76:	682b      	ldr	r3, [r5, #0]
 8003d78:	b903      	cbnz	r3, 8003d7c <__sflush_r+0x78>
 8003d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8003d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d7e:	602f      	str	r7, [r5, #0]
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d0cb      	beq.n	8003d1c <__sflush_r+0x18>
 8003d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d002      	beq.n	8003d92 <__sflush_r+0x8e>
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f909 	bl	8003fa4 <_free_r>
 8003d92:	2000      	movs	r0, #0
 8003d94:	6360      	str	r0, [r4, #52]	; 0x34
 8003d96:	e7c2      	b.n	8003d1e <__sflush_r+0x1a>
 8003d98:	6a21      	ldr	r1, [r4, #32]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b0      	blx	r6
 8003da0:	1c41      	adds	r1, r0, #1
 8003da2:	d1c7      	bne.n	8003d34 <__sflush_r+0x30>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0c4      	beq.n	8003d34 <__sflush_r+0x30>
 8003daa:	2b1d      	cmp	r3, #29
 8003dac:	d001      	beq.n	8003db2 <__sflush_r+0xae>
 8003dae:	2b16      	cmp	r3, #22
 8003db0:	d101      	bne.n	8003db6 <__sflush_r+0xb2>
 8003db2:	602f      	str	r7, [r5, #0]
 8003db4:	e7b2      	b.n	8003d1c <__sflush_r+0x18>
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	e7ae      	b.n	8003d1e <__sflush_r+0x1a>
 8003dc0:	690f      	ldr	r7, [r1, #16]
 8003dc2:	2f00      	cmp	r7, #0
 8003dc4:	d0aa      	beq.n	8003d1c <__sflush_r+0x18>
 8003dc6:	0793      	lsls	r3, r2, #30
 8003dc8:	bf18      	it	ne
 8003dca:	2300      	movne	r3, #0
 8003dcc:	680e      	ldr	r6, [r1, #0]
 8003dce:	bf08      	it	eq
 8003dd0:	694b      	ldreq	r3, [r1, #20]
 8003dd2:	1bf6      	subs	r6, r6, r7
 8003dd4:	600f      	str	r7, [r1, #0]
 8003dd6:	608b      	str	r3, [r1, #8]
 8003dd8:	2e00      	cmp	r6, #0
 8003dda:	dd9f      	ble.n	8003d1c <__sflush_r+0x18>
 8003ddc:	4633      	mov	r3, r6
 8003dde:	463a      	mov	r2, r7
 8003de0:	4628      	mov	r0, r5
 8003de2:	6a21      	ldr	r1, [r4, #32]
 8003de4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003de8:	47e0      	blx	ip
 8003dea:	2800      	cmp	r0, #0
 8003dec:	dc06      	bgt.n	8003dfc <__sflush_r+0xf8>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	e790      	b.n	8003d1e <__sflush_r+0x1a>
 8003dfc:	4407      	add	r7, r0
 8003dfe:	1a36      	subs	r6, r6, r0
 8003e00:	e7ea      	b.n	8003dd8 <__sflush_r+0xd4>
 8003e02:	bf00      	nop
 8003e04:	20400001 	.word	0x20400001

08003e08 <_fflush_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	690b      	ldr	r3, [r1, #16]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	b913      	cbnz	r3, 8003e18 <_fflush_r+0x10>
 8003e12:	2500      	movs	r5, #0
 8003e14:	4628      	mov	r0, r5
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	b118      	cbz	r0, 8003e22 <_fflush_r+0x1a>
 8003e1a:	6983      	ldr	r3, [r0, #24]
 8003e1c:	b90b      	cbnz	r3, 8003e22 <_fflush_r+0x1a>
 8003e1e:	f7ff fa19 	bl	8003254 <__sinit>
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <_fflush_r+0x6c>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	d11b      	bne.n	8003e60 <_fflush_r+0x58>
 8003e28:	686c      	ldr	r4, [r5, #4]
 8003e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ef      	beq.n	8003e12 <_fflush_r+0xa>
 8003e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e34:	07d0      	lsls	r0, r2, #31
 8003e36:	d404      	bmi.n	8003e42 <_fflush_r+0x3a>
 8003e38:	0599      	lsls	r1, r3, #22
 8003e3a:	d402      	bmi.n	8003e42 <_fflush_r+0x3a>
 8003e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3e:	f7ff faa7 	bl	8003390 <__retarget_lock_acquire_recursive>
 8003e42:	4628      	mov	r0, r5
 8003e44:	4621      	mov	r1, r4
 8003e46:	f7ff ff5d 	bl	8003d04 <__sflush_r>
 8003e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	07da      	lsls	r2, r3, #31
 8003e50:	d4e0      	bmi.n	8003e14 <_fflush_r+0xc>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	059b      	lsls	r3, r3, #22
 8003e56:	d4dd      	bmi.n	8003e14 <_fflush_r+0xc>
 8003e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e5a:	f7ff fa9a 	bl	8003392 <__retarget_lock_release_recursive>
 8003e5e:	e7d9      	b.n	8003e14 <_fflush_r+0xc>
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <_fflush_r+0x70>)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d101      	bne.n	8003e6a <_fflush_r+0x62>
 8003e66:	68ac      	ldr	r4, [r5, #8]
 8003e68:	e7df      	b.n	8003e2a <_fflush_r+0x22>
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <_fflush_r+0x74>)
 8003e6c:	429c      	cmp	r4, r3
 8003e6e:	bf08      	it	eq
 8003e70:	68ec      	ldreq	r4, [r5, #12]
 8003e72:	e7da      	b.n	8003e2a <_fflush_r+0x22>
 8003e74:	08004124 	.word	0x08004124
 8003e78:	08004144 	.word	0x08004144
 8003e7c:	08004104 	.word	0x08004104

08003e80 <_lseek_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4d05      	ldr	r5, [pc, #20]	; (8003ea0 <_lseek_r+0x20>)
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc fd82 	bl	8000998 <_lseek>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_lseek_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_lseek_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000164 	.word	0x20000164

08003ea4 <__swhatbuf_r>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	460e      	mov	r6, r1
 8003ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eac:	4614      	mov	r4, r2
 8003eae:	2900      	cmp	r1, #0
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	b096      	sub	sp, #88	; 0x58
 8003eb4:	da08      	bge.n	8003ec8 <__swhatbuf_r+0x24>
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	061a      	lsls	r2, r3, #24
 8003ec0:	d410      	bmi.n	8003ee4 <__swhatbuf_r+0x40>
 8003ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ec6:	e00e      	b.n	8003ee6 <__swhatbuf_r+0x42>
 8003ec8:	466a      	mov	r2, sp
 8003eca:	f000 f8c5 	bl	8004058 <_fstat_r>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	dbf1      	blt.n	8003eb6 <__swhatbuf_r+0x12>
 8003ed2:	9a01      	ldr	r2, [sp, #4]
 8003ed4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ed8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003edc:	425a      	negs	r2, r3
 8003ede:	415a      	adcs	r2, r3
 8003ee0:	602a      	str	r2, [r5, #0]
 8003ee2:	e7ee      	b.n	8003ec2 <__swhatbuf_r+0x1e>
 8003ee4:	2340      	movs	r3, #64	; 0x40
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	b016      	add	sp, #88	; 0x58
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ef0 <__smakebuf_r>:
 8003ef0:	898b      	ldrh	r3, [r1, #12]
 8003ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ef4:	079d      	lsls	r5, r3, #30
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	d507      	bpl.n	8003f0c <__smakebuf_r+0x1c>
 8003efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	6123      	str	r3, [r4, #16]
 8003f04:	2301      	movs	r3, #1
 8003f06:	6163      	str	r3, [r4, #20]
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	466a      	mov	r2, sp
 8003f0e:	ab01      	add	r3, sp, #4
 8003f10:	f7ff ffc8 	bl	8003ea4 <__swhatbuf_r>
 8003f14:	9900      	ldr	r1, [sp, #0]
 8003f16:	4605      	mov	r5, r0
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f7ff fa5b 	bl	80033d4 <_malloc_r>
 8003f1e:	b948      	cbnz	r0, 8003f34 <__smakebuf_r+0x44>
 8003f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f24:	059a      	lsls	r2, r3, #22
 8003f26:	d4ef      	bmi.n	8003f08 <__smakebuf_r+0x18>
 8003f28:	f023 0303 	bic.w	r3, r3, #3
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	81a3      	strh	r3, [r4, #12]
 8003f32:	e7e3      	b.n	8003efc <__smakebuf_r+0xc>
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <__smakebuf_r+0x7c>)
 8003f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	6020      	str	r0, [r4, #0]
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	9b00      	ldr	r3, [sp, #0]
 8003f44:	6120      	str	r0, [r4, #16]
 8003f46:	6163      	str	r3, [r4, #20]
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	b15b      	cbz	r3, 8003f64 <__smakebuf_r+0x74>
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f52:	f000 f893 	bl	800407c <_isatty_r>
 8003f56:	b128      	cbz	r0, 8003f64 <__smakebuf_r+0x74>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	89a0      	ldrh	r0, [r4, #12]
 8003f66:	4305      	orrs	r5, r0
 8003f68:	81a5      	strh	r5, [r4, #12]
 8003f6a:	e7cd      	b.n	8003f08 <__smakebuf_r+0x18>
 8003f6c:	080031ed 	.word	0x080031ed

08003f70 <memchr>:
 8003f70:	4603      	mov	r3, r0
 8003f72:	b510      	push	{r4, lr}
 8003f74:	b2c9      	uxtb	r1, r1
 8003f76:	4402      	add	r2, r0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	d101      	bne.n	8003f82 <memchr+0x12>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e003      	b.n	8003f8a <memchr+0x1a>
 8003f82:	7804      	ldrb	r4, [r0, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	428c      	cmp	r4, r1
 8003f88:	d1f6      	bne.n	8003f78 <memchr+0x8>
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <__malloc_lock>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	; (8003f94 <__malloc_lock+0x8>)
 8003f8e:	f7ff b9ff 	b.w	8003390 <__retarget_lock_acquire_recursive>
 8003f92:	bf00      	nop
 8003f94:	20000158 	.word	0x20000158

08003f98 <__malloc_unlock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	; (8003fa0 <__malloc_unlock+0x8>)
 8003f9a:	f7ff b9fa 	b.w	8003392 <__retarget_lock_release_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	20000158 	.word	0x20000158

08003fa4 <_free_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	d040      	beq.n	800402e <_free_r+0x8a>
 8003fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb0:	1f0c      	subs	r4, r1, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bfb8      	it	lt
 8003fb6:	18e4      	addlt	r4, r4, r3
 8003fb8:	f7ff ffe8 	bl	8003f8c <__malloc_lock>
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <_free_r+0x8c>)
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	b933      	cbnz	r3, 8003fd0 <_free_r+0x2c>
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	6014      	str	r4, [r2, #0]
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fcc:	f7ff bfe4 	b.w	8003f98 <__malloc_unlock>
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	d908      	bls.n	8003fe6 <_free_r+0x42>
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	1821      	adds	r1, r4, r0
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	bf01      	itttt	eq
 8003fdc:	6819      	ldreq	r1, [r3, #0]
 8003fde:	685b      	ldreq	r3, [r3, #4]
 8003fe0:	1809      	addeq	r1, r1, r0
 8003fe2:	6021      	streq	r1, [r4, #0]
 8003fe4:	e7ed      	b.n	8003fc2 <_free_r+0x1e>
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b10b      	cbz	r3, 8003ff0 <_free_r+0x4c>
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	d9fa      	bls.n	8003fe6 <_free_r+0x42>
 8003ff0:	6811      	ldr	r1, [r2, #0]
 8003ff2:	1850      	adds	r0, r2, r1
 8003ff4:	42a0      	cmp	r0, r4
 8003ff6:	d10b      	bne.n	8004010 <_free_r+0x6c>
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	4401      	add	r1, r0
 8003ffc:	1850      	adds	r0, r2, r1
 8003ffe:	4283      	cmp	r3, r0
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	d1e0      	bne.n	8003fc6 <_free_r+0x22>
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4401      	add	r1, r0
 800400a:	6011      	str	r1, [r2, #0]
 800400c:	6053      	str	r3, [r2, #4]
 800400e:	e7da      	b.n	8003fc6 <_free_r+0x22>
 8004010:	d902      	bls.n	8004018 <_free_r+0x74>
 8004012:	230c      	movs	r3, #12
 8004014:	602b      	str	r3, [r5, #0]
 8004016:	e7d6      	b.n	8003fc6 <_free_r+0x22>
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	1821      	adds	r1, r4, r0
 800401c:	428b      	cmp	r3, r1
 800401e:	bf01      	itttt	eq
 8004020:	6819      	ldreq	r1, [r3, #0]
 8004022:	685b      	ldreq	r3, [r3, #4]
 8004024:	1809      	addeq	r1, r1, r0
 8004026:	6021      	streq	r1, [r4, #0]
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6054      	str	r4, [r2, #4]
 800402c:	e7cb      	b.n	8003fc6 <_free_r+0x22>
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	2000015c 	.word	0x2000015c

08004034 <_read_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	2200      	movs	r2, #0
 800403e:	4d05      	ldr	r5, [pc, #20]	; (8004054 <_read_r+0x20>)
 8004040:	602a      	str	r2, [r5, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f7fc fc4b 	bl	80008de <_read>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_read_r+0x1e>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_read_r+0x1e>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000164 	.word	0x20000164

08004058 <_fstat_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	2300      	movs	r3, #0
 800405c:	4d06      	ldr	r5, [pc, #24]	; (8004078 <_fstat_r+0x20>)
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	f7fc fc7e 	bl	8000966 <_fstat>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d102      	bne.n	8004074 <_fstat_r+0x1c>
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	b103      	cbz	r3, 8004074 <_fstat_r+0x1c>
 8004072:	6023      	str	r3, [r4, #0]
 8004074:	bd38      	pop	{r3, r4, r5, pc}
 8004076:	bf00      	nop
 8004078:	20000164 	.word	0x20000164

0800407c <_isatty_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	2300      	movs	r3, #0
 8004080:	4d05      	ldr	r5, [pc, #20]	; (8004098 <_isatty_r+0x1c>)
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	f7fc fc7c 	bl	8000984 <_isatty>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_isatty_r+0x1a>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_isatty_r+0x1a>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	20000164 	.word	0x20000164

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
