
Exam05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b12c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b240  0800b240  0001b240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b754  0800b754  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b754  0800b754  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b754  0800b754  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b754  0800b754  0001b754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b758  0800b758  0001b758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b75c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001e0  0800b93c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800b93c  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a08  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298c  00000000  00000000  00031c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000345a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  000358a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f89  00000000  00000000  00036ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014870  00000000  00000000  00050a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956c2  00000000  00000000  000652a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006684  00000000  00000000  000fa9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b224 	.word	0x0800b224

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b224 	.word	0x0800b224

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4605      	mov	r5, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fd9d 	bl	80009bc <__aeabi_dcmplt>
 8000e82:	b928      	cbnz	r0, 8000e90 <__aeabi_d2lz+0x20>
 8000e84:	4628      	mov	r0, r5
 8000e86:	4621      	mov	r1, r4
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f000 b80a 	b.w	8000ea4 <__aeabi_d2ulz>
 8000e90:	4628      	mov	r0, r5
 8000e92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e96:	f000 f805 	bl	8000ea4 <__aeabi_d2ulz>
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2ulz>:
 8000ea4:	b5d0      	push	{r4, r6, r7, lr}
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__aeabi_d2ulz+0x34>)
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460f      	mov	r7, r1
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	f7ff fde9 	bl	8000a88 <__aeabi_d2uiz>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fa94 	bl	80003e4 <__aeabi_ui2d>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <__aeabi_d2ulz+0x38>)
 8000ec0:	f7ff fb0a 	bl	80004d8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4630      	mov	r0, r6
 8000eca:	4639      	mov	r1, r7
 8000ecc:	f7ff f94c 	bl	8000168 <__aeabi_dsub>
 8000ed0:	f7ff fdda 	bl	8000a88 <__aeabi_d2uiz>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	3df00000 	.word	0x3df00000
 8000edc:	41f00000 	.word	0x41f00000

08000ee0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f023 030f 	bic.w	r3, r3, #15
 8000ef0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2304      	movs	r3, #4
 8000f2a:	214e      	movs	r1, #78	; 0x4e
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <lcd_send_cmd+0x5c>)
 8000f2e:	f002 fc6d 	bl	800380c <HAL_I2C_Master_Transmit>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000025c 	.word	0x2000025c

08000f40 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	f043 030d 	orr.w	r3, r3, #13
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f043 0309 	orr.w	r3, r3, #9
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	f043 030d 	orr.w	r3, r3, #13
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	f043 0309 	orr.w	r3, r3, #9
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f80:	f107 0208 	add.w	r2, r7, #8
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2304      	movs	r3, #4
 8000f8a:	214e      	movs	r1, #78	; 0x4e
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <lcd_send_data+0x5c>)
 8000f8e:	f002 fc3d 	bl	800380c <HAL_I2C_Master_Transmit>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000025c 	.word	0x2000025c

08000fa0 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
    switch (row)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <lcd_put_cur+0x18>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <lcd_put_cur+0x22>
 8000fb6:	e009      	b.n	8000fcc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	603b      	str	r3, [r7, #0]
            break;
 8000fc0:	e004      	b.n	8000fcc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fc8:	603b      	str	r3, [r7, #0]
            break;
 8000fca:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff85 	bl	8000ee0 <lcd_send_cmd>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <lcd_init>:


void lcd_init (void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fe2:	2032      	movs	r0, #50	; 0x32
 8000fe4:	f001 fb6e 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fe8:	2030      	movs	r0, #48	; 0x30
 8000fea:	f7ff ff79 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f001 fb68 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ff4:	2030      	movs	r0, #48	; 0x30
 8000ff6:	f7ff ff73 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f001 fb62 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001000:	2030      	movs	r0, #48	; 0x30
 8001002:	f7ff ff6d 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f001 fb5c 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800100c:	2020      	movs	r0, #32
 800100e:	f7ff ff67 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(10);
 8001012:	200a      	movs	r0, #10
 8001014:	f001 fb56 	bl	80026c4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001018:	2028      	movs	r0, #40	; 0x28
 800101a:	f7ff ff61 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 fb50 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001024:	2008      	movs	r0, #8
 8001026:	f7ff ff5b 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f001 fb4a 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ff55 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f001 fb44 	bl	80026c4 <HAL_Delay>
	HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f001 fb41 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001042:	2006      	movs	r0, #6
 8001044:	f7ff ff4c 	bl	8000ee0 <lcd_send_cmd>
	HAL_Delay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f001 fb3b 	bl	80026c4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800104e:	200c      	movs	r0, #12
 8001050:	f7ff ff46 	bl	8000ee0 <lcd_send_cmd>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001060:	e006      	b.n	8001070 <lcd_send_string+0x18>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff68 	bl	8000f40 <lcd_send_data>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f4      	bne.n	8001062 <lcd_send_string+0xa>
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800108c:	1d39      	adds	r1, r7, #4
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	2201      	movs	r2, #1
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <__io_putchar+0x20>)
 8001096:	f005 fafa 	bl	800668e <HAL_UART_Transmit>

	return ch;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200003f0 	.word	0x200003f0

080010a8 <us_delay>:

void us_delay(uint32_t delay) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_COUNTER(&htim2, 0);
	TIM2->CNT = 0;
 80010b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
	//while(__HAL_TIM_GET_COUNTER(&htim2) < delay);
	while (TIM2->CNT < delay)
 80010b8:	bf00      	nop
 80010ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d8f9      	bhi.n	80010ba <us_delay+0x12>
		;
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f002 f86a 	bl	80031d8 <HAL_GPIO_Init>
	//GPIOB->CRL |= ~(1 << 3 | 1 << 1 | 1 << 0);
	//GPIOB->CRL &= 1 << 2;
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 f84d 	bl	80031d8 <HAL_GPIO_Init>
	//GPIOB->CRL &= ~(1 << 2 | 1 << 1 | 1 << 0);
	//GPIOB->CRL |= 1 << 3;
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <DHT11_Start>:

void DHT11_Start(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_9);
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <DHT11_Start+0x44>)
 8001152:	f7ff ffbe 	bl	80010d2 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <DHT11_Start+0x44>)
 800115e:	f002 f9d6 	bl	800350e <HAL_GPIO_WritePin>
	//HAL_Delay(18);
	us_delay(18000);
 8001162:	f244 6050 	movw	r0, #18000	; 0x4650
 8001166:	f7ff ff9f 	bl	80010a8 <us_delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <DHT11_Start+0x44>)
 8001172:	f002 f9cc 	bl	800350e <HAL_GPIO_WritePin>
	us_delay(20);
 8001176:	2014      	movs	r0, #20
 8001178:	f7ff ff96 	bl	80010a8 <us_delay>
	Set_Pin_Input(GPIOA, GPIO_PIN_9);
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <DHT11_Start+0x44>)
 8001182:	f7ff ffc3 	bl	800110c <Set_Pin_Input>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800

08001190 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
	us_delay(40);
 800119a:	2028      	movs	r0, #40	; 0x28
 800119c:	f7ff ff84 	bl	80010a8 <us_delay>
	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))) {
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <DHT11_Check_Response+0x5c>)
 80011a6:	f002 f99b 	bl	80034e0 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10f      	bne.n	80011d0 <DHT11_Check_Response+0x40>
		us_delay(80);
 80011b0:	2050      	movs	r0, #80	; 0x50
 80011b2:	f7ff ff79 	bl	80010a8 <us_delay>
		if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)))
 80011b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <DHT11_Check_Response+0x5c>)
 80011bc:	f002 f990 	bl	80034e0 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <DHT11_Check_Response+0x3c>
			Response = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <DHT11_Check_Response+0x40>
		else
			Response = -1;
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)))
 80011d0:	bf00      	nop
 80011d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <DHT11_Check_Response+0x5c>)
 80011d8:	f002 f982 	bl	80034e0 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f7      	bne.n	80011d2 <DHT11_Check_Response+0x42>
		;

	return Response;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800

080011f0 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t data;
	for (uint8_t i = 0; i < 8; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	71bb      	strb	r3, [r7, #6]
 80011fa:	e028      	b.n	800124e <DHT11_Read+0x5e>
		while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)))
 80011fc:	bf00      	nop
 80011fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <DHT11_Read+0x70>)
 8001204:	f002 f96c 	bl	80034e0 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f7      	beq.n	80011fe <DHT11_Read+0xe>
			;
		us_delay(40);
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f7ff ff4a 	bl	80010a8 <us_delay>
		if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))) {
 8001214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <DHT11_Read+0x70>)
 800121a:	f002 f961 	bl	80034e0 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <DHT11_Read+0x3c>
			data = (data << 1);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	e004      	b.n	8001236 <DHT11_Read+0x46>
		} else
			data = (data << 1) + 1;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)))
 8001236:	bf00      	nop
 8001238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <DHT11_Read+0x70>)
 800123e:	f002 f94f 	bl	80034e0 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f7      	bne.n	8001238 <DHT11_Read+0x48>
	for (uint8_t i = 0; i < 8; i++) {
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	3301      	adds	r3, #1
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	2b07      	cmp	r3, #7
 8001252:	d9d3      	bls.n	80011fc <DHT11_Read+0xc>
			;
	}
	return data;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010800 	.word	0x40010800

08001264 <set_Date_Time>:

void set_Date_Time() {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	Date.WeekDay = 1;  // 1~7
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <set_Date_Time+0x58>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
	Date.Month = 5;  // 1~12
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <set_Date_Time+0x58>)
 8001270:	2205      	movs	r2, #5
 8001272:	705a      	strb	r2, [r3, #1]
	Date.Date = 2;  // 1~31
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <set_Date_Time+0x58>)
 8001276:	2202      	movs	r2, #2
 8001278:	709a      	strb	r2, [r3, #2]
	Date.Year = 22;  // 0~99
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <set_Date_Time+0x58>)
 800127c:	2216      	movs	r2, #22
 800127e:	70da      	strb	r2, [r3, #3]
	while (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8001280:	bf00      	nop
 8001282:	2200      	movs	r2, #0
 8001284:	490d      	ldr	r1, [pc, #52]	; (80012bc <set_Date_Time+0x58>)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <set_Date_Time+0x5c>)
 8001288:	f003 fd68 	bl	8004d5c <HAL_RTC_SetDate>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f7      	bne.n	8001282 <set_Date_Time+0x1e>
		;
	Time.Hours = 16;  // 0~23
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <set_Date_Time+0x60>)
 8001294:	2210      	movs	r2, #16
 8001296:	701a      	strb	r2, [r3, #0]
	Time.Minutes = 10;  // 0~59
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <set_Date_Time+0x60>)
 800129a:	220a      	movs	r2, #10
 800129c:	705a      	strb	r2, [r3, #1]
	Time.Seconds = 00;   // 0~59
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <set_Date_Time+0x60>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	709a      	strb	r2, [r3, #2]
	while (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80012a4:	bf00      	nop
 80012a6:	2200      	movs	r2, #0
 80012a8:	4906      	ldr	r1, [pc, #24]	; (80012c4 <set_Date_Time+0x60>)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <set_Date_Time+0x5c>)
 80012ac:	f003 fbe6 	bl	8004a7c <HAL_RTC_SetTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f7      	bne.n	80012a6 <set_Date_Time+0x42>
		;
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000047c 	.word	0x2000047c
 80012c0:	20000304 	.word	0x20000304
 80012c4:	20000478 	.word	0x20000478

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f001 f997 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f9d3 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 fcc7 	bl	8001c68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012da:	f000 fc9b 	bl	8001c14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012de:	f000 fa2d 	bl	800173c <MX_ADC1_Init>
  MX_TIM3_Init();
 80012e2:	f000 fb97 	bl	8001a14 <MX_TIM3_Init>
  MX_TIM2_Init();
 80012e6:	f000 fb49 	bl	800197c <MX_TIM2_Init>
  MX_TIM4_Init();
 80012ea:	f000 fc1f 	bl	8001b2c <MX_TIM4_Init>
  MX_I2C1_Init();
 80012ee:	f000 facd 	bl	800188c <MX_I2C1_Init>
  MX_RTC_Init();
 80012f2:	f000 fb27 	bl	8001944 <MX_RTC_Init>
  MX_I2C2_Init();
 80012f6:	f000 faf7 	bl	80018e8 <MX_I2C2_Init>
  MX_ADC2_Init();
 80012fa:	f000 fa89 	bl	8001810 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4899      	ldr	r0, [pc, #612]	; (8001568 <main+0x2a0>)
 8001302:	f004 fabb 	bl	800587c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001306:	2104      	movs	r1, #4
 8001308:	4897      	ldr	r0, [pc, #604]	; (8001568 <main+0x2a0>)
 800130a:	f004 fab7 	bl	800587c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800130e:	2108      	movs	r1, #8
 8001310:	4895      	ldr	r0, [pc, #596]	; (8001568 <main+0x2a0>)
 8001312:	f004 fab3 	bl	800587c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 8001316:	4895      	ldr	r0, [pc, #596]	; (800156c <main+0x2a4>)
 8001318:	f004 f964 	bl	80055e4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800131c:	4894      	ldr	r0, [pc, #592]	; (8001570 <main+0x2a8>)
 800131e:	f004 f9ab 	bl	8005678 <HAL_TIM_Base_Start_IT>
	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
	set_Date_Time();
 8001322:	f7ff ff9f 	bl	8001264 <set_Date_Time>

	lcd_init();
 8001326:	f7ff fe5a 	bl	8000fde <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_ADC_Start(&hadc1);
 800132a:	4892      	ldr	r0, [pc, #584]	; (8001574 <main+0x2ac>)
 800132c:	f001 fac6 	bl	80028bc <HAL_ADC_Start>
		us_delay(10000);
 8001330:	f242 7010 	movw	r0, #10000	; 0x2710
 8001334:	f7ff feb8 	bl	80010a8 <us_delay>

		for (int i = 0; i < 4; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e012      	b.n	8001364 <main+0x9c>

			HAL_ADC_PollForConversion(&hadc1, 10);
 800133e:	210a      	movs	r1, #10
 8001340:	488c      	ldr	r0, [pc, #560]	; (8001574 <main+0x2ac>)
 8001342:	f001 fb95 	bl	8002a70 <HAL_ADC_PollForConversion>
			joy_value[i] = HAL_ADC_GetValue(&hadc1);
 8001346:	488b      	ldr	r0, [pc, #556]	; (8001574 <main+0x2ac>)
 8001348:	f001 fc98 	bl	8002c7c <HAL_ADC_GetValue>
 800134c:	4602      	mov	r2, r0
 800134e:	498a      	ldr	r1, [pc, #552]	; (8001578 <main+0x2b0>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			us_delay(5000);
 8001356:	f241 3088 	movw	r0, #5000	; 0x1388
 800135a:	f7ff fea5 	bl	80010a8 <us_delay>
		for (int i = 0; i < 4; i++) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b03      	cmp	r3, #3
 8001368:	dde9      	ble.n	800133e <main+0x76>
		}

		HAL_ADC_Stop(&hadc1);
 800136a:	4882      	ldr	r0, [pc, #520]	; (8001574 <main+0x2ac>)
 800136c:	f001 fb54 	bl	8002a18 <HAL_ADC_Stop>

		uint32_t joy1x_value = joy_value[3];
 8001370:	4b81      	ldr	r3, [pc, #516]	; (8001578 <main+0x2b0>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	613b      	str	r3, [r7, #16]
		uint32_t joy1y_value = joy_value[0];
 8001376:	4b80      	ldr	r3, [pc, #512]	; (8001578 <main+0x2b0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
		uint32_t joy2x_value = joy_value[2];
 800137c:	4b7e      	ldr	r3, [pc, #504]	; (8001578 <main+0x2b0>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	60bb      	str	r3, [r7, #8]
		uint32_t joy2y_value = joy_value[1];
 8001382:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <main+0x2b0>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	607b      	str	r3, [r7, #4]
		/*printf(
		 "1X : %ld, 1Y : %ld 2X : %ld, 2Y : %ld sv1 : %ld sv2 : %ld sv3 : %ld  \r\n",
		 joy1x_value, joy1y_value, joy2x_value, joy2y_value, sv_value1,
		 sv_value2, sv_value3);*/

		us_delay(10000);
 8001388:	f242 7010 	movw	r0, #10000	; 0x2710
 800138c:	f7ff fe8c 	bl	80010a8 <us_delay>

		HAL_ADC_Start(&hadc2);
 8001390:	487a      	ldr	r0, [pc, #488]	; (800157c <main+0x2b4>)
 8001392:	f001 fa93 	bl	80028bc <HAL_ADC_Start>
		water = HAL_ADC_GetValue(&hadc2);
 8001396:	4879      	ldr	r0, [pc, #484]	; (800157c <main+0x2b4>)
 8001398:	f001 fc70 	bl	8002c7c <HAL_ADC_GetValue>
 800139c:	4603      	mov	r3, r0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc98 	bl	8000cd4 <__aeabi_ui2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a76      	ldr	r2, [pc, #472]	; (8001580 <main+0x2b8>)
 80013a8:	6013      	str	r3, [r2, #0]

		if (water > 3000) {
 80013aa:	4b75      	ldr	r3, [pc, #468]	; (8001580 <main+0x2b8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4975      	ldr	r1, [pc, #468]	; (8001584 <main+0x2bc>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fd53 	bl	8000e5c <__aeabi_fcmpgt>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <main+0x102>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	4871      	ldr	r0, [pc, #452]	; (8001588 <main+0x2c0>)
 80013c4:	f002 f8a3 	bl	800350e <HAL_GPIO_WritePin>
 80013c8:	e015      	b.n	80013f6 <main+0x12e>
		} else if (water < 3000) {
 80013ca:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <main+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	496d      	ldr	r1, [pc, #436]	; (8001584 <main+0x2bc>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd25 	bl	8000e20 <__aeabi_fcmplt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <main+0x122>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e2:	4869      	ldr	r0, [pc, #420]	; (8001588 <main+0x2c0>)
 80013e4:	f002 f893 	bl	800350e <HAL_GPIO_WritePin>
 80013e8:	e005      	b.n	80013f6 <main+0x12e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f0:	4865      	ldr	r0, [pc, #404]	; (8001588 <main+0x2c0>)
 80013f2:	f002 f88c 	bl	800350e <HAL_GPIO_WritePin>
		}

		if (16 < sv_value1 && 41 > sv_value1) {
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <main+0x2c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d927      	bls.n	800144e <main+0x186>
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <main+0x2c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b28      	cmp	r3, #40	; 0x28
 8001404:	d823      	bhi.n	800144e <main+0x186>
			if (joy1y_value < 300) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800140c:	d20d      	bcs.n	800142a <main+0x162>
				sv_value1++;
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <main+0x2c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a5d      	ldr	r2, [pc, #372]	; (800158c <main+0x2c4>)
 8001416:	6013      	str	r3, [r2, #0]
				//HAL_Delay(10);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, sv_value1 * 50);
 8001418:	4b5c      	ldr	r3, [pc, #368]	; (800158c <main+0x2c4>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b52      	ldr	r3, [pc, #328]	; (8001568 <main+0x2a0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2132      	movs	r1, #50	; 0x32
 8001422:	fb01 f202 	mul.w	r2, r1, r2
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
			if (joy1y_value < 300) {
 8001428:	e025      	b.n	8001476 <main+0x1ae>

			} else if (joy1y_value > 4000) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001430:	d921      	bls.n	8001476 <main+0x1ae>
				sv_value1--;
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <main+0x2c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3b01      	subs	r3, #1
 8001438:	4a54      	ldr	r2, [pc, #336]	; (800158c <main+0x2c4>)
 800143a:	6013      	str	r3, [r2, #0]
				//HAL_Delay(10);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, sv_value1 * 50);
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <main+0x2c4>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b49      	ldr	r3, [pc, #292]	; (8001568 <main+0x2a0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2132      	movs	r1, #50	; 0x32
 8001446:	fb01 f202 	mul.w	r2, r1, r2
 800144a:	635a      	str	r2, [r3, #52]	; 0x34
			if (joy1y_value < 300) {
 800144c:	e013      	b.n	8001476 <main+0x1ae>
			}
		} else if (16 >= sv_value1)
 800144e:	4b4f      	ldr	r3, [pc, #316]	; (800158c <main+0x2c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b10      	cmp	r3, #16
 8001454:	d805      	bhi.n	8001462 <main+0x19a>
			sv_value1++;
 8001456:	4b4d      	ldr	r3, [pc, #308]	; (800158c <main+0x2c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a4b      	ldr	r2, [pc, #300]	; (800158c <main+0x2c4>)
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e00a      	b.n	8001478 <main+0x1b0>
		else if (41 <= sv_value1)
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <main+0x2c4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b28      	cmp	r3, #40	; 0x28
 8001468:	d906      	bls.n	8001478 <main+0x1b0>
			sv_value1--;
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <main+0x2c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3b01      	subs	r3, #1
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <main+0x2c4>)
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e000      	b.n	8001478 <main+0x1b0>
			if (joy1y_value < 300) {
 8001476:	bf00      	nop

		if (17 < sv_value2 && 46 > sv_value2) {
 8001478:	4b45      	ldr	r3, [pc, #276]	; (8001590 <main+0x2c8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b11      	cmp	r3, #17
 800147e:	d927      	bls.n	80014d0 <main+0x208>
 8001480:	4b43      	ldr	r3, [pc, #268]	; (8001590 <main+0x2c8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b2d      	cmp	r3, #45	; 0x2d
 8001486:	d823      	bhi.n	80014d0 <main+0x208>
			if (joy1x_value < 300) {
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800148e:	d20d      	bcs.n	80014ac <main+0x1e4>
				sv_value2++;
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <main+0x2c8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <main+0x2c8>)
 8001498:	6013      	str	r3, [r2, #0]
				//HAL_Delay(10);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, sv_value2 * 50);
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <main+0x2c8>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <main+0x2a0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2132      	movs	r1, #50	; 0x32
 80014a4:	fb01 f202 	mul.w	r2, r1, r2
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
			if (joy1x_value < 300) {
 80014aa:	e025      	b.n	80014f8 <main+0x230>

			} else if (joy1x_value > 4000) {
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014b2:	d921      	bls.n	80014f8 <main+0x230>
				sv_value2--;
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <main+0x2c8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4a35      	ldr	r2, [pc, #212]	; (8001590 <main+0x2c8>)
 80014bc:	6013      	str	r3, [r2, #0]
				//HAL_Delay(10);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, sv_value2 * 50);
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <main+0x2c8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <main+0x2a0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2132      	movs	r1, #50	; 0x32
 80014c8:	fb01 f202 	mul.w	r2, r1, r2
 80014cc:	639a      	str	r2, [r3, #56]	; 0x38
			if (joy1x_value < 300) {
 80014ce:	e013      	b.n	80014f8 <main+0x230>
			}
		} else if (17 >= sv_value2)
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <main+0x2c8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b11      	cmp	r3, #17
 80014d6:	d805      	bhi.n	80014e4 <main+0x21c>
			sv_value2++;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <main+0x2c8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <main+0x2c8>)
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00a      	b.n	80014fa <main+0x232>
		else if (46 <= sv_value2)
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <main+0x2c8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b2d      	cmp	r3, #45	; 0x2d
 80014ea:	d906      	bls.n	80014fa <main+0x232>
			sv_value2--;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <main+0x2c8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <main+0x2c8>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e000      	b.n	80014fa <main+0x232>
			if (joy1x_value < 300) {
 80014f8:	bf00      	nop

		if (14 < sv_value3 && 54 > sv_value3) {
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <main+0x2cc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b0e      	cmp	r3, #14
 8001500:	d927      	bls.n	8001552 <main+0x28a>
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <main+0x2cc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b35      	cmp	r3, #53	; 0x35
 8001508:	d823      	bhi.n	8001552 <main+0x28a>
			if (joy2x_value < 300) {
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001510:	d20d      	bcs.n	800152e <main+0x266>
				sv_value3++;
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <main+0x2cc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <main+0x2cc>)
 800151a:	6013      	str	r3, [r2, #0]
				//HAL_Delay(10);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sv_value3 * 50);
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <main+0x2cc>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <main+0x2a0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2132      	movs	r1, #50	; 0x32
 8001526:	fb01 f202 	mul.w	r2, r1, r2
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
			if (joy2x_value < 300) {
 800152c:	e03e      	b.n	80015ac <main+0x2e4>

			} else if (joy2x_value > 4000) {
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001534:	d93a      	bls.n	80015ac <main+0x2e4>
				sv_value3--;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <main+0x2cc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	4a15      	ldr	r2, [pc, #84]	; (8001594 <main+0x2cc>)
 800153e:	6013      	str	r3, [r2, #0]
				//HAL_Delay(10);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, sv_value3 * 50);
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <main+0x2cc>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <main+0x2a0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2132      	movs	r1, #50	; 0x32
 800154a:	fb01 f202 	mul.w	r2, r1, r2
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
			if (joy2x_value < 300) {
 8001550:	e02c      	b.n	80015ac <main+0x2e4>
			}
		} else if (14 >= sv_value3)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <main+0x2cc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b0e      	cmp	r3, #14
 8001558:	d81e      	bhi.n	8001598 <main+0x2d0>
			sv_value3++;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <main+0x2cc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <main+0x2cc>)
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e023      	b.n	80015ae <main+0x2e6>
 8001566:	bf00      	nop
 8001568:	20000360 	.word	0x20000360
 800156c:	20000318 	.word	0x20000318
 8001570:	200003a8 	.word	0x200003a8
 8001574:	200001fc 	.word	0x200001fc
 8001578:	20000434 	.word	0x20000434
 800157c:	2000022c 	.word	0x2000022c
 8001580:	20000490 	.word	0x20000490
 8001584:	453b8000 	.word	0x453b8000
 8001588:	40010c00 	.word	0x40010c00
 800158c:	20000444 	.word	0x20000444
 8001590:	20000448 	.word	0x20000448
 8001594:	2000044c 	.word	0x2000044c
		else if (54 <= sv_value3)
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <main+0x3a8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b35      	cmp	r3, #53	; 0x35
 800159e:	d906      	bls.n	80015ae <main+0x2e6>
			sv_value3--;
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <main+0x3a8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a32      	ldr	r2, [pc, #200]	; (8001670 <main+0x3a8>)
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e000      	b.n	80015ae <main+0x2e6>
			if (joy2x_value < 300) {
 80015ac:	bf00      	nop

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0) {
 80015ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b2:	4830      	ldr	r0, [pc, #192]	; (8001674 <main+0x3ac>)
 80015b4:	f001 ff94 	bl	80034e0 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <main+0x30c>
			HAL_GPIO_WritePin(GPIOC, MTL_1_Pin, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	2101      	movs	r1, #1
 80015c2:	482d      	ldr	r0, [pc, #180]	; (8001678 <main+0x3b0>)
 80015c4:	f001 ffa3 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_1_Pin, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2110      	movs	r1, #16
 80015cc:	482a      	ldr	r0, [pc, #168]	; (8001678 <main+0x3b0>)
 80015ce:	f001 ff9e 	bl	800350e <HAL_GPIO_WritePin>
 80015d2:	e6aa      	b.n	800132a <main+0x62>
		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0) {
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	4826      	ldr	r0, [pc, #152]	; (8001674 <main+0x3ac>)
 80015da:	f001 ff81 	bl	80034e0 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <main+0x332>
			HAL_GPIO_WritePin(GPIOC, MTL_2_Pin, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2102      	movs	r1, #2
 80015e8:	4823      	ldr	r0, [pc, #140]	; (8001678 <main+0x3b0>)
 80015ea:	f001 ff90 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_2_Pin, 1);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2120      	movs	r1, #32
 80015f2:	4821      	ldr	r0, [pc, #132]	; (8001678 <main+0x3b0>)
 80015f4:	f001 ff8b 	bl	800350e <HAL_GPIO_WritePin>
 80015f8:	e697      	b.n	800132a <main+0x62>
		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0) {
 80015fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fe:	481d      	ldr	r0, [pc, #116]	; (8001674 <main+0x3ac>)
 8001600:	f001 ff6e 	bl	80034e0 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10a      	bne.n	8001620 <main+0x358>
			HAL_GPIO_WritePin(GPIOC, MTL_2_Pin, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	2102      	movs	r1, #2
 800160e:	481a      	ldr	r0, [pc, #104]	; (8001678 <main+0x3b0>)
 8001610:	f001 ff7d 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_1_Pin, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	2110      	movs	r1, #16
 8001618:	4817      	ldr	r0, [pc, #92]	; (8001678 <main+0x3b0>)
 800161a:	f001 ff78 	bl	800350e <HAL_GPIO_WritePin>
 800161e:	e684      	b.n	800132a <main+0x62>
		} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0) {
 8001620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <main+0x3ac>)
 8001626:	f001 ff5b 	bl	80034e0 <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <main+0x37e>
			HAL_GPIO_WritePin(GPIOC, MTL_1_Pin, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	2101      	movs	r1, #1
 8001634:	4810      	ldr	r0, [pc, #64]	; (8001678 <main+0x3b0>)
 8001636:	f001 ff6a 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_2_Pin, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	2120      	movs	r1, #32
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <main+0x3b0>)
 8001640:	f001 ff65 	bl	800350e <HAL_GPIO_WritePin>
 8001644:	e671      	b.n	800132a <main+0x62>
		} else {
			HAL_GPIO_WritePin(GPIOC, MTL_1_Pin, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2101      	movs	r1, #1
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <main+0x3b0>)
 800164c:	f001 ff5f 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_1_Pin, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2110      	movs	r1, #16
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <main+0x3b0>)
 8001656:	f001 ff5a 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTL_2_Pin, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2102      	movs	r1, #2
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <main+0x3b0>)
 8001660:	f001 ff55 	bl	800350e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, MTR_2_Pin, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2120      	movs	r1, #32
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <main+0x3b0>)
 800166a:	f001 ff50 	bl	800350e <HAL_GPIO_WritePin>
	while (1) {
 800166e:	e65c      	b.n	800132a <main+0x62>
 8001670:	2000044c 	.word	0x2000044c
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	2228      	movs	r2, #40	; 0x28
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f005 f994 	bl	80069b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016ac:	2305      	movs	r3, #5
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016ba:	2301      	movs	r3, #1
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016be:	2301      	movs	r3, #1
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80016cc:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80016d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fbaa 	bl	8003e30 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80016e2:	f000 fc53 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fe16 	bl	8004334 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800170e:	f000 fc3d 	bl	8001f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001712:	2303      	movs	r3, #3
 8001714:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800171c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001720:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4618      	mov	r0, r3
 8001726:	f002 ff9d 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001730:	f000 fc2c 	bl	8001f8c <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3750      	adds	r7, #80	; 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MX_ADC1_Init+0xcc>)
 800174e:	4a2f      	ldr	r2, [pc, #188]	; (800180c <MX_ADC1_Init+0xd0>)
 8001750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_ADC1_Init+0xcc>)
 8001754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_ADC1_Init+0xcc>)
 800175c:	2201      	movs	r2, #1
 800175e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <MX_ADC1_Init+0xcc>)
 8001762:	2200      	movs	r2, #0
 8001764:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_ADC1_Init+0xcc>)
 8001768:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800176c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_ADC1_Init+0xcc>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_ADC1_Init+0xcc>)
 8001776:	2204      	movs	r2, #4
 8001778:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800177a:	4823      	ldr	r0, [pc, #140]	; (8001808 <MX_ADC1_Init+0xcc>)
 800177c:	f000 ffc6 	bl	800270c <HAL_ADC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001786:	f000 fc01 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800178a:	2306      	movs	r3, #6
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178e:	2301      	movs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001792:	2307      	movs	r3, #7
 8001794:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <MX_ADC1_Init+0xcc>)
 800179c:	f001 fa7a 	bl	8002c94 <HAL_ADC_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fbf1 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017aa:	2307      	movs	r3, #7
 80017ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ae:	2302      	movs	r3, #2
 80017b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4814      	ldr	r0, [pc, #80]	; (8001808 <MX_ADC1_Init+0xcc>)
 80017b8:	f001 fa6c 	bl	8002c94 <HAL_ADC_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80017c2:	f000 fbe3 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017ca:	2303      	movs	r3, #3
 80017cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_ADC1_Init+0xcc>)
 80017d4:	f001 fa5e 	bl	8002c94 <HAL_ADC_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017de:	f000 fbd5 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017e6:	2304      	movs	r3, #4
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <MX_ADC1_Init+0xcc>)
 80017f0:	f001 fa50 	bl	8002c94 <HAL_ADC_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80017fa:	f000 fbc7 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001fc 	.word	0x200001fc
 800180c:	40012400 	.word	0x40012400

08001810 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_ADC2_Init+0x74>)
 8001822:	4a19      	ldr	r2, [pc, #100]	; (8001888 <MX_ADC2_Init+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_ADC2_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_ADC2_Init+0x74>)
 800182e:	2201      	movs	r2, #1
 8001830:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_ADC2_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_ADC2_Init+0x74>)
 800183a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800183e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_ADC2_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_ADC2_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_ADC2_Init+0x74>)
 800184e:	f000 ff5d 	bl	800270c <HAL_ADC_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001858:	f000 fb98 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800185c:	2308      	movs	r3, #8
 800185e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001860:	2301      	movs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001864:	2307      	movs	r3, #7
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_ADC2_Init+0x74>)
 800186e:	f001 fa11 	bl	8002c94 <HAL_ADC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001878:	f000 fb88 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000022c 	.word	0x2000022c
 8001888:	40012800 	.word	0x40012800

0800188c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C1_Init+0x50>)
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_I2C1_Init+0x54>)
 8001894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_I2C1_Init+0x50>)
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_I2C1_Init+0x58>)
 800189a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_I2C1_Init+0x50>)
 80018aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_I2C1_Init+0x50>)
 80018ca:	f001 fe5b 	bl	8003584 <HAL_I2C_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f000 fb5a 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000025c 	.word	0x2000025c
 80018e0:	40005400 	.word	0x40005400
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_I2C2_Init+0x50>)
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <MX_I2C2_Init+0x54>)
 80018f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_I2C2_Init+0x50>)
 80018f4:	4a12      	ldr	r2, [pc, #72]	; (8001940 <MX_I2C2_Init+0x58>)
 80018f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_I2C2_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_I2C2_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_I2C2_Init+0x50>)
 8001906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_I2C2_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_I2C2_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_I2C2_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_I2C2_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_I2C2_Init+0x50>)
 8001926:	f001 fe2d 	bl	8003584 <HAL_I2C_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001930:	f000 fb2c 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200002b0 	.word	0x200002b0
 800193c:	40005800 	.word	0x40005800
 8001940:	000186a0 	.word	0x000186a0

08001944 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_RTC_Init+0x30>)
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <MX_RTC_Init+0x34>)
 800194c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_RTC_Init+0x30>)
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_RTC_Init+0x30>)
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_RTC_Init+0x30>)
 8001960:	f002 fff6 	bl	8004950 <HAL_RTC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800196a:	f000 fb0f 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000304 	.word	0x20000304
 8001978:	40002800 	.word	0x40002800

0800197c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_TIM2_Init+0x94>)
 800199a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019a2:	223f      	movs	r2, #63	; 0x3f
 80019a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019c2:	f003 fdc0 	bl	8005546 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019cc:	f000 fade 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019de:	f004 fa0d 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019e8:	f000 fad0 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_TIM2_Init+0x94>)
 80019fa:	f004 fd8b 	bl	8006514 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a04:	f000 fac2 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000318 	.word	0x20000318

08001a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a46:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <MX_TIM3_Init+0x114>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001a4a:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001a56:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a58:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6a:	482e      	ldr	r0, [pc, #184]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a6c:	f003 fd6b 	bl	8005546 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a76:	f000 fa89 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4827      	ldr	r0, [pc, #156]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a88:	f004 f9b8 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a92:	f000 fa7b 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a96:	4823      	ldr	r0, [pc, #140]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a98:	f003 fe98 	bl	80057cc <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aa2:	f000 fa73 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481b      	ldr	r0, [pc, #108]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001ab6:	f004 fd2d 	bl	8006514 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ac0:	f000 fa64 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4812      	ldr	r0, [pc, #72]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001adc:	f004 f8d0 	bl	8005c80 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ae6:	f000 fa51 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2204      	movs	r2, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001af2:	f004 f8c5 	bl	8005c80 <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001afc:	f000 fa46 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2208      	movs	r2, #8
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001b08:	f004 f8ba 	bl	8005c80 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b12:	f000 fa3b 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001b18:	f000 fbbc 	bl	8002294 <HAL_TIM_MspPostInit>

}
 8001b1c:	bf00      	nop
 8001b1e:	3738      	adds	r7, #56	; 0x38
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000360 	.word	0x20000360
 8001b28:	40000400 	.word	0x40000400

08001b2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <MX_TIM4_Init+0xe4>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400-1;
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b64:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001b68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b72:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b84:	4821      	ldr	r0, [pc, #132]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b86:	f003 fcde 	bl	8005546 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001b90:	f000 f9fc 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	481a      	ldr	r0, [pc, #104]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001ba2:	f004 f92b 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001bac:	f000 f9ee 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001bb2:	f003 fdb3 	bl	800571c <HAL_TIM_OC_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001bbc:	f000 f9e6 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480f      	ldr	r0, [pc, #60]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001bd0:	f004 fca0 	bl	8006514 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001bda:	f000 f9d7 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001bf6:	f003 ffeb 	bl	8005bd0 <HAL_TIM_OC_ConfigChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c00:	f000 f9c4 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	3738      	adds	r7, #56	; 0x38
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200003a8 	.word	0x200003a8
 8001c10:	40000800 	.word	0x40000800

08001c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_USART2_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c4c:	f004 fcd2 	bl	80065f4 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c56:	f000 f999 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003f0 	.word	0x200003f0
 8001c64:	40004400 	.word	0x40004400

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <MX_GPIO_Init+0x154>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MTL_1_Pin|MTL_2_Pin|MTR_1_Pin|MTR_2_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2133      	movs	r1, #51	; 0x33
 8001ce0:	4837      	ldr	r0, [pc, #220]	; (8001dc0 <MX_GPIO_Init+0x158>)
 8001ce2:	f001 fc14 	bl	800350e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001cec:	4835      	ldr	r0, [pc, #212]	; (8001dc4 <MX_GPIO_Init+0x15c>)
 8001cee:	f001 fc0e 	bl	800350e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf8:	4833      	ldr	r0, [pc, #204]	; (8001dc8 <MX_GPIO_Init+0x160>)
 8001cfa:	f001 fc08 	bl	800350e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d04:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <MX_GPIO_Init+0x164>)
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	482b      	ldr	r0, [pc, #172]	; (8001dc0 <MX_GPIO_Init+0x158>)
 8001d14:	f001 fa60 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MTL_1_Pin MTL_2_Pin MTR_1_Pin MTR_2_Pin */
  GPIO_InitStruct.Pin = MTL_1_Pin|MTL_2_Pin|MTR_1_Pin|MTR_2_Pin;
 8001d18:	2333      	movs	r3, #51	; 0x33
 8001d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4824      	ldr	r0, [pc, #144]	; (8001dc0 <MX_GPIO_Init+0x158>)
 8001d30:	f001 fa52 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW5_Pin */
  GPIO_InitStruct.Pin = SW5_Pin;
 8001d34:	2320      	movs	r3, #32
 8001d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW5_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <MX_GPIO_Init+0x160>)
 8001d48:	f001 fa46 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8;
 8001d4c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <MX_GPIO_Init+0x15c>)
 8001d66:	f001 fa37 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d6a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <MX_GPIO_Init+0x15c>)
 8001d80:	f001 fa2a 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <MX_GPIO_Init+0x160>)
 8001d9e:	f001 fa1b 	bl	80031d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2028      	movs	r0, #40	; 0x28
 8001da8:	f001 f9df 	bl	800316a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dac:	2028      	movs	r0, #40	; 0x28
 8001dae:	f001 f9f8 	bl	80031a2 <HAL_NVIC_EnableIRQ>

}
 8001db2:	bf00      	nop
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40011000 	.word	0x40011000
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	10110000 	.word	0x10110000

08001dd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]

	DHT11_Start();
 8001dd8:	f7ff f9b6 	bl	8001148 <DHT11_Start>
	DHT11_Check_Response();
 8001ddc:	f7ff f9d8 	bl	8001190 <DHT11_Check_Response>

	RH_integral = DHT11_Read();
 8001de0:	f7ff fa06 	bl	80011f0 <DHT11_Read>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001dea:	701a      	strb	r2, [r3, #0]
	RH_decimal = DHT11_Read();
 8001dec:	f7ff fa00 	bl	80011f0 <DHT11_Read>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001df6:	701a      	strb	r2, [r3, #0]
	T_inregral = DHT11_Read();
 8001df8:	f7ff f9fa 	bl	80011f0 <DHT11_Read>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001e02:	701a      	strb	r2, [r3, #0]
	T_decimal = DHT11_Read();
 8001e04:	f7ff f9f4 	bl	80011f0 <DHT11_Read>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001e0e:	701a      	strb	r2, [r3, #0]
	CheckSUM = DHT11_Read();
 8001e10:	f7ff f9ee 	bl	80011f0 <DHT11_Read>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001e1a:	701a      	strb	r2, [r3, #0]
	 printf("Humidity    : %d.%d %%\n", RH_integral, RH_decimal);
	 } else {
	 printf("DHT11 Error\n");
	 }*/

	sprintf(chr_RH_integral, "%d", RH_integral);
 8001e1c:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	494b      	ldr	r1, [pc, #300]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001e24:	484b      	ldr	r0, [pc, #300]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001e26:	f005 fc41 	bl	80076ac <siprintf>
	sprintf(chr_RH_decimal, "%d", RH_decimal);
 8001e2a:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4947      	ldr	r1, [pc, #284]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001e32:	4849      	ldr	r0, [pc, #292]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e34:	f005 fc3a 	bl	80076ac <siprintf>
	sprintf(chr_T_inregral, "%d", T_inregral);
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4944      	ldr	r1, [pc, #272]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001e40:	4846      	ldr	r0, [pc, #280]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001e42:	f005 fc33 	bl	80076ac <siprintf>
	sprintf(chr_T_decimal, "%d", T_decimal);
 8001e46:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4940      	ldr	r1, [pc, #256]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001e4e:	4844      	ldr	r0, [pc, #272]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001e50:	f005 fc2c 	bl	80076ac <siprintf>

	/*if (__HAL_RTC_SECOND_GET_FLAG(&hrtc, RTC_FLAG_SEC) == SET) {
		__HAL_RTC_SECOND_CLEAR_FLAG(&hrtc, RTC_FLAG_SEC); //RTC->CRL &= ~0x01;  // Second flag clear*/
		while (HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK);
 8001e54:	bf00      	nop
 8001e56:	2200      	movs	r2, #0
 8001e58:	4942      	ldr	r1, [pc, #264]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e5a:	4843      	ldr	r0, [pc, #268]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e5c:	f002 fea6 	bl	8004bac <HAL_RTC_GetTime>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f7      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x86>
		while (HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK);
 8001e66:	bf00      	nop
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4940      	ldr	r1, [pc, #256]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e6c:	483e      	ldr	r0, [pc, #248]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001e6e:	f003 f82b 	bl	8004ec8 <HAL_RTC_GetDate>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f7      	bne.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x98>
		//printf("%02d/%02d ", Date.Month, Date.Date);
		//printf("%02d:%02d:%02d \r\n", Time.Hours, Time.Minutes, Time.Seconds);
	//}

	sprintf(dateBuffer, "%02d-%02d", Date.Month, Date.Date);
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	493b      	ldr	r1, [pc, #236]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e84:	483b      	ldr	r0, [pc, #236]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001e86:	f005 fc11 	bl	80076ac <siprintf>
	sprintf(timeBuffer, "%02d:%02d:%02d", Time.Hours, Time.Minutes,	Time.Seconds);
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e92:	785b      	ldrb	r3, [r3, #1]
 8001e94:	4619      	mov	r1, r3
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e98:	789b      	ldrb	r3, [r3, #2]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4936      	ldr	r1, [pc, #216]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ea0:	4836      	ldr	r0, [pc, #216]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ea2:	f005 fc03 	bl	80076ac <siprintf>

	lcd_put_cur(0, 1);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff f879 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(dateBuffer);
 8001eae:	4831      	ldr	r0, [pc, #196]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001eb0:	f7ff f8d2 	bl	8001058 <lcd_send_string>

	lcd_put_cur(0, 7);
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff f872 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(timeBuffer);
 8001ebc:	482f      	ldr	r0, [pc, #188]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ebe:	f7ff f8cb 	bl	8001058 <lcd_send_string>

	lcd_put_cur(1, 0);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f86b 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string("Tem:");
 8001eca:	482d      	ldr	r0, [pc, #180]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ecc:	f7ff f8c4 	bl	8001058 <lcd_send_string>
	lcd_put_cur(1, 4);
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff f864 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(chr_T_inregral);
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001eda:	f7ff f8bd 	bl	8001058 <lcd_send_string>
	lcd_put_cur(1, 6);
 8001ede:	2106      	movs	r1, #6
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff f85d 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(".");
 8001ee6:	4827      	ldr	r0, [pc, #156]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ee8:	f7ff f8b6 	bl	8001058 <lcd_send_string>
	lcd_put_cur(1, 7);
 8001eec:	2107      	movs	r1, #7
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff f856 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(chr_T_decimal);
 8001ef4:	481a      	ldr	r0, [pc, #104]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001ef6:	f7ff f8af 	bl	8001058 <lcd_send_string>

	lcd_put_cur(1, 8);
 8001efa:	2108      	movs	r1, #8
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff f84f 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string("Hum:");
 8001f02:	4821      	ldr	r0, [pc, #132]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001f04:	f7ff f8a8 	bl	8001058 <lcd_send_string>
	lcd_put_cur(1, 12);
 8001f08:	210c      	movs	r1, #12
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff f848 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(chr_RH_integral);
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f12:	f7ff f8a1 	bl	8001058 <lcd_send_string>
	lcd_put_cur(1, 14);
 8001f16:	210e      	movs	r1, #14
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff f841 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(".");
 8001f1e:	4819      	ldr	r0, [pc, #100]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001f20:	f7ff f89a 	bl	8001058 <lcd_send_string>
	lcd_put_cur(1, 15);
 8001f24:	210f      	movs	r1, #15
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff f83a 	bl	8000fa0 <lcd_put_cur>
	lcd_send_string(chr_RH_decimal);
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f2e:	f7ff f893 	bl	8001058 <lcd_send_string>

}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000450 	.word	0x20000450
 8001f40:	20000451 	.word	0x20000451
 8001f44:	20000452 	.word	0x20000452
 8001f48:	20000453 	.word	0x20000453
 8001f4c:	20000454 	.word	0x20000454
 8001f50:	0800b240 	.word	0x0800b240
 8001f54:	20000458 	.word	0x20000458
 8001f58:	20000460 	.word	0x20000460
 8001f5c:	20000468 	.word	0x20000468
 8001f60:	20000470 	.word	0x20000470
 8001f64:	20000478 	.word	0x20000478
 8001f68:	20000304 	.word	0x20000304
 8001f6c:	2000047c 	.word	0x2000047c
 8001f70:	0800b244 	.word	0x0800b244
 8001f74:	20000480 	.word	0x20000480
 8001f78:	0800b250 	.word	0x0800b250
 8001f7c:	20000488 	.word	0x20000488
 8001f80:	0800b260 	.word	0x0800b260
 8001f84:	0800b268 	.word	0x0800b268
 8001f88:	0800b26c 	.word	0x0800b26c

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_MspInit+0x5c>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_MspInit+0x5c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6193      	str	r3, [r2, #24]
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_MspInit+0x5c>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_MspInit+0x5c>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_MspInit+0x5c>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_MspInit+0x5c>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_MspInit+0x60>)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000

08001ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <HAL_ADC_MspInit+0xbc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d122      	bne.n	8002062 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 8002022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800204c:	23c3      	movs	r3, #195	; 0xc3
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	4619      	mov	r1, r3
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <HAL_ADC_MspInit+0xc4>)
 800205c:	f001 f8bc 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002060:	e026      	b.n	80020b0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_ADC_MspInit+0xc8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d121      	bne.n	80020b0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_ADC_MspInit+0xc0>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800209c:	2301      	movs	r3, #1
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a0:	2303      	movs	r3, #3
 80020a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <HAL_ADC_MspInit+0xcc>)
 80020ac:	f001 f894 	bl	80031d8 <HAL_GPIO_Init>
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40012400 	.word	0x40012400
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010800 	.word	0x40010800
 80020c4:	40012800 	.word	0x40012800
 80020c8:	40010c00 	.word	0x40010c00

080020cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <HAL_I2C_MspInit+0xc8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d124      	bne.n	8002136 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002104:	23c0      	movs	r3, #192	; 0xc0
 8002106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002108:	2312      	movs	r3, #18
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 0318 	add.w	r3, r7, #24
 8002114:	4619      	mov	r1, r3
 8002116:	4821      	ldr	r0, [pc, #132]	; (800219c <HAL_I2C_MspInit+0xd0>)
 8002118:	f001 f85e 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 8002122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002126:	61d3      	str	r3, [r2, #28]
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002134:	e029      	b.n	800218a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_I2C_MspInit+0xd4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d124      	bne.n	800218a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002158:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800215e:	2312      	movs	r3, #18
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0318 	add.w	r3, r7, #24
 800216a:	4619      	mov	r1, r3
 800216c:	480b      	ldr	r0, [pc, #44]	; (800219c <HAL_I2C_MspInit+0xd0>)
 800216e:	f001 f833 	bl	80031d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 8002178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_I2C_MspInit+0xcc>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40005400 	.word	0x40005400
 8002198:	40021000 	.word	0x40021000
 800219c:	40010c00 	.word	0x40010c00
 80021a0:	40005800 	.word	0x40005800

080021a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_RTC_MspInit+0x4c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d118      	bne.n	80021e8 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80021b6:	f001 fe2f 	bl	8003e18 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RTC_MspInit+0x50>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <HAL_RTC_MspInit+0x50>)
 80021c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RTC_MspInit+0x50>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RTC_MspInit+0x54>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 ffc4 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80021e2:	2003      	movs	r0, #3
 80021e4:	f000 ffdd 	bl	80031a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40002800 	.word	0x40002800
 80021f4:	40021000 	.word	0x40021000
 80021f8:	4242043c 	.word	0x4242043c

080021fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d10c      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002226:	e02a      	b.n	800227e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_TIM_Base_MspInit+0x90>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10c      	bne.n	800224c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
}
 800224a:	e018      	b.n	800227e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_TIM_Base_MspInit+0x94>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d113      	bne.n	800227e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x8c>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	201e      	movs	r0, #30
 8002274:	f000 ff79 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002278:	201e      	movs	r0, #30
 800227a:	f000 ff92 	bl	80031a2 <HAL_NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800

08002294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_TIM_MspPostInit+0x80>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d12a      	bne.n	800230a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_TIM_MspPostInit+0x84>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_TIM_MspPostInit+0x84>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_TIM_MspPostInit+0x84>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80022cc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	480e      	ldr	r0, [pc, #56]	; (800231c <HAL_TIM_MspPostInit+0x88>)
 80022e2:	f000 ff79 	bl	80031d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_TIM_MspPostInit+0x8c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_TIM_MspPostInit+0x8c>)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40000400 	.word	0x40000400
 8002318:	40021000 	.word	0x40021000
 800231c:	40011000 	.word	0x40011000
 8002320:	40010000 	.word	0x40010000

08002324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <HAL_UART_MspInit+0x70>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d123      	bne.n	800238c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_UART_MspInit+0x74>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_UART_MspInit+0x74>)
 800234a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234e:	61d3      	str	r3, [r2, #28]
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_MspInit+0x74>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_UART_MspInit+0x74>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_UART_MspInit+0x74>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_UART_MspInit+0x74>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002374:	230c      	movs	r3, #12
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2302      	movs	r3, #2
 800237e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	4619      	mov	r1, r3
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_UART_MspInit+0x78>)
 8002388:	f000 ff26 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40004400 	.word	0x40004400
 8002398:	40021000 	.word	0x40021000
 800239c:	40010800 	.word	0x40010800

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <NMI_Handler+0x4>

080023a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <MemManage_Handler+0x4>

080023b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <UsageFault_Handler+0x4>

080023be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e6:	f000 f951 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <RTC_IRQHandler+0x10>)
 80023f6:	f003 f85d 	bl	80054b4 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000304 	.word	0x20000304

08002404 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM4_IRQHandler+0x10>)
 800240a:	f003 fad9 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200003a8 	.word	0x200003a8

08002418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800241c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002420:	f001 f88e 	bl	8003540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
	return 1;
 800242c:	2301      	movs	r3, #1
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_kill>:

int _kill(int pid, int sig)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002440:	f004 fa90 	bl	8006964 <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	2216      	movs	r2, #22
 8002448:	601a      	str	r2, [r3, #0]
	return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_exit>:

void _exit (int status)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800245e:	f04f 31ff 	mov.w	r1, #4294967295
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffe7 	bl	8002436 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002468:	e7fe      	b.n	8002468 <_exit+0x12>

0800246a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e00a      	b.n	8002492 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800247c:	f3af 8000 	nop.w
 8002480:	4601      	mov	r1, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	60ba      	str	r2, [r7, #8]
 8002488:	b2ca      	uxtb	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	dbf0      	blt.n	800247c <_read+0x12>
	}

return len;
 800249a:	687b      	ldr	r3, [r7, #4]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e009      	b.n	80024ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	60ba      	str	r2, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fde0 	bl	8001084 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbf1      	blt.n	80024b6 <_write+0x12>
	}
	return len;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_close>:

int _close(int file)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	return -1;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002502:	605a      	str	r2, [r3, #4]
	return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <_isatty>:

int _isatty(int file)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	return 1;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <_sbrk+0x5c>)
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <_sbrk+0x60>)
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <_sbrk+0x64>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <_sbrk+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d207      	bcs.n	800257c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800256c:	f004 f9fa 	bl	8006964 <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	220c      	movs	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e009      	b.n	8002590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <_sbrk+0x64>)
 800258c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20005000 	.word	0x20005000
 800259c:	00000400 	.word	0x00000400
 80025a0:	20000494 	.word	0x20000494
 80025a4:	200004b0 	.word	0x200004b0

080025a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025b6:	490d      	ldr	r1, [pc, #52]	; (80025ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025cc:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025da:	f7ff ffe5 	bl	80025a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025de:	f004 f9c7 	bl	8006970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e2:	f7fe fe71 	bl	80012c8 <main>
  bx lr
 80025e6:	4770      	bx	lr
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025f0:	0800b75c 	.word	0x0800b75c
  ldr r2, =_sbss
 80025f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025f8:	200004ac 	.word	0x200004ac

080025fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC1_2_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_Init+0x28>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_Init+0x28>)
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f000 fd9f 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002616:	2000      	movs	r0, #0
 8002618:	f000 f808 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261c:	f7ff fcbc 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fdb7 	bl	80031be <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f000 fd7f 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000000 	.word	0x20000000
 8002684:	20000008 	.word	0x20000008
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_IncTick+0x1c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x20>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_IncTick+0x20>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000008 	.word	0x20000008
 80026ac:	20000498 	.word	0x20000498

080026b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <HAL_GetTick+0x10>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000498 	.word	0x20000498

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffe0 	bl	80026b0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008

0800270c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0be      	b.n	80028ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fc56 	bl	8001ffc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fbf1 	bl	8002f38 <ADC_ConversionStop_Disable>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8099 	bne.w	800289a <HAL_ADC_Init+0x18e>
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 8095 	bne.w	800289a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002778:	f023 0302 	bic.w	r3, r3, #2
 800277c:	f043 0202 	orr.w	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800278c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7b1b      	ldrb	r3, [r3, #12]
 8002792:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002794:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4313      	orrs	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a4:	d003      	beq.n	80027ae <HAL_ADC_Init+0xa2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_ADC_Init+0xa8>
 80027ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_Init+0xaa>
 80027b4:	2300      	movs	r3, #0
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7d1b      	ldrb	r3, [r3, #20]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d119      	bne.n	80027f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7b1b      	ldrb	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	035a      	lsls	r2, r3, #13
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e00b      	b.n	80027f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_ADC_Init+0x1a8>)
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	430b      	orrs	r3, r1
 800281e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002828:	d003      	beq.n	8002832 <HAL_ADC_Init+0x126>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d104      	bne.n	800283c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	3b01      	subs	r3, #1
 8002838:	051b      	lsls	r3, r3, #20
 800283a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	430a      	orrs	r2, r1
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_ADC_Init+0x1ac>)
 8002858:	4013      	ands	r3, r2
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	d10b      	bne.n	8002878 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002876:	e018      	b.n	80028aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f023 0312 	bic.w	r3, r3, #18
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002898:	e007      	b.n	80028aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	ffe1f7fd 	.word	0xffe1f7fd
 80028b8:	ff1f0efe 	.word	0xff1f0efe

080028bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Start+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e098      	b.n	8002a08 <HAL_ADC_Start+0x14c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fad0 	bl	8002e84 <ADC_Enable>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 8087 	bne.w	80029fe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a41      	ldr	r2, [pc, #260]	; (8002a10 <HAL_ADC_Start+0x154>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d105      	bne.n	800291a <HAL_ADC_Start+0x5e>
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_ADC_Start+0x158>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d115      	bne.n	8002946 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d026      	beq.n	8002982 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800293c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002944:	e01d      	b.n	8002982 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2f      	ldr	r2, [pc, #188]	; (8002a14 <HAL_ADC_Start+0x158>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Start+0xaa>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <HAL_ADC_Start+0x154>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10d      	bne.n	8002982 <HAL_ADC_Start+0xc6>
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_ADC_Start+0x158>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800297a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	f023 0206 	bic.w	r2, r3, #6
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c
 800299a:	e002      	b.n	80029a2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f06f 0202 	mvn.w	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029c2:	d113      	bne.n	80029ec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_ADC_Start+0x154>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d105      	bne.n	80029da <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_ADC_Start+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d108      	bne.n	80029ec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e00c      	b.n	8002a06 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40012800 	.word	0x40012800
 8002a14:	40012400 	.word	0x40012400

08002a18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Stop+0x1a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e01a      	b.n	8002a68 <HAL_ADC_Stop+0x50>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa7c 	bl	8002f38 <ADC_ConversionStop_Disable>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a86:	f7ff fe13 	bl	80026b0 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0d3      	b.n	8002c5a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d131      	bne.n	8002b24 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d12a      	bne.n	8002b24 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ace:	e021      	b.n	8002b14 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d01d      	beq.n	8002b14 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_ADC_PollForConversion+0x7e>
 8002ade:	f7ff fde7 	bl	80026b0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d212      	bcs.n	8002b14 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f043 0204 	orr.w	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0a2      	b.n	8002c5a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0d6      	beq.n	8002ad0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b22:	e070      	b.n	8002c06 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_ADC_PollForConversion+0x1f4>)
 8002b26:	681c      	ldr	r4, [r3, #0]
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f001 fe51 	bl	80047d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6919      	ldr	r1, [r3, #16]
 8002b3a:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_ADC_PollForConversion+0x1f8>)
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_ADC_PollForConversion+0x104>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68d9      	ldr	r1, [r3, #12]
 8002b48:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <HAL_ADC_PollForConversion+0x1fc>)
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d111      	bne.n	8002b74 <HAL_ADC_PollForConversion+0x104>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <HAL_ADC_PollForConversion+0x200>)
 8002b58:	400b      	ands	r3, r1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d108      	bne.n	8002b70 <HAL_ADC_PollForConversion+0x100>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68d9      	ldr	r1, [r3, #12]
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_ADC_PollForConversion+0x204>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_PollForConversion+0x100>
 8002b6c:	2314      	movs	r3, #20
 8002b6e:	e020      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x142>
 8002b70:	2329      	movs	r3, #41	; 0x29
 8002b72:	e01e      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x142>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_ADC_PollForConversion+0x200>)
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x120>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <HAL_ADC_PollForConversion+0x204>)
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_ADC_PollForConversion+0x13c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6919      	ldr	r1, [r3, #16]
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_ADC_PollForConversion+0x208>)
 8002b98:	400b      	ands	r3, r1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x140>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_ADC_PollForConversion+0x208>)
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x140>
 8002bac:	2354      	movs	r3, #84	; 0x54
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x142>
 8002bb0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bb8:	e021      	b.n	8002bfe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d01a      	beq.n	8002bf8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_ADC_PollForConversion+0x168>
 8002bc8:	f7ff fd72 	bl	80026b0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d20f      	bcs.n	8002bf8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d90b      	bls.n	8002bf8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e030      	b.n	8002c5a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d8d9      	bhi.n	8002bba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0212 	mvn.w	r2, #18
 8002c0e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c2a:	d115      	bne.n	8002c58 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d111      	bne.n	8002c58 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000000 	.word	0x20000000
 8002c68:	24924924 	.word	0x24924924
 8002c6c:	00924924 	.word	0x00924924
 8002c70:	12492492 	.word	0x12492492
 8002c74:	00492492 	.word	0x00492492
 8002c78:	00249249 	.word	0x00249249

08002c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x20>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0dc      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x1da>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d81c      	bhi.n	8002cfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b05      	subs	r3, #5
 8002cd6:	221f      	movs	r2, #31
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4019      	ands	r1, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b05      	subs	r3, #5
 8002cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfc:	e03c      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d81c      	bhi.n	8002d40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	3b23      	subs	r3, #35	; 0x23
 8002d18:	221f      	movs	r2, #31
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4019      	ands	r1, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b23      	subs	r3, #35	; 0x23
 8002d32:	fa00 f203 	lsl.w	r2, r0, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3e:	e01b      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b41      	subs	r3, #65	; 0x41
 8002d52:	221f      	movs	r2, #31
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4019      	ands	r1, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b41      	subs	r3, #65	; 0x41
 8002d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	d91c      	bls.n	8002dba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b1e      	subs	r3, #30
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4019      	ands	r1, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	3b1e      	subs	r3, #30
 8002dac:	fa00 f203 	lsl.w	r2, r0, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	e019      	b.n	8002dee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6919      	ldr	r1, [r3, #16]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	2207      	movs	r2, #7
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4019      	ands	r1, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6898      	ldr	r0, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	fa00 f203 	lsl.w	r2, r0, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d003      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dfa:	2b11      	cmp	r3, #17
 8002dfc:	d132      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d125      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d126      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d11a      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	0c9a      	lsrs	r2, r3, #18
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e44:	e002      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f9      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x1b2>
 8002e52:	e007      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40012400 	.word	0x40012400
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d040      	beq.n	8002f24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <ADC_Enable+0xac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <ADC_Enable+0xb0>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	0c9b      	lsrs	r3, r3, #18
 8002ebe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ec0:	e002      	b.n	8002ec8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f9      	bne.n	8002ec2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ece:	f7ff fbef 	bl	80026b0 <HAL_GetTick>
 8002ed2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ed4:	e01f      	b.n	8002f16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ed6:	f7ff fbeb 	bl	80026b0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d918      	bls.n	8002f16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d011      	beq.n	8002f16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e007      	b.n	8002f26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d1d8      	bne.n	8002ed6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000
 8002f34:	431bde83 	.word	0x431bde83

08002f38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d12e      	bne.n	8002fb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f62:	f7ff fba5 	bl	80026b0 <HAL_GetTick>
 8002f66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f68:	e01b      	b.n	8002fa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f6a:	f7ff fba1 	bl	80026b0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d914      	bls.n	8002fa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10d      	bne.n	8002fa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	f043 0210 	orr.w	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e007      	b.n	8002fb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d0dc      	beq.n	8002f6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4906      	ldr	r1, [pc, #24]	; (8003054 <__NVIC_EnableIRQ+0x34>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100

08003058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	2b00      	cmp	r3, #0
 800306a:	db0a      	blt.n	8003082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <__NVIC_SetPriority+0x4c>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	440b      	add	r3, r1
 800307c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003080:	e00a      	b.n	8003098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <__NVIC_SetPriority+0x50>)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	3b04      	subs	r3, #4
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	440b      	add	r3, r1
 8003096:	761a      	strb	r2, [r3, #24]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000e100 	.word	0xe000e100
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f1c3 0307 	rsb	r3, r3, #7
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	bf28      	it	cs
 80030ca:	2304      	movcs	r3, #4
 80030cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d902      	bls.n	80030dc <NVIC_EncodePriority+0x30>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3b03      	subs	r3, #3
 80030da:	e000      	b.n	80030de <NVIC_EncodePriority+0x32>
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	f04f 32ff 	mov.w	r2, #4294967295
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	401a      	ands	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f4:	f04f 31ff 	mov.w	r1, #4294967295
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43d9      	mvns	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	4313      	orrs	r3, r2
         );
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7ff ff90 	bl	8003058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff2d 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317c:	f7ff ff42 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff90 	bl	80030ac <NVIC_EncodePriority>
 800318c:	4602      	mov	r2, r0
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff5f 	bl	8003058 <__NVIC_SetPriority>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff35 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffa2 	bl	8003110 <SysTick_Config>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b08b      	sub	sp, #44	; 0x2c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e169      	b.n	80034c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031ec:	2201      	movs	r2, #1
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	429a      	cmp	r2, r3
 8003206:	f040 8158 	bne.w	80034ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a9a      	ldr	r2, [pc, #616]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d05e      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003214:	4a98      	ldr	r2, [pc, #608]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d875      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800321a:	4a98      	ldr	r2, [pc, #608]	; (800347c <HAL_GPIO_Init+0x2a4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d058      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003220:	4a96      	ldr	r2, [pc, #600]	; (800347c <HAL_GPIO_Init+0x2a4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d86f      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003226:	4a96      	ldr	r2, [pc, #600]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d052      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 800322c:	4a94      	ldr	r2, [pc, #592]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d869      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003232:	4a94      	ldr	r2, [pc, #592]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04c      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003238:	4a92      	ldr	r2, [pc, #584]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d863      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800323e:	4a92      	ldr	r2, [pc, #584]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d046      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003244:	4a90      	ldr	r2, [pc, #576]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d85d      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800324a:	2b12      	cmp	r3, #18
 800324c:	d82a      	bhi.n	80032a4 <HAL_GPIO_Init+0xcc>
 800324e:	2b12      	cmp	r3, #18
 8003250:	d859      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_GPIO_Init+0x80>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	080032d3 	.word	0x080032d3
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080032bf 	.word	0x080032bf
 8003264:	08003301 	.word	0x08003301
 8003268:	08003307 	.word	0x08003307
 800326c:	08003307 	.word	0x08003307
 8003270:	08003307 	.word	0x08003307
 8003274:	08003307 	.word	0x08003307
 8003278:	08003307 	.word	0x08003307
 800327c:	08003307 	.word	0x08003307
 8003280:	08003307 	.word	0x08003307
 8003284:	08003307 	.word	0x08003307
 8003288:	08003307 	.word	0x08003307
 800328c:	08003307 	.word	0x08003307
 8003290:	08003307 	.word	0x08003307
 8003294:	08003307 	.word	0x08003307
 8003298:	08003307 	.word	0x08003307
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	4a79      	ldr	r2, [pc, #484]	; (800348c <HAL_GPIO_Init+0x2b4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032aa:	e02c      	b.n	8003306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	623b      	str	r3, [r7, #32]
          break;
 80032b2:	e029      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	3304      	adds	r3, #4
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e024      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	3308      	adds	r3, #8
 80032c4:	623b      	str	r3, [r7, #32]
          break;
 80032c6:	e01f      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	330c      	adds	r3, #12
 80032ce:	623b      	str	r3, [r7, #32]
          break;
 80032d0:	e01a      	b.n	8003308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032da:	2304      	movs	r3, #4
 80032dc:	623b      	str	r3, [r7, #32]
          break;
 80032de:	e013      	b.n	8003308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e8:	2308      	movs	r3, #8
 80032ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	611a      	str	r2, [r3, #16]
          break;
 80032f2:	e009      	b.n	8003308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f4:	2308      	movs	r3, #8
 80032f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	615a      	str	r2, [r3, #20]
          break;
 80032fe:	e003      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x130>
          break;
 8003306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d801      	bhi.n	8003312 <HAL_GPIO_Init+0x13a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_Init+0x13e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2bff      	cmp	r3, #255	; 0xff
 800331c:	d802      	bhi.n	8003324 <HAL_GPIO_Init+0x14c>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	e002      	b.n	800332a <HAL_GPIO_Init+0x152>
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3b08      	subs	r3, #8
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	210f      	movs	r1, #15
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80b1 	beq.w	80034ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003370:	4a48      	ldr	r2, [pc, #288]	; (8003494 <HAL_GPIO_Init+0x2bc>)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_GPIO_Init+0x1ec>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3f      	ldr	r2, [pc, #252]	; (800349c <HAL_GPIO_Init+0x2c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00d      	beq.n	80033c0 <HAL_GPIO_Init+0x1e8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3e      	ldr	r2, [pc, #248]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <HAL_GPIO_Init+0x1e4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_GPIO_Init+0x2cc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_GPIO_Init+0x1e0>
 80033b4:	2303      	movs	r3, #3
 80033b6:	e006      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033b8:	2304      	movs	r3, #4
 80033ba:	e004      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033bc:	2302      	movs	r3, #2
 80033be:	e002      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033c4:	2300      	movs	r3, #0
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	f002 0203 	and.w	r2, r2, #3
 80033cc:	0092      	lsls	r2, r2, #2
 80033ce:	4093      	lsls	r3, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033d6:	492f      	ldr	r1, [pc, #188]	; (8003494 <HAL_GPIO_Init+0x2bc>)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033f0:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	492c      	ldr	r1, [pc, #176]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	43db      	mvns	r3, r3
 8003406:	4928      	ldr	r1, [pc, #160]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003408:	4013      	ands	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003418:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4922      	ldr	r1, [pc, #136]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	43db      	mvns	r3, r3
 800342e:	491e      	ldr	r1, [pc, #120]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003430:	4013      	ands	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	4918      	ldr	r1, [pc, #96]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]
 800344c:	e006      	b.n	800345c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	43db      	mvns	r3, r3
 8003456:	4914      	ldr	r1, [pc, #80]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003458:	4013      	ands	r3, r2
 800345a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d021      	beq.n	80034ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	490e      	ldr	r1, [pc, #56]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
 8003474:	e021      	b.n	80034ba <HAL_GPIO_Init+0x2e2>
 8003476:	bf00      	nop
 8003478:	10320000 	.word	0x10320000
 800347c:	10310000 	.word	0x10310000
 8003480:	10220000 	.word	0x10220000
 8003484:	10210000 	.word	0x10210000
 8003488:	10120000 	.word	0x10120000
 800348c:	10110000 	.word	0x10110000
 8003490:	40021000 	.word	0x40021000
 8003494:	40010000 	.word	0x40010000
 8003498:	40010800 	.word	0x40010800
 800349c:	40010c00 	.word	0x40010c00
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_GPIO_Init+0x304>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	4909      	ldr	r1, [pc, #36]	; (80034dc <HAL_GPIO_Init+0x304>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	3301      	adds	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f47f ae8e 	bne.w	80031ec <HAL_GPIO_Init+0x14>
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	372c      	adds	r7, #44	; 0x2c
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40010400 	.word	0x40010400

080034e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e001      	b.n	8003502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	807b      	strh	r3, [r7, #2]
 800351a:	4613      	mov	r3, r2
 800351c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800351e:	787b      	ldrb	r3, [r7, #1]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003524:	887a      	ldrh	r2, [r7, #2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800352a:	e003      	b.n	8003534 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	041a      	lsls	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f806 	bl	8003570 <HAL_GPIO_EXTI_Callback>
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010400 	.word	0x40010400

08003570 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e12b      	b.n	80037ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fd8e 	bl	80020cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e8:	f000 fff6 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 80035ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4a81      	ldr	r2, [pc, #516]	; (80037f8 <HAL_I2C_Init+0x274>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d807      	bhi.n	8003608 <HAL_I2C_Init+0x84>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a80      	ldr	r2, [pc, #512]	; (80037fc <HAL_I2C_Init+0x278>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bf94      	ite	ls
 8003600:	2301      	movls	r3, #1
 8003602:	2300      	movhi	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e006      	b.n	8003616 <HAL_I2C_Init+0x92>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a7d      	ldr	r2, [pc, #500]	; (8003800 <HAL_I2C_Init+0x27c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0e7      	b.n	80037ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a78      	ldr	r2, [pc, #480]	; (8003804 <HAL_I2C_Init+0x280>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0c9b      	lsrs	r3, r3, #18
 8003628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a6a      	ldr	r2, [pc, #424]	; (80037f8 <HAL_I2C_Init+0x274>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d802      	bhi.n	8003658 <HAL_I2C_Init+0xd4>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3301      	adds	r3, #1
 8003656:	e009      	b.n	800366c <HAL_I2C_Init+0xe8>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	4a69      	ldr	r2, [pc, #420]	; (8003808 <HAL_I2C_Init+0x284>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	3301      	adds	r3, #1
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	430b      	orrs	r3, r1
 8003672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800367e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	495c      	ldr	r1, [pc, #368]	; (80037f8 <HAL_I2C_Init+0x274>)
 8003688:	428b      	cmp	r3, r1
 800368a:	d819      	bhi.n	80036c0 <HAL_I2C_Init+0x13c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e59      	subs	r1, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fbb1 f3f3 	udiv	r3, r1, r3
 800369a:	1c59      	adds	r1, r3, #1
 800369c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036a0:	400b      	ands	r3, r1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_I2C_Init+0x138>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e59      	subs	r1, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ba:	e051      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 80036bc:	2304      	movs	r3, #4
 80036be:	e04f      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <HAL_I2C_Init+0x168>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	440b      	add	r3, r1
 80036d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e012      	b.n	8003712 <HAL_I2C_Init+0x18e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	0099      	lsls	r1, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Init+0x196>
 8003716:	2301      	movs	r3, #1
 8003718:	e022      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10e      	bne.n	8003740 <HAL_I2C_Init+0x1bc>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e58      	subs	r0, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	440b      	add	r3, r1
 8003730:	fbb0 f3f3 	udiv	r3, r0, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373e:	e00f      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1e58      	subs	r0, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	0099      	lsls	r1, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	3301      	adds	r3, #1
 8003758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	6809      	ldr	r1, [r1, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800378e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6911      	ldr	r1, [r2, #16]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	000186a0 	.word	0x000186a0
 80037fc:	001e847f 	.word	0x001e847f
 8003800:	003d08ff 	.word	0x003d08ff
 8003804:	431bde83 	.word	0x431bde83
 8003808:	10624dd3 	.word	0x10624dd3

0800380c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	461a      	mov	r2, r3
 8003818:	460b      	mov	r3, r1
 800381a:	817b      	strh	r3, [r7, #10]
 800381c:	4613      	mov	r3, r2
 800381e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7fe ff46 	bl	80026b0 <HAL_GetTick>
 8003824:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	f040 80e0 	bne.w	80039f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2319      	movs	r3, #25
 800383a:	2201      	movs	r2, #1
 800383c:	4970      	ldr	r1, [pc, #448]	; (8003a00 <HAL_I2C_Master_Transmit+0x1f4>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f964 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	e0d3      	b.n	80039f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2C_Master_Transmit+0x50>
 8003858:	2302      	movs	r3, #2
 800385a:	e0cc      	b.n	80039f6 <HAL_I2C_Master_Transmit+0x1ea>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d007      	beq.n	8003882 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003890:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2210      	movs	r2, #16
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	893a      	ldrh	r2, [r7, #8]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a50      	ldr	r2, [pc, #320]	; (8003a04 <HAL_I2C_Master_Transmit+0x1f8>)
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f89c 	bl	8003a08 <I2C_MasterRequestWrite>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e08d      	b.n	80039f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038f0:	e066      	b.n	80039c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	6a39      	ldr	r1, [r7, #32]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9de 	bl	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b04      	cmp	r3, #4
 8003908:	d107      	bne.n	800391a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06b      	b.n	80039f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d11b      	bne.n	8003994 <HAL_I2C_Master_Transmit+0x188>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	6a39      	ldr	r1, [r7, #32]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f9ce 	bl	8003d3a <I2C_WaitOnBTFFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d107      	bne.n	80039bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e01a      	b.n	80039f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d194      	bne.n	80038f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	00100002 	.word	0x00100002
 8003a04:	ffff0000 	.word	0xffff0000

08003a08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	460b      	mov	r3, r1
 8003a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d006      	beq.n	8003a32 <I2C_MasterRequestWrite+0x2a>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d003      	beq.n	8003a32 <I2C_MasterRequestWrite+0x2a>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a30:	d108      	bne.n	8003a44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e00b      	b.n	8003a5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	2b12      	cmp	r3, #18
 8003a4a:	d107      	bne.n	8003a5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f84f 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a82:	d103      	bne.n	8003a8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e035      	b.n	8003afc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a98:	d108      	bne.n	8003aac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa8:	611a      	str	r2, [r3, #16]
 8003aaa:	e01b      	b.n	8003ae4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aac:	897b      	ldrh	r3, [r7, #10]
 8003aae:	11db      	asrs	r3, r3, #7
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0306 	and.w	r3, r3, #6
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f063 030f 	orn	r3, r3, #15
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	490e      	ldr	r1, [pc, #56]	; (8003b04 <I2C_MasterRequestWrite+0xfc>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f875 	bl	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e010      	b.n	8003afc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ada:	897b      	ldrh	r3, [r7, #10]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4907      	ldr	r1, [pc, #28]	; (8003b08 <I2C_MasterRequestWrite+0x100>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f865 	bl	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	00010008 	.word	0x00010008
 8003b08:	00010002 	.word	0x00010002

08003b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1c:	e025      	b.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d021      	beq.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fe fdc3 	bl	80026b0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e023      	b.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10d      	bne.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	e00c      	b.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d0b6      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc8:	e051      	b.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd8:	d123      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0204 	orr.w	r2, r3, #4
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e046      	b.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d021      	beq.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe fd41 	bl	80026b0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e020      	b.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10c      	bne.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e00b      	b.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d18d      	bne.n	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc4:	e02d      	b.n	8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f878 	bl	8003dbc <I2C_IsAcknowledgeFailed>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e02d      	b.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d021      	beq.n	8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fce7 	bl	80026b0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e007      	b.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d1ca      	bne.n	8003cc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d46:	e02d      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f837 	bl	8003dbc <I2C_IsAcknowledgeFailed>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e02d      	b.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d021      	beq.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7fe fca6 	bl	80026b0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e007      	b.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d1ca      	bne.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d11b      	bne.n	8003e0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ddc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	420e0020 	.word	0x420e0020

08003e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e272      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8087 	beq.w	8003f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e50:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d00c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e5c:	4b8f      	ldr	r3, [pc, #572]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d112      	bne.n	8003e8e <HAL_RCC_OscConfig+0x5e>
 8003e68:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e74:	d10b      	bne.n	8003e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e76:	4b89      	ldr	r3, [pc, #548]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d06c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x12c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d168      	bne.n	8003f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e24c      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x76>
 8003e98:	4b80      	ldr	r3, [pc, #512]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7f      	ldr	r2, [pc, #508]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e02e      	b.n	8003f04 <HAL_RCC_OscConfig+0xd4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x98>
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7a      	ldr	r2, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b78      	ldr	r3, [pc, #480]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a77      	ldr	r2, [pc, #476]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0xd4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0xbc>
 8003ed2:	4b72      	ldr	r3, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a71      	ldr	r2, [pc, #452]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b6f      	ldr	r3, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6e      	ldr	r2, [pc, #440]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0xd4>
 8003eec:	4b6b      	ldr	r3, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fbd0 	bl	80026b0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe fbcc 	bl	80026b0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e200      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b5d      	ldr	r3, [pc, #372]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xe4>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe fbbc 	bl	80026b0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe fbb8 	bl	80026b0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e1ec      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	4b53      	ldr	r3, [pc, #332]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x10c>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d063      	beq.n	8004032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f6a:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x18c>
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d116      	bne.n	8003fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x176>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e1c0      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4939      	ldr	r1, [pc, #228]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	e03a      	b.n	8004032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc4:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fca:	f7fe fb71 	bl	80026b0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fe fb6d 	bl	80026b0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1a1      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4927      	ldr	r1, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe fb50 	bl	80026b0 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004014:	f7fe fb4c 	bl	80026b0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e180      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004026:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03a      	beq.n	80040b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d019      	beq.n	800407a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <HAL_RCC_OscConfig+0x274>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404c:	f7fe fb30 	bl	80026b0 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004054:	f7fe fb2c 	bl	80026b0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e160      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCC_OscConfig+0x26c>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004072:	2001      	movs	r0, #1
 8004074:	f000 fad8 	bl	8004628 <RCC_Delay>
 8004078:	e01c      	b.n	80040b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCC_OscConfig+0x274>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004080:	f7fe fb16 	bl	80026b0 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004086:	e00f      	b.n	80040a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004088:	f7fe fb12 	bl	80026b0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d908      	bls.n	80040a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e146      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	42420000 	.word	0x42420000
 80040a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b92      	ldr	r3, [pc, #584]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e9      	bne.n	8004088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a6 	beq.w	800420e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10d      	bne.n	80040ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4a87      	ldr	r2, [pc, #540]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	61d3      	str	r3, [r2, #28]
 80040de:	4b85      	ldr	r3, [pc, #532]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	4b82      	ldr	r3, [pc, #520]	; (80042f8 <HAL_RCC_OscConfig+0x4c8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d118      	bne.n	800412c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fa:	4b7f      	ldr	r3, [pc, #508]	; (80042f8 <HAL_RCC_OscConfig+0x4c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7e      	ldr	r2, [pc, #504]	; (80042f8 <HAL_RCC_OscConfig+0x4c8>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004106:	f7fe fad3 	bl	80026b0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410e:	f7fe facf 	bl	80026b0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b64      	cmp	r3, #100	; 0x64
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e103      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004120:	4b75      	ldr	r3, [pc, #468]	; (80042f8 <HAL_RCC_OscConfig+0x4c8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d106      	bne.n	8004142 <HAL_RCC_OscConfig+0x312>
 8004134:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4a6e      	ldr	r2, [pc, #440]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6213      	str	r3, [r2, #32]
 8004140:	e02d      	b.n	800419e <HAL_RCC_OscConfig+0x36e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x334>
 800414a:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4a69      	ldr	r2, [pc, #420]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6213      	str	r3, [r2, #32]
 8004156:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a66      	ldr	r2, [pc, #408]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	e01c      	b.n	800419e <HAL_RCC_OscConfig+0x36e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d10c      	bne.n	8004186 <HAL_RCC_OscConfig+0x356>
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	4a60      	ldr	r2, [pc, #384]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	6213      	str	r3, [r2, #32]
 8004178:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4a5d      	ldr	r2, [pc, #372]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6213      	str	r3, [r2, #32]
 8004184:	e00b      	b.n	800419e <HAL_RCC_OscConfig+0x36e>
 8004186:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a5a      	ldr	r2, [pc, #360]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a57      	ldr	r2, [pc, #348]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d015      	beq.n	80041d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fa83 	bl	80026b0 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fe fa7f 	bl	80026b0 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e0b1      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ee      	beq.n	80041ae <HAL_RCC_OscConfig+0x37e>
 80041d0:	e014      	b.n	80041fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d2:	f7fe fa6d 	bl	80026b0 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fe fa69 	bl	80026b0 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e09b      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f0:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a3b      	ldr	r2, [pc, #236]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8087 	beq.w	8004326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004218:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d061      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d146      	bne.n	80042ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422c:	4b33      	ldr	r3, [pc, #204]	; (80042fc <HAL_RCC_OscConfig+0x4cc>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fe fa3d 	bl	80026b0 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423a:	f7fe fa39 	bl	80026b0 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e06d      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800424c:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d108      	bne.n	8004274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4921      	ldr	r1, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	4313      	orrs	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004274:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a19      	ldr	r1, [r3, #32]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	430b      	orrs	r3, r1
 8004286:	491b      	ldr	r1, [pc, #108]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <HAL_RCC_OscConfig+0x4cc>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fa0d 	bl	80026b0 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429a:	f7fe fa09 	bl	80026b0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e03d      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x46a>
 80042b8:	e035      	b.n	8004326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe f9f6 	bl	80026b0 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fe f9f2 	bl	80026b0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e026      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x498>
 80042e6:	e01e      	b.n	8004326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e019      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40007000 	.word	0x40007000
 80042fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_OscConfig+0x500>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	429a      	cmp	r2, r3
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0d0      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004348:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d910      	bls.n	8004378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	4965      	ldr	r1, [pc, #404]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800439a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d040      	beq.n	8004454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d115      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e073      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06b      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004412:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f023 0203 	bic.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4936      	ldr	r1, [pc, #216]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004424:	f7fe f944 	bl	80026b0 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442a:	e00a      	b.n	8004442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442c:	f7fe f940 	bl	80026b0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e053      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 020c 	and.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	429a      	cmp	r2, r3
 8004452:	d1eb      	bne.n	800442c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004454:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d210      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 0207 	bic.w	r2, r3, #7
 800446a:	4922      	ldr	r1, [pc, #136]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f821 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HAL_RCC_ClockConfig+0x1cc>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1d0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe f8a2 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40022000 	.word	0x40022000
 80044f8:	40021000 	.word	0x40021000
 80044fc:	0800b294 	.word	0x0800b294
 8004500:	20000000 	.word	0x20000000
 8004504:	20000004 	.word	0x20000004

08004508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	b490      	push	{r4, r7}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800450e:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004510:	1d3c      	adds	r4, r7, #4
 8004512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004518:	f240 2301 	movw	r3, #513	; 0x201
 800451c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b04      	cmp	r3, #4
 8004540:	d002      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x40>
 8004542:	2b08      	cmp	r3, #8
 8004544:	d003      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0x46>
 8004546:	e02b      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800454a:	623b      	str	r3, [r7, #32]
      break;
 800454c:	e02b      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	0c9b      	lsrs	r3, r3, #18
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	3328      	adds	r3, #40	; 0x28
 8004558:	443b      	add	r3, r7
 800455a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800455e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d012      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	0c5b      	lsrs	r3, r3, #17
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	3328      	adds	r3, #40	; 0x28
 8004576:	443b      	add	r3, r7
 8004578:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	4a0e      	ldr	r2, [pc, #56]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004582:	fb03 f202 	mul.w	r2, r3, r2
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e004      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	623b      	str	r3, [r7, #32]
      break;
 800459e:	e002      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80045a2:	623b      	str	r3, [r7, #32]
      break;
 80045a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a6:	6a3b      	ldr	r3, [r7, #32]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc90      	pop	{r4, r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	0800b274 	.word	0x0800b274
 80045b8:	40021000 	.word	0x40021000
 80045bc:	007a1200 	.word	0x007a1200
 80045c0:	003d0900 	.word	0x003d0900

080045c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	20000000 	.word	0x20000000

080045d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045dc:	f7ff fff2 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	0800b2a4 	.word	0x0800b2a4

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004604:	f7ff ffde 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	0adb      	lsrs	r3, r3, #11
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	0800b2a4 	.word	0x0800b2a4

08004628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <RCC_Delay+0x34>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <RCC_Delay+0x38>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	0a5b      	lsrs	r3, r3, #9
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004644:	bf00      	nop
  }
  while (Delay --);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	60fa      	str	r2, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f9      	bne.n	8004644 <RCC_Delay+0x1c>
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	20000000 	.word	0x20000000
 8004660:	10624dd3 	.word	0x10624dd3

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d07d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004684:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b4c      	ldr	r3, [pc, #304]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	4a4b      	ldr	r2, [pc, #300]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	61d3      	str	r3, [r2, #28]
 800469c:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d118      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b8:	4b43      	ldr	r3, [pc, #268]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a42      	ldr	r2, [pc, #264]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c4:	f7fd fff4 	bl	80026b0 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	e008      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046cc:	f7fd fff0 	bl	80026b0 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e06d      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046de:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	429a      	cmp	r2, r3
 8004706:	d027      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004708:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004712:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800471e:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fd ffbf 	bl	80026b0 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fd ffbb 	bl	80026b0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e036      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4917      	ldr	r1, [pc, #92]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	4313      	orrs	r3, r2
 8004768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	490b      	ldr	r1, [pc, #44]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42420440 	.word	0x42420440

080047d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b08d      	sub	sp, #52	; 0x34
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047d8:	4b58      	ldr	r3, [pc, #352]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80047da:	f107 040c 	add.w	r4, r7, #12
 80047de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047e4:	f240 2301 	movw	r3, #513	; 0x201
 80047e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	2300      	movs	r3, #0
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	2300      	movs	r3, #0
 80047f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	2300      	movs	r3, #0
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b10      	cmp	r3, #16
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b10      	cmp	r3, #16
 8004808:	f200 808e 	bhi.w	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d049      	beq.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d079      	beq.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004818:	e086      	b.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800481a:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004820:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d07f      	beq.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	0c9b      	lsrs	r3, r3, #18
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	3330      	adds	r3, #48	; 0x30
 8004836:	443b      	add	r3, r7
 8004838:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800483c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004848:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c5b      	lsrs	r3, r3, #17
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	3330      	adds	r3, #48	; 0x30
 8004854:	443b      	add	r3, r7
 8004856:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004866:	4a37      	ldr	r2, [pc, #220]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	fbb2 f2f3 	udiv	r2, r2, r3
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004876:	e004      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	4a33      	ldr	r2, [pc, #204]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004882:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488e:	d102      	bne.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004894:	e04a      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	4a2c      	ldr	r2, [pc, #176]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048a4:	e042      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d108      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c8:	e01f      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d109      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80048e2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e8:	e00f      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f4:	d11c      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004902:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004908:	e012      	b.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800490c:	f7ff fe78 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	0b9b      	lsrs	r3, r3, #14
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	3301      	adds	r3, #1
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004926:	e004      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004928:	bf00      	nop
 800492a:	e002      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800492c:	bf00      	nop
 800492e:	e000      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004930:	bf00      	nop
    }
  }
  return (frequency);
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004934:	4618      	mov	r0, r3
 8004936:	3734      	adds	r7, #52	; 0x34
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	0800b284 	.word	0x0800b284
 8004940:	40021000 	.word	0x40021000
 8004944:	007a1200 	.word	0x007a1200
 8004948:	003d0900 	.word	0x003d0900
 800494c:	aaaaaaab 	.word	0xaaaaaaab

08004950 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e084      	b.n	8004a70 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7c5b      	ldrb	r3, [r3, #17]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fd fc14 	bl	80021a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 faf4 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2204      	movs	r2, #4
 8004992:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e06b      	b.n	8004a70 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fbad 	bl	80050f8 <RTC_EnterInitMode>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2204      	movs	r2, #4
 80049a8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e060      	b.n	8004a70 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0207 	bic.w	r2, r2, #7
 80049bc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80049c6:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <HAL_RTC_Init+0x128>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <HAL_RTC_Init+0x128>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <HAL_RTC_Init+0x128>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4926      	ldr	r1, [pc, #152]	; (8004a78 <HAL_RTC_Init+0x128>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d003      	beq.n	80049f6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e00e      	b.n	8004a14 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80049f6:	2001      	movs	r0, #1
 80049f8:	f7ff feea 	bl	80047d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80049fc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2204      	movs	r2, #4
 8004a08:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e030      	b.n	8004a70 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 010f 	bic.w	r1, r3, #15
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0c1a      	lsrs	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	b291      	uxth	r1, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb81 	bl	8005148 <RTC_ExitInitMode>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e00c      	b.n	8004a70 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40006c00 	.word	0x40006c00

08004a7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_RTC_SetTime+0x20>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e080      	b.n	8004ba2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	7c1b      	ldrb	r3, [r3, #16]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_RTC_SetTime+0x30>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e07a      	b.n	8004ba2 <HAL_RTC_SetTime+0x126>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d113      	bne.n	8004ae6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004ac8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004ada:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004ae0:	4413      	add	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e01e      	b.n	8004b24 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fb71 	bl	80051d2 <RTC_Bcd2ToByte>
 8004af0:	4603      	mov	r3, r0
 8004af2:	461a      	mov	r2, r3
 8004af4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004af8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fb66 	bl	80051d2 <RTC_Bcd2ToByte>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b12:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	789b      	ldrb	r3, [r3, #2]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fb5a 	bl	80051d2 <RTC_Bcd2ToByte>
 8004b1e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b20:	4423      	add	r3, r4
 8004b22:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fa7f 	bl	800502a <RTC_WriteTimeCounter>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2204      	movs	r2, #4
 8004b36:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e02f      	b.n	8004ba2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0205 	bic.w	r2, r2, #5
 8004b50:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa90 	bl	8005078 <RTC_ReadAlarmCounter>
 8004b58:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d018      	beq.n	8004b94 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d214      	bcs.n	8004b94 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004b70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b74:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fa96 	bl	80050aa <RTC_WriteAlarmCounter>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2204      	movs	r2, #4
 8004b88:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e006      	b.n	8004ba2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd90      	pop	{r4, r7, pc}
	...

08004bac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RTC_GetTime+0x28>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0b5      	b.n	8004d44 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0ac      	b.n	8004d44 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f9ed 	bl	8004fca <RTC_ReadTimeCounter>
 8004bf0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4a55      	ldr	r2, [pc, #340]	; (8004d4c <HAL_RTC_GetTime+0x1a0>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0adb      	lsrs	r3, r3, #11
 8004bfc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <HAL_RTC_GetTime+0x1a0>)
 8004c02:	fba3 1302 	umull	r1, r3, r3, r2
 8004c06:	0adb      	lsrs	r3, r3, #11
 8004c08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a4f      	ldr	r2, [pc, #316]	; (8004d50 <HAL_RTC_GetTime+0x1a4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <HAL_RTC_GetTime+0x1a0>)
 8004c24:	fba2 1203 	umull	r1, r2, r2, r3
 8004c28:	0ad2      	lsrs	r2, r2, #11
 8004c2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004c2e:	fb01 f202 	mul.w	r2, r1, r2
 8004c32:	1a9a      	subs	r2, r3, r2
 8004c34:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <HAL_RTC_GetTime+0x1a4>)
 8004c36:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3a:	0959      	lsrs	r1, r3, #5
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a5b      	subs	r3, r3, r1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	1ad1      	subs	r1, r2, r3
 8004c46:	b2ca      	uxtb	r2, r1
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b17      	cmp	r3, #23
 8004c50:	d955      	bls.n	8004cfe <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4a3f      	ldr	r2, [pc, #252]	; (8004d54 <HAL_RTC_GetTime+0x1a8>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <HAL_RTC_GetTime+0x1a8>)
 8004c62:	fba3 2301 	umull	r2, r3, r3, r1
 8004c66:	091a      	lsrs	r2, r3, #4
 8004c68:	4613      	mov	r3, r2
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	1aca      	subs	r2, r1, r3
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f9fd 	bl	8005078 <RTC_ReadAlarmCounter>
 8004c7e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d008      	beq.n	8004c9a <HAL_RTC_GetTime+0xee>
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d904      	bls.n	8004c9a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e002      	b.n	8004ca0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <HAL_RTC_GetTime+0x1ac>)
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004cae:	69b9      	ldr	r1, [r7, #24]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f9ba 	bl	800502a <RTC_WriteTimeCounter>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e041      	b.n	8004d44 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f9e9 	bl	80050aa <RTC_WriteAlarmCounter>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e030      	b.n	8004d44 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ce2:	69f9      	ldr	r1, [r7, #28]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f9e0 	bl	80050aa <RTC_WriteAlarmCounter>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e027      	b.n	8004d44 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fa88 	bl	800520c <RTC_DateUpdate>
 8004cfc:	e003      	b.n	8004d06 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fa41 	bl	8005198 <RTC_ByteToBcd2>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fa38 	bl	8005198 <RTC_ByteToBcd2>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fa2f 	bl	8005198 <RTC_ByteToBcd2>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	91a2b3c5 	.word	0x91a2b3c5
 8004d50:	88888889 	.word	0x88888889
 8004d54:	aaaaaaab 	.word	0xaaaaaaab
 8004d58:	00015180 	.word	0x00015180

08004d5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_RTC_SetDate+0x24>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e097      	b.n	8004eb4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	7c1b      	ldrb	r3, [r3, #16]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_RTC_SetDate+0x34>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e091      	b.n	8004eb4 <HAL_RTC_SetDate+0x158>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	78da      	ldrb	r2, [r3, #3]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	785a      	ldrb	r2, [r3, #1]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	789a      	ldrb	r2, [r3, #2]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	739a      	strb	r2, [r3, #14]
 8004dba:	e01a      	b.n	8004df2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fa06 	bl	80051d2 <RTC_Bcd2ToByte>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f9fd 	bl	80051d2 <RTC_Bcd2ToByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	789b      	ldrb	r3, [r3, #2]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f9f4 	bl	80051d2 <RTC_Bcd2ToByte>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	7bdb      	ldrb	r3, [r3, #15]
 8004df6:	4618      	mov	r0, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	7b59      	ldrb	r1, [r3, #13]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	7b9b      	ldrb	r3, [r3, #14]
 8004e00:	461a      	mov	r2, r3
 8004e02:	f000 fadf 	bl	80053c4 <RTC_WeekDayNum>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	7b1a      	ldrb	r2, [r3, #12]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f8d7 	bl	8004fca <RTC_ReadTimeCounter>
 8004e1c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_RTC_SetDate+0x160>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	0adb      	lsrs	r3, r3, #11
 8004e28:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b18      	cmp	r3, #24
 8004e2e:	d93a      	bls.n	8004ea6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4a23      	ldr	r2, [pc, #140]	; (8004ec0 <HAL_RTC_SetDate+0x164>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <HAL_RTC_SetDate+0x168>)
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e46:	69f9      	ldr	r1, [r7, #28]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f8ee 	bl	800502a <RTC_WriteTimeCounter>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2204      	movs	r2, #4
 8004e58:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e027      	b.n	8004eb4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f907 	bl	8005078 <RTC_ReadAlarmCounter>
 8004e6a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d018      	beq.n	8004ea6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d214      	bcs.n	8004ea6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004e82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e86:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f90d 	bl	80050aa <RTC_WriteAlarmCounter>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e006      	b.n	8004eb4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	91a2b3c5 	.word	0x91a2b3c5
 8004ec0:	aaaaaaab 	.word	0xaaaaaaab
 8004ec4:	00015180 	.word	0x00015180

08004ec8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	2100      	movs	r1, #0
 8004eda:	460a      	mov	r2, r1
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	460a      	mov	r2, r1
 8004ee0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_RTC_GetDate+0x26>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e03a      	b.n	8004f68 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004ef2:	f107 0314 	add.w	r3, r7, #20
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4619      	mov	r1, r3
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fe56 	bl	8004bac <HAL_RTC_GetTime>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e02e      	b.n	8004f68 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	7b1a      	ldrb	r2, [r3, #12]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	7bda      	ldrb	r2, [r3, #15]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	7b5a      	ldrb	r2, [r3, #13]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	7b9a      	ldrb	r2, [r3, #14]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f92f 	bl	8005198 <RTC_ByteToBcd2>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f926 	bl	8005198 <RTC_ByteToBcd2>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	789b      	ldrb	r3, [r3, #2]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 f91d 	bl	8005198 <RTC_ByteToBcd2>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01d      	b.n	8004fc2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0208 	bic.w	r2, r2, #8
 8004f94:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f96:	f7fd fb8b 	bl	80026b0 <HAL_GetTick>
 8004f9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f9c:	e009      	b.n	8004fb2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f9e:	f7fd fb87 	bl	80026b0 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fac:	d901      	bls.n	8004fb2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e007      	b.n	8004fc2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ee      	beq.n	8004f9e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	827b      	strh	r3, [r7, #18]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	823b      	strh	r3, [r7, #16]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004ffa:	8a7a      	ldrh	r2, [r7, #18]
 8004ffc:	8a3b      	ldrh	r3, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d008      	beq.n	8005014 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005002:	8a3b      	ldrh	r3, [r7, #16]
 8005004:	041a      	lsls	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	b29b      	uxth	r3, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e004      	b.n	800501e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005014:	8a7b      	ldrh	r3, [r7, #18]
 8005016:	041a      	lsls	r2, r3, #16
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f85d 	bl	80050f8 <RTC_EnterInitMode>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e011      	b.n	800506e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	0c12      	lsrs	r2, r2, #16
 8005052:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	b292      	uxth	r2, r2
 800505c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f872 	bl	8005148 <RTC_ExitInitMode>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	81fb      	strh	r3, [r7, #14]
 8005084:	2300      	movs	r3, #0
 8005086:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	041a      	lsls	r2, r3, #16
 800509c:	89bb      	ldrh	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f81d 	bl	80050f8 <RTC_EnterInitMode>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e011      	b.n	80050ee <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	0c12      	lsrs	r2, r2, #16
 80050d2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b292      	uxth	r2, r2
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f832 	bl	8005148 <RTC_ExitInitMode>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005104:	f7fd fad4 	bl	80026b0 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800510a:	e009      	b.n	8005120 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800510c:	f7fd fad0 	bl	80026b0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511a:	d901      	bls.n	8005120 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e00f      	b.n	8005140 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ee      	beq.n	800510c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0210 	orr.w	r2, r2, #16
 800513c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0210 	bic.w	r2, r2, #16
 8005162:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005164:	f7fd faa4 	bl	80026b0 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800516a:	e009      	b.n	8005180 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800516c:	f7fd faa0 	bl	80026b0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517a:	d901      	bls.n	8005180 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e007      	b.n	8005190 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ee      	beq.n	800516c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80051a6:	e005      	b.n	80051b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	3b0a      	subs	r3, #10
 80051b2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b09      	cmp	r3, #9
 80051b8:	d8f6      	bhi.n	80051a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b2db      	uxtb	r3, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	4603      	mov	r3, r0
 80051da:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4413      	add	r3, r2
 8005200:	b2db      	uxtb	r3, r3
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7bdb      	ldrb	r3, [r3, #15]
 800522a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7b5b      	ldrb	r3, [r3, #13]
 8005230:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7b9b      	ldrb	r3, [r3, #14]
 8005236:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	e06f      	b.n	800531e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d011      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d00e      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b05      	cmp	r3, #5
 800524e:	d00b      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b07      	cmp	r3, #7
 8005254:	d008      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d005      	beq.n	8005268 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0a      	cmp	r3, #10
 8005260:	d002      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d117      	bne.n	8005298 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b1e      	cmp	r3, #30
 800526c:	d803      	bhi.n	8005276 <RTC_DateUpdate+0x6a>
      {
        day++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005274:	e050      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d005      	beq.n	8005288 <RTC_DateUpdate+0x7c>
        {
          month++;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005282:	2301      	movs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005286:	e047      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800528c:	2301      	movs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
          year++;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3301      	adds	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005296:	e03f      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d008      	beq.n	80052b0 <RTC_DateUpdate+0xa4>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d005      	beq.n	80052b0 <RTC_DateUpdate+0xa4>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b09      	cmp	r3, #9
 80052a8:	d002      	beq.n	80052b0 <RTC_DateUpdate+0xa4>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b0b      	cmp	r3, #11
 80052ae:	d10c      	bne.n	80052ca <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b1d      	cmp	r3, #29
 80052b4:	d803      	bhi.n	80052be <RTC_DateUpdate+0xb2>
      {
        day++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052bc:	e02c      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	3301      	adds	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80052c4:	2301      	movs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052c8:	e026      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d123      	bne.n	8005318 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b1b      	cmp	r3, #27
 80052d4:	d803      	bhi.n	80052de <RTC_DateUpdate+0xd2>
      {
        day++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e01c      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b1c      	cmp	r3, #28
 80052e2:	d111      	bne.n	8005308 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f839 	bl	8005360 <RTC_IsLeapYear>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <RTC_DateUpdate+0xf0>
        {
          day++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e00d      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e007      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b1d      	cmp	r3, #29
 800530c:	d104      	bne.n	8005318 <RTC_DateUpdate+0x10c>
      {
        month++;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3301      	adds	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005314:	2301      	movs	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3301      	adds	r3, #1
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d38b      	bcc.n	800523e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	4619      	mov	r1, r3
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f000 f83b 	bl	80053c4 <RTC_WeekDayNum>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	731a      	strb	r2, [r3, #12]
}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	e01d      	b.n	80053b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <RTC_IsLeapYear+0x60>)
 800537e:	fba2 1203 	umull	r1, r2, r2, r3
 8005382:	0952      	lsrs	r2, r2, #5
 8005384:	2164      	movs	r1, #100	; 0x64
 8005386:	fb01 f202 	mul.w	r2, r1, r2
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	e00f      	b.n	80053b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <RTC_IsLeapYear+0x60>)
 800539a:	fba2 1203 	umull	r1, r2, r2, r3
 800539e:	09d2      	lsrs	r2, r2, #7
 80053a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80053a4:	fb01 f202 	mul.w	r2, r1, r2
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80053b4:	2300      	movs	r3, #0
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	51eb851f 	.word	0x51eb851f

080053c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
 80053d0:	4613      	mov	r3, r2
 80053d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80053e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d82d      	bhi.n	8005446 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <RTC_WeekDayNum+0xe4>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	085a      	lsrs	r2, r3, #1
 80053fe:	78bb      	ldrb	r3, [r7, #2]
 8005400:	441a      	add	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	441a      	add	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3b01      	subs	r3, #1
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	3b01      	subs	r3, #1
 8005412:	4926      	ldr	r1, [pc, #152]	; (80054ac <RTC_WeekDayNum+0xe8>)
 8005414:	fba1 1303 	umull	r1, r3, r1, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	3b01      	subs	r3, #1
 8005420:	4922      	ldr	r1, [pc, #136]	; (80054ac <RTC_WeekDayNum+0xe8>)
 8005422:	fba1 1303 	umull	r1, r3, r1, r3
 8005426:	09db      	lsrs	r3, r3, #7
 8005428:	4413      	add	r3, r2
 800542a:	1d1a      	adds	r2, r3, #4
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <RTC_WeekDayNum+0xec>)
 800542e:	fba3 1302 	umull	r1, r3, r3, r2
 8005432:	1ad1      	subs	r1, r2, r3
 8005434:	0849      	lsrs	r1, r1, #1
 8005436:	440b      	add	r3, r1
 8005438:	0899      	lsrs	r1, r3, #2
 800543a:	460b      	mov	r3, r1
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	1a5b      	subs	r3, r3, r1
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e029      	b.n	800549a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <RTC_WeekDayNum+0xe4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	085a      	lsrs	r2, r3, #1
 800545a:	78bb      	ldrb	r3, [r7, #2]
 800545c:	441a      	add	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	441a      	add	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4910      	ldr	r1, [pc, #64]	; (80054ac <RTC_WeekDayNum+0xe8>)
 800546c:	fba1 1303 	umull	r1, r3, r1, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	490d      	ldr	r1, [pc, #52]	; (80054ac <RTC_WeekDayNum+0xe8>)
 8005478:	fba1 1303 	umull	r1, r3, r1, r3
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	4413      	add	r3, r2
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <RTC_WeekDayNum+0xec>)
 8005484:	fba3 1302 	umull	r1, r3, r3, r2
 8005488:	1ad1      	subs	r1, r2, r3
 800548a:	0849      	lsrs	r1, r1, #1
 800548c:	440b      	add	r3, r1
 800548e:	0899      	lsrs	r1, r3, #2
 8005490:	460b      	mov	r3, r1
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	1a5b      	subs	r3, r3, r1
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	b2db      	uxtb	r3, r3
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	38e38e39 	.word	0x38e38e39
 80054ac:	51eb851f 	.word	0x51eb851f
 80054b0:	24924925 	.word	0x24924925

080054b4 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d027      	beq.n	800551a <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f824 	bl	8005534 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0204 	mvn.w	r2, #4
 80054f4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2204      	movs	r2, #4
 80054fa:	745a      	strb	r2, [r3, #17]
 80054fc:	e005      	b.n	800550a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f80f 	bl	8005522 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	605a      	str	r2, [r3, #4]
    }
  }
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e041      	b.n	80055dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fc fe45 	bl	80021fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f000 fd21 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e032      	b.n	8005662 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_TIM_Base_Start+0x88>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_Base_Start+0x48>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d009      	beq.n	800562c <HAL_TIM_Base_Start+0x48>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <HAL_TIM_Base_Start+0x8c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_Base_Start+0x48>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_TIM_Base_Start+0x90>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d111      	bne.n	8005650 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d010      	beq.n	8005660 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	e007      	b.n	8005660 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800

08005678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e03a      	b.n	8005706 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a18      	ldr	r2, [pc, #96]	; (8005710 <HAL_TIM_Base_Start_IT+0x98>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x58>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ba:	d009      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x58>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a14      	ldr	r2, [pc, #80]	; (8005714 <HAL_TIM_Base_Start_IT+0x9c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x58>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a13      	ldr	r2, [pc, #76]	; (8005718 <HAL_TIM_Base_Start_IT+0xa0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d010      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	e007      	b.n	8005704 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e041      	b.n	80057b2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f839 	bl	80057ba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f000 fc36 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e041      	b.n	8005862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f839 	bl	800586a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 fbde 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_TIM_PWM_Start+0x24>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e022      	b.n	80058e6 <HAL_TIM_PWM_Start+0x6a>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d109      	bne.n	80058ba <HAL_TIM_PWM_Start+0x3e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	e015      	b.n	80058e6 <HAL_TIM_PWM_Start+0x6a>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d109      	bne.n	80058d4 <HAL_TIM_PWM_Start+0x58>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e008      	b.n	80058e6 <HAL_TIM_PWM_Start+0x6a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e05e      	b.n	80059ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start+0x82>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058fc:	e013      	b.n	8005926 <HAL_TIM_PWM_Start+0xaa>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d104      	bne.n	800590e <HAL_TIM_PWM_Start+0x92>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590c:	e00b      	b.n	8005926 <HAL_TIM_PWM_Start+0xaa>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Start+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800591c:	e003      	b.n	8005926 <HAL_TIM_PWM_Start+0xaa>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2201      	movs	r2, #1
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fdcc 	bl	80064cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <HAL_TIM_PWM_Start+0x138>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d107      	bne.n	800594e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_TIM_PWM_Start+0x138>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIM_PWM_Start+0xfa>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d009      	beq.n	8005976 <HAL_TIM_PWM_Start+0xfa>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <HAL_TIM_PWM_Start+0x13c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIM_PWM_Start+0xfa>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a12      	ldr	r2, [pc, #72]	; (80059bc <HAL_TIM_PWM_Start+0x140>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d111      	bne.n	800599a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d010      	beq.n	80059aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	e007      	b.n	80059aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800

080059c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0202 	mvn.w	r2, #2
 80059ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fac7 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 faba 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fac9 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d122      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d11b      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0204 	mvn.w	r2, #4
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa9d 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa90 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa9f 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa73 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa66 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa75 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0210 	mvn.w	r2, #16
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2208      	movs	r2, #8
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa49 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa3c 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa4b 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0201 	mvn.w	r2, #1
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc f946 	bl	8001dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fd39 	bl	80065e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d10e      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa0f 	bl	8005fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d107      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0220 	mvn.w	r2, #32
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fd04 	bl	80065d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_OC_ConfigChannel+0x1a>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e046      	b.n	8005c78 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b0c      	cmp	r3, #12
 8005bf6:	d839      	bhi.n	8005c6c <HAL_TIM_OC_ConfigChannel+0x9c>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c35 	.word	0x08005c35
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005c6d 	.word	0x08005c6d
 8005c0c:	08005c6d 	.word	0x08005c6d
 8005c10:	08005c43 	.word	0x08005c43
 8005c14:	08005c6d 	.word	0x08005c6d
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005c6d 	.word	0x08005c6d
 8005c20:	08005c51 	.word	0x08005c51
 8005c24:	08005c6d 	.word	0x08005c6d
 8005c28:	08005c6d 	.word	0x08005c6d
 8005c2c:	08005c6d 	.word	0x08005c6d
 8005c30:	08005c5f 	.word	0x08005c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fa28 	bl	8006090 <TIM_OC1_SetConfig>
      break;
 8005c40:	e015      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fa87 	bl	800615c <TIM_OC2_SetConfig>
      break;
 8005c4e:	e00e      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 faea 	bl	8006230 <TIM_OC3_SetConfig>
      break;
 8005c5c:	e007      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fb4d 	bl	8006304 <TIM_OC4_SetConfig>
      break;
 8005c6a:	e000      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0ac      	b.n	8005df4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	f200 809f 	bhi.w	8005de8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005de9 	.word	0x08005de9
 8005cb8:	08005de9 	.word	0x08005de9
 8005cbc:	08005de9 	.word	0x08005de9
 8005cc0:	08005d25 	.word	0x08005d25
 8005cc4:	08005de9 	.word	0x08005de9
 8005cc8:	08005de9 	.word	0x08005de9
 8005ccc:	08005de9 	.word	0x08005de9
 8005cd0:	08005d67 	.word	0x08005d67
 8005cd4:	08005de9 	.word	0x08005de9
 8005cd8:	08005de9 	.word	0x08005de9
 8005cdc:	08005de9 	.word	0x08005de9
 8005ce0:	08005da7 	.word	0x08005da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f9d0 	bl	8006090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
      break;
 8005d22:	e062      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fa16 	bl	800615c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	619a      	str	r2, [r3, #24]
      break;
 8005d64:	e041      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fa5f 	bl	8006230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0208 	orr.w	r2, r2, #8
 8005d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0204 	bic.w	r2, r2, #4
 8005d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69d9      	ldr	r1, [r3, #28]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	61da      	str	r2, [r3, #28]
      break;
 8005da4:	e021      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 faa9 	bl	8006304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69d9      	ldr	r1, [r3, #28]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	61da      	str	r2, [r3, #28]
      break;
 8005de6:	e000      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIM_ConfigClockSource+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e0b3      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x180>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4c:	d03e      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0xd0>
 8005e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e52:	f200 8087 	bhi.w	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	f000 8085 	beq.w	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e62:	d87f      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e64:	2b70      	cmp	r3, #112	; 0x70
 8005e66:	d01a      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0xa2>
 8005e68:	2b70      	cmp	r3, #112	; 0x70
 8005e6a:	d87b      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e6c:	2b60      	cmp	r3, #96	; 0x60
 8005e6e:	d050      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x116>
 8005e70:	2b60      	cmp	r3, #96	; 0x60
 8005e72:	d877      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e74:	2b50      	cmp	r3, #80	; 0x50
 8005e76:	d03c      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xf6>
 8005e78:	2b50      	cmp	r3, #80	; 0x50
 8005e7a:	d873      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d058      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x136>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d86f      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e84:	2b30      	cmp	r3, #48	; 0x30
 8005e86:	d064      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x156>
 8005e88:	2b30      	cmp	r3, #48	; 0x30
 8005e8a:	d86b      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d060      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x156>
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d867      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05c      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x156>
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d05a      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e9c:	e062      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6899      	ldr	r1, [r3, #8]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f000 faee 	bl	800648e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ec0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	609a      	str	r2, [r3, #8]
      break;
 8005eca:	e04e      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6899      	ldr	r1, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f000 fad7 	bl	800648e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eee:	609a      	str	r2, [r3, #8]
      break;
 8005ef0:	e03b      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f000 fa4e 	bl	80063a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2150      	movs	r1, #80	; 0x50
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 faa5 	bl	800645a <TIM_ITRx_SetConfig>
      break;
 8005f10:	e02b      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 fa6c 	bl	80063fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2160      	movs	r1, #96	; 0x60
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fa95 	bl	800645a <TIM_ITRx_SetConfig>
      break;
 8005f30:	e01b      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 fa2e 	bl	80063a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2140      	movs	r1, #64	; 0x40
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fa85 	bl	800645a <TIM_ITRx_SetConfig>
      break;
 8005f50:	e00b      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f000 fa7c 	bl	800645a <TIM_ITRx_SetConfig>
        break;
 8005f62:	e002      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a29      	ldr	r2, [pc, #164]	; (8006084 <TIM_Base_SetConfig+0xb8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_Base_SetConfig+0x30>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d007      	beq.n	8005ffc <TIM_Base_SetConfig+0x30>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a26      	ldr	r2, [pc, #152]	; (8006088 <TIM_Base_SetConfig+0xbc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_Base_SetConfig+0x30>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a25      	ldr	r2, [pc, #148]	; (800608c <TIM_Base_SetConfig+0xc0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <TIM_Base_SetConfig+0xb8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_Base_SetConfig+0x62>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d007      	beq.n	800602e <TIM_Base_SetConfig+0x62>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <TIM_Base_SetConfig+0xbc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_Base_SetConfig+0x62>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a18      	ldr	r2, [pc, #96]	; (800608c <TIM_Base_SetConfig+0xc0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a07      	ldr	r2, [pc, #28]	; (8006084 <TIM_Base_SetConfig+0xb8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d103      	bne.n	8006074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	615a      	str	r2, [r3, #20]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800

08006090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 0302 	bic.w	r3, r3, #2
 80060d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <TIM_OC1_SetConfig+0xc8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10c      	bne.n	8006106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0308 	bic.w	r3, r3, #8
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 0304 	bic.w	r3, r3, #4
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <TIM_OC1_SetConfig+0xc8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d111      	bne.n	8006132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00

0800615c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0320 	bic.w	r3, r3, #32
 80061a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	; (800622c <TIM_OC2_SetConfig+0xd0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d10d      	bne.n	80061d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a14      	ldr	r2, [pc, #80]	; (800622c <TIM_OC2_SetConfig+0xd0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d113      	bne.n	8006208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00

08006230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <TIM_OC3_SetConfig+0xd0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d10d      	bne.n	80062aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a14      	ldr	r2, [pc, #80]	; (8006300 <TIM_OC3_SetConfig+0xd0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d113      	bne.n	80062da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	621a      	str	r2, [r3, #32]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00

08006304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	031b      	lsls	r3, r3, #12
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0f      	ldr	r2, [pc, #60]	; (800639c <TIM_OC4_SetConfig+0x98>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d109      	bne.n	8006378 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00

080063a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f023 0201 	bic.w	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 030a 	bic.w	r3, r3, #10
 80063dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f023 0210 	bic.w	r2, r3, #16
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	031b      	lsls	r3, r3, #12
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006438:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr

0800645a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	f043 0307 	orr.w	r3, r3, #7
 800647c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr

0800648e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	021a      	lsls	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	609a      	str	r2, [r3, #8]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2201      	movs	r2, #1
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006528:	2302      	movs	r3, #2
 800652a:	e046      	b.n	80065ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006578:	d009      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a10      	ldr	r2, [pc, #64]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10c      	bne.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4313      	orrs	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800

080065d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e03f      	b.n	8006686 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fe82 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f905 	bl	8006848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800664c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800665c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b08a      	sub	sp, #40	; 0x28
 8006692:	af02      	add	r7, sp, #8
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d17c      	bne.n	80067a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_UART_Transmit+0x2c>
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e075      	b.n	80067aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_UART_Transmit+0x3e>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e06e      	b.n	80067aa <HAL_UART_Transmit+0x11c>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2221      	movs	r2, #33	; 0x21
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066e2:	f7fb ffe5 	bl	80026b0 <HAL_GetTick>
 80066e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	88fa      	ldrh	r2, [r7, #6]
 80066f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	d108      	bne.n	8006710 <HAL_UART_Transmit+0x82>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	e003      	b.n	8006718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006720:	e02a      	b.n	8006778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2200      	movs	r2, #0
 800672a:	2180      	movs	r1, #128	; 0x80
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f840 	bl	80067b2 <UART_WaitOnFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e036      	b.n	80067aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	3302      	adds	r3, #2
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	e007      	b.n	800676a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1cf      	bne.n	8006722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	2140      	movs	r1, #64	; 0x40
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f810 	bl	80067b2 <UART_WaitOnFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e006      	b.n	80067aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	4613      	mov	r3, r2
 80067c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c2:	e02c      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d028      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80067d2:	f7fb ff6d 	bl	80026b0 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d21d      	bcs.n	800681e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695a      	ldr	r2, [r3, #20]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e00f      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	429a      	cmp	r2, r3
 800683a:	d0c3      	beq.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006882:	f023 030c 	bic.w	r3, r3, #12
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	430b      	orrs	r3, r1
 800688e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	; (800695c <UART_SetConfig+0x114>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068b0:	f7fd fea6 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	e002      	b.n	80068be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fd fe8e 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 80068bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009a      	lsls	r2, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d4:	4a22      	ldr	r2, [pc, #136]	; (8006960 <UART_SetConfig+0x118>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	0119      	lsls	r1, r3, #4
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	009a      	lsls	r2, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068f4:	4b1a      	ldr	r3, [pc, #104]	; (8006960 <UART_SetConfig+0x118>)
 80068f6:	fba3 0302 	umull	r0, r3, r3, r2
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	2064      	movs	r0, #100	; 0x64
 80068fe:	fb00 f303 	mul.w	r3, r0, r3
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	3332      	adds	r3, #50	; 0x32
 8006908:	4a15      	ldr	r2, [pc, #84]	; (8006960 <UART_SetConfig+0x118>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006914:	4419      	add	r1, r3
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009a      	lsls	r2, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	fbb2 f2f3 	udiv	r2, r2, r3
 800692c:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <UART_SetConfig+0x118>)
 800692e:	fba3 0302 	umull	r0, r3, r3, r2
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	2064      	movs	r0, #100	; 0x64
 8006936:	fb00 f303 	mul.w	r3, r0, r3
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	3332      	adds	r3, #50	; 0x32
 8006940:	4a07      	ldr	r2, [pc, #28]	; (8006960 <UART_SetConfig+0x118>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	440a      	add	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40013800 	.word	0x40013800
 8006960:	51eb851f 	.word	0x51eb851f

08006964 <__errno>:
 8006964:	4b01      	ldr	r3, [pc, #4]	; (800696c <__errno+0x8>)
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	2000000c 	.word	0x2000000c

08006970 <__libc_init_array>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	2600      	movs	r6, #0
 8006974:	4d0c      	ldr	r5, [pc, #48]	; (80069a8 <__libc_init_array+0x38>)
 8006976:	4c0d      	ldr	r4, [pc, #52]	; (80069ac <__libc_init_array+0x3c>)
 8006978:	1b64      	subs	r4, r4, r5
 800697a:	10a4      	asrs	r4, r4, #2
 800697c:	42a6      	cmp	r6, r4
 800697e:	d109      	bne.n	8006994 <__libc_init_array+0x24>
 8006980:	f004 fc50 	bl	800b224 <_init>
 8006984:	2600      	movs	r6, #0
 8006986:	4d0a      	ldr	r5, [pc, #40]	; (80069b0 <__libc_init_array+0x40>)
 8006988:	4c0a      	ldr	r4, [pc, #40]	; (80069b4 <__libc_init_array+0x44>)
 800698a:	1b64      	subs	r4, r4, r5
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	42a6      	cmp	r6, r4
 8006990:	d105      	bne.n	800699e <__libc_init_array+0x2e>
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	f855 3b04 	ldr.w	r3, [r5], #4
 8006998:	4798      	blx	r3
 800699a:	3601      	adds	r6, #1
 800699c:	e7ee      	b.n	800697c <__libc_init_array+0xc>
 800699e:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a2:	4798      	blx	r3
 80069a4:	3601      	adds	r6, #1
 80069a6:	e7f2      	b.n	800698e <__libc_init_array+0x1e>
 80069a8:	0800b754 	.word	0x0800b754
 80069ac:	0800b754 	.word	0x0800b754
 80069b0:	0800b754 	.word	0x0800b754
 80069b4:	0800b758 	.word	0x0800b758

080069b8 <memset>:
 80069b8:	4603      	mov	r3, r0
 80069ba:	4402      	add	r2, r0
 80069bc:	4293      	cmp	r3, r2
 80069be:	d100      	bne.n	80069c2 <memset+0xa>
 80069c0:	4770      	bx	lr
 80069c2:	f803 1b01 	strb.w	r1, [r3], #1
 80069c6:	e7f9      	b.n	80069bc <memset+0x4>

080069c8 <__cvt>:
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ce:	461f      	mov	r7, r3
 80069d0:	bfbb      	ittet	lt
 80069d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	461f      	movlt	r7, r3
 80069d8:	2300      	movge	r3, #0
 80069da:	232d      	movlt	r3, #45	; 0x2d
 80069dc:	b088      	sub	sp, #32
 80069de:	4614      	mov	r4, r2
 80069e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80069e4:	7013      	strb	r3, [r2, #0]
 80069e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80069ec:	f023 0820 	bic.w	r8, r3, #32
 80069f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069f4:	d005      	beq.n	8006a02 <__cvt+0x3a>
 80069f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069fa:	d100      	bne.n	80069fe <__cvt+0x36>
 80069fc:	3501      	adds	r5, #1
 80069fe:	2302      	movs	r3, #2
 8006a00:	e000      	b.n	8006a04 <__cvt+0x3c>
 8006a02:	2303      	movs	r3, #3
 8006a04:	aa07      	add	r2, sp, #28
 8006a06:	9204      	str	r2, [sp, #16]
 8006a08:	aa06      	add	r2, sp, #24
 8006a0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a0e:	e9cd 3500 	strd	r3, r5, [sp]
 8006a12:	4622      	mov	r2, r4
 8006a14:	463b      	mov	r3, r7
 8006a16:	f001 fd83 	bl	8008520 <_dtoa_r>
 8006a1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a1e:	4606      	mov	r6, r0
 8006a20:	d102      	bne.n	8006a28 <__cvt+0x60>
 8006a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a24:	07db      	lsls	r3, r3, #31
 8006a26:	d522      	bpl.n	8006a6e <__cvt+0xa6>
 8006a28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a2c:	eb06 0905 	add.w	r9, r6, r5
 8006a30:	d110      	bne.n	8006a54 <__cvt+0x8c>
 8006a32:	7833      	ldrb	r3, [r6, #0]
 8006a34:	2b30      	cmp	r3, #48	; 0x30
 8006a36:	d10a      	bne.n	8006a4e <__cvt+0x86>
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4639      	mov	r1, r7
 8006a40:	f7f9 ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8006a44:	b918      	cbnz	r0, 8006a4e <__cvt+0x86>
 8006a46:	f1c5 0501 	rsb	r5, r5, #1
 8006a4a:	f8ca 5000 	str.w	r5, [sl]
 8006a4e:	f8da 3000 	ldr.w	r3, [sl]
 8006a52:	4499      	add	r9, r3
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	4620      	mov	r0, r4
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7f9 ffa4 	bl	80009a8 <__aeabi_dcmpeq>
 8006a60:	b108      	cbz	r0, 8006a66 <__cvt+0x9e>
 8006a62:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a66:	2230      	movs	r2, #48	; 0x30
 8006a68:	9b07      	ldr	r3, [sp, #28]
 8006a6a:	454b      	cmp	r3, r9
 8006a6c:	d307      	bcc.n	8006a7e <__cvt+0xb6>
 8006a6e:	4630      	mov	r0, r6
 8006a70:	9b07      	ldr	r3, [sp, #28]
 8006a72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a74:	1b9b      	subs	r3, r3, r6
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	b008      	add	sp, #32
 8006a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7e:	1c59      	adds	r1, r3, #1
 8006a80:	9107      	str	r1, [sp, #28]
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e7f0      	b.n	8006a68 <__cvt+0xa0>

08006a86 <__exponent>:
 8006a86:	4603      	mov	r3, r0
 8006a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	f803 2b02 	strb.w	r2, [r3], #2
 8006a90:	bfb6      	itet	lt
 8006a92:	222d      	movlt	r2, #45	; 0x2d
 8006a94:	222b      	movge	r2, #43	; 0x2b
 8006a96:	4249      	neglt	r1, r1
 8006a98:	2909      	cmp	r1, #9
 8006a9a:	7042      	strb	r2, [r0, #1]
 8006a9c:	dd2b      	ble.n	8006af6 <__exponent+0x70>
 8006a9e:	f10d 0407 	add.w	r4, sp, #7
 8006aa2:	46a4      	mov	ip, r4
 8006aa4:	270a      	movs	r7, #10
 8006aa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006aaa:	460a      	mov	r2, r1
 8006aac:	46a6      	mov	lr, r4
 8006aae:	fb07 1516 	mls	r5, r7, r6, r1
 8006ab2:	2a63      	cmp	r2, #99	; 0x63
 8006ab4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006ab8:	4631      	mov	r1, r6
 8006aba:	f104 34ff 	add.w	r4, r4, #4294967295
 8006abe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ac2:	dcf0      	bgt.n	8006aa6 <__exponent+0x20>
 8006ac4:	3130      	adds	r1, #48	; 0x30
 8006ac6:	f1ae 0502 	sub.w	r5, lr, #2
 8006aca:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ace:	4629      	mov	r1, r5
 8006ad0:	1c44      	adds	r4, r0, #1
 8006ad2:	4561      	cmp	r1, ip
 8006ad4:	d30a      	bcc.n	8006aec <__exponent+0x66>
 8006ad6:	f10d 0209 	add.w	r2, sp, #9
 8006ada:	eba2 020e 	sub.w	r2, r2, lr
 8006ade:	4565      	cmp	r5, ip
 8006ae0:	bf88      	it	hi
 8006ae2:	2200      	movhi	r2, #0
 8006ae4:	4413      	add	r3, r2
 8006ae6:	1a18      	subs	r0, r3, r0
 8006ae8:	b003      	add	sp, #12
 8006aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006af0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006af4:	e7ed      	b.n	8006ad2 <__exponent+0x4c>
 8006af6:	2330      	movs	r3, #48	; 0x30
 8006af8:	3130      	adds	r1, #48	; 0x30
 8006afa:	7083      	strb	r3, [r0, #2]
 8006afc:	70c1      	strb	r1, [r0, #3]
 8006afe:	1d03      	adds	r3, r0, #4
 8006b00:	e7f1      	b.n	8006ae6 <__exponent+0x60>
	...

08006b04 <_printf_float>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	b091      	sub	sp, #68	; 0x44
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b10:	4616      	mov	r6, r2
 8006b12:	461f      	mov	r7, r3
 8006b14:	4605      	mov	r5, r0
 8006b16:	f002 fe57 	bl	80097c8 <_localeconv_r>
 8006b1a:	6803      	ldr	r3, [r0, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b20:	f7f9 fb16 	bl	8000150 <strlen>
 8006b24:	2300      	movs	r3, #0
 8006b26:	930e      	str	r3, [sp, #56]	; 0x38
 8006b28:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2c:	900a      	str	r0, [sp, #40]	; 0x28
 8006b2e:	3307      	adds	r3, #7
 8006b30:	f023 0307 	bic.w	r3, r3, #7
 8006b34:	f103 0208 	add.w	r2, r3, #8
 8006b38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b3c:	f8d4 b000 	ldr.w	fp, [r4]
 8006b40:	f8c8 2000 	str.w	r2, [r8]
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006b50:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4b9c      	ldr	r3, [pc, #624]	; (8006dd0 <_printf_float+0x2cc>)
 8006b5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b60:	f7f9 ff54 	bl	8000a0c <__aeabi_dcmpun>
 8006b64:	bb70      	cbnz	r0, 8006bc4 <_printf_float+0xc0>
 8006b66:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4b98      	ldr	r3, [pc, #608]	; (8006dd0 <_printf_float+0x2cc>)
 8006b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b70:	f7f9 ff2e 	bl	80009d0 <__aeabi_dcmple>
 8006b74:	bb30      	cbnz	r0, 8006bc4 <_printf_float+0xc0>
 8006b76:	2200      	movs	r2, #0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4651      	mov	r1, sl
 8006b7e:	f7f9 ff1d 	bl	80009bc <__aeabi_dcmplt>
 8006b82:	b110      	cbz	r0, 8006b8a <_printf_float+0x86>
 8006b84:	232d      	movs	r3, #45	; 0x2d
 8006b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8a:	4b92      	ldr	r3, [pc, #584]	; (8006dd4 <_printf_float+0x2d0>)
 8006b8c:	4892      	ldr	r0, [pc, #584]	; (8006dd8 <_printf_float+0x2d4>)
 8006b8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b92:	bf94      	ite	ls
 8006b94:	4698      	movls	r8, r3
 8006b96:	4680      	movhi	r8, r0
 8006b98:	2303      	movs	r3, #3
 8006b9a:	f04f 0a00 	mov.w	sl, #0
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	f02b 0304 	bic.w	r3, fp, #4
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	4633      	mov	r3, r6
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	9700      	str	r7, [sp, #0]
 8006bae:	aa0f      	add	r2, sp, #60	; 0x3c
 8006bb0:	f000 f9d4 	bl	8006f5c <_printf_common>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	f040 8090 	bne.w	8006cda <_printf_float+0x1d6>
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbe:	b011      	add	sp, #68	; 0x44
 8006bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	4653      	mov	r3, sl
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4651      	mov	r1, sl
 8006bcc:	f7f9 ff1e 	bl	8000a0c <__aeabi_dcmpun>
 8006bd0:	b148      	cbz	r0, 8006be6 <_printf_float+0xe2>
 8006bd2:	f1ba 0f00 	cmp.w	sl, #0
 8006bd6:	bfb8      	it	lt
 8006bd8:	232d      	movlt	r3, #45	; 0x2d
 8006bda:	4880      	ldr	r0, [pc, #512]	; (8006ddc <_printf_float+0x2d8>)
 8006bdc:	bfb8      	it	lt
 8006bde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006be2:	4b7f      	ldr	r3, [pc, #508]	; (8006de0 <_printf_float+0x2dc>)
 8006be4:	e7d3      	b.n	8006b8e <_printf_float+0x8a>
 8006be6:	6863      	ldr	r3, [r4, #4]
 8006be8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	d142      	bne.n	8006c76 <_printf_float+0x172>
 8006bf0:	2306      	movs	r3, #6
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	9206      	str	r2, [sp, #24]
 8006bf8:	aa0e      	add	r2, sp, #56	; 0x38
 8006bfa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006bfe:	aa0d      	add	r2, sp, #52	; 0x34
 8006c00:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c04:	9203      	str	r2, [sp, #12]
 8006c06:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	4642      	mov	r2, r8
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4628      	mov	r0, r5
 8006c18:	4653      	mov	r3, sl
 8006c1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c1c:	f7ff fed4 	bl	80069c8 <__cvt>
 8006c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c22:	4680      	mov	r8, r0
 8006c24:	2947      	cmp	r1, #71	; 0x47
 8006c26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c28:	d108      	bne.n	8006c3c <_printf_float+0x138>
 8006c2a:	1cc8      	adds	r0, r1, #3
 8006c2c:	db02      	blt.n	8006c34 <_printf_float+0x130>
 8006c2e:	6863      	ldr	r3, [r4, #4]
 8006c30:	4299      	cmp	r1, r3
 8006c32:	dd40      	ble.n	8006cb6 <_printf_float+0x1b2>
 8006c34:	f1a9 0902 	sub.w	r9, r9, #2
 8006c38:	fa5f f989 	uxtb.w	r9, r9
 8006c3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c40:	d81f      	bhi.n	8006c82 <_printf_float+0x17e>
 8006c42:	464a      	mov	r2, r9
 8006c44:	3901      	subs	r1, #1
 8006c46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c4a:	910d      	str	r1, [sp, #52]	; 0x34
 8006c4c:	f7ff ff1b 	bl	8006a86 <__exponent>
 8006c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c52:	4682      	mov	sl, r0
 8006c54:	1813      	adds	r3, r2, r0
 8006c56:	2a01      	cmp	r2, #1
 8006c58:	6123      	str	r3, [r4, #16]
 8006c5a:	dc02      	bgt.n	8006c62 <_printf_float+0x15e>
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	07d2      	lsls	r2, r2, #31
 8006c60:	d501      	bpl.n	8006c66 <_printf_float+0x162>
 8006c62:	3301      	adds	r3, #1
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d09b      	beq.n	8006ba6 <_printf_float+0xa2>
 8006c6e:	232d      	movs	r3, #45	; 0x2d
 8006c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c74:	e797      	b.n	8006ba6 <_printf_float+0xa2>
 8006c76:	2947      	cmp	r1, #71	; 0x47
 8006c78:	d1bc      	bne.n	8006bf4 <_printf_float+0xf0>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1ba      	bne.n	8006bf4 <_printf_float+0xf0>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e7b7      	b.n	8006bf2 <_printf_float+0xee>
 8006c82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c86:	d118      	bne.n	8006cba <_printf_float+0x1b6>
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	dd0b      	ble.n	8006ca6 <_printf_float+0x1a2>
 8006c8e:	6121      	str	r1, [r4, #16]
 8006c90:	b913      	cbnz	r3, 8006c98 <_printf_float+0x194>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	07d0      	lsls	r0, r2, #31
 8006c96:	d502      	bpl.n	8006c9e <_printf_float+0x19a>
 8006c98:	3301      	adds	r3, #1
 8006c9a:	440b      	add	r3, r1
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	f04f 0a00 	mov.w	sl, #0
 8006ca2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ca4:	e7df      	b.n	8006c66 <_printf_float+0x162>
 8006ca6:	b913      	cbnz	r3, 8006cae <_printf_float+0x1aa>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	07d2      	lsls	r2, r2, #31
 8006cac:	d501      	bpl.n	8006cb2 <_printf_float+0x1ae>
 8006cae:	3302      	adds	r3, #2
 8006cb0:	e7f4      	b.n	8006c9c <_printf_float+0x198>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e7f2      	b.n	8006c9c <_printf_float+0x198>
 8006cb6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	db05      	blt.n	8006ccc <_printf_float+0x1c8>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	6121      	str	r1, [r4, #16]
 8006cc4:	07d8      	lsls	r0, r3, #31
 8006cc6:	d5ea      	bpl.n	8006c9e <_printf_float+0x19a>
 8006cc8:	1c4b      	adds	r3, r1, #1
 8006cca:	e7e7      	b.n	8006c9c <_printf_float+0x198>
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	bfcc      	ite	gt
 8006cd0:	2201      	movgt	r2, #1
 8006cd2:	f1c1 0202 	rsble	r2, r1, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	e7e0      	b.n	8006c9c <_printf_float+0x198>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	055a      	lsls	r2, r3, #21
 8006cde:	d407      	bmi.n	8006cf0 <_printf_float+0x1ec>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	d12b      	bne.n	8006d46 <_printf_float+0x242>
 8006cee:	e764      	b.n	8006bba <_printf_float+0xb6>
 8006cf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cf4:	f240 80dd 	bls.w	8006eb2 <_printf_float+0x3ae>
 8006cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f7f9 fe52 	bl	80009a8 <__aeabi_dcmpeq>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d033      	beq.n	8006d70 <_printf_float+0x26c>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <_printf_float+0x2e0>)
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	f43f af51 	beq.w	8006bba <_printf_float+0xb6>
 8006d18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	db02      	blt.n	8006d26 <_printf_float+0x222>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	07d8      	lsls	r0, r3, #31
 8006d24:	d50f      	bpl.n	8006d46 <_printf_float+0x242>
 8006d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	f43f af42 	beq.w	8006bba <_printf_float+0xb6>
 8006d36:	f04f 0800 	mov.w	r8, #0
 8006d3a:	f104 091a 	add.w	r9, r4, #26
 8006d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d40:	3b01      	subs	r3, #1
 8006d42:	4543      	cmp	r3, r8
 8006d44:	dc09      	bgt.n	8006d5a <_printf_float+0x256>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	079b      	lsls	r3, r3, #30
 8006d4a:	f100 8102 	bmi.w	8006f52 <_printf_float+0x44e>
 8006d4e:	68e0      	ldr	r0, [r4, #12]
 8006d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d52:	4298      	cmp	r0, r3
 8006d54:	bfb8      	it	lt
 8006d56:	4618      	movlt	r0, r3
 8006d58:	e731      	b.n	8006bbe <_printf_float+0xba>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	464a      	mov	r2, r9
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f af28 	beq.w	8006bba <_printf_float+0xb6>
 8006d6a:	f108 0801 	add.w	r8, r8, #1
 8006d6e:	e7e6      	b.n	8006d3e <_printf_float+0x23a>
 8006d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dc38      	bgt.n	8006de8 <_printf_float+0x2e4>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <_printf_float+0x2e0>)
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	f43f af1a 	beq.w	8006bba <_printf_float+0xb6>
 8006d86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d102      	bne.n	8006d94 <_printf_float+0x290>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	07d9      	lsls	r1, r3, #31
 8006d92:	d5d8      	bpl.n	8006d46 <_printf_float+0x242>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f af0b 	beq.w	8006bba <_printf_float+0xb6>
 8006da4:	f04f 0900 	mov.w	r9, #0
 8006da8:	f104 0a1a 	add.w	sl, r4, #26
 8006dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dae:	425b      	negs	r3, r3
 8006db0:	454b      	cmp	r3, r9
 8006db2:	dc01      	bgt.n	8006db8 <_printf_float+0x2b4>
 8006db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db6:	e794      	b.n	8006ce2 <_printf_float+0x1de>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f aef9 	beq.w	8006bba <_printf_float+0xb6>
 8006dc8:	f109 0901 	add.w	r9, r9, #1
 8006dcc:	e7ee      	b.n	8006dac <_printf_float+0x2a8>
 8006dce:	bf00      	nop
 8006dd0:	7fefffff 	.word	0x7fefffff
 8006dd4:	0800b2b0 	.word	0x0800b2b0
 8006dd8:	0800b2b4 	.word	0x0800b2b4
 8006ddc:	0800b2bc 	.word	0x0800b2bc
 8006de0:	0800b2b8 	.word	0x0800b2b8
 8006de4:	0800b2c0 	.word	0x0800b2c0
 8006de8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bfa8      	it	ge
 8006df0:	461a      	movge	r2, r3
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	4691      	mov	r9, r2
 8006df6:	dc37      	bgt.n	8006e68 <_printf_float+0x364>
 8006df8:	f04f 0b00 	mov.w	fp, #0
 8006dfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e00:	f104 021a 	add.w	r2, r4, #26
 8006e04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e08:	ebaa 0309 	sub.w	r3, sl, r9
 8006e0c:	455b      	cmp	r3, fp
 8006e0e:	dc33      	bgt.n	8006e78 <_printf_float+0x374>
 8006e10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e14:	429a      	cmp	r2, r3
 8006e16:	db3b      	blt.n	8006e90 <_printf_float+0x38c>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	07da      	lsls	r2, r3, #31
 8006e1c:	d438      	bmi.n	8006e90 <_printf_float+0x38c>
 8006e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e22:	eba3 020a 	sub.w	r2, r3, sl
 8006e26:	eba3 0901 	sub.w	r9, r3, r1
 8006e2a:	4591      	cmp	r9, r2
 8006e2c:	bfa8      	it	ge
 8006e2e:	4691      	movge	r9, r2
 8006e30:	f1b9 0f00 	cmp.w	r9, #0
 8006e34:	dc34      	bgt.n	8006ea0 <_printf_float+0x39c>
 8006e36:	f04f 0800 	mov.w	r8, #0
 8006e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e3e:	f104 0a1a 	add.w	sl, r4, #26
 8006e42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	eba3 0309 	sub.w	r3, r3, r9
 8006e4c:	4543      	cmp	r3, r8
 8006e4e:	f77f af7a 	ble.w	8006d46 <_printf_float+0x242>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4652      	mov	r2, sl
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b8      	blx	r7
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	f43f aeac 	beq.w	8006bba <_printf_float+0xb6>
 8006e62:	f108 0801 	add.w	r8, r8, #1
 8006e66:	e7ec      	b.n	8006e42 <_printf_float+0x33e>
 8006e68:	4613      	mov	r3, r2
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	d1c0      	bne.n	8006df8 <_printf_float+0x2f4>
 8006e76:	e6a0      	b.n	8006bba <_printf_float+0xb6>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	f43f ae99 	beq.w	8006bba <_printf_float+0xb6>
 8006e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e8a:	f10b 0b01 	add.w	fp, fp, #1
 8006e8e:	e7b9      	b.n	8006e04 <_printf_float+0x300>
 8006e90:	4631      	mov	r1, r6
 8006e92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d1bf      	bne.n	8006e1e <_printf_float+0x31a>
 8006e9e:	e68c      	b.n	8006bba <_printf_float+0xb6>
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	eb08 020a 	add.w	r2, r8, sl
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	d1c2      	bne.n	8006e36 <_printf_float+0x332>
 8006eb0:	e683      	b.n	8006bba <_printf_float+0xb6>
 8006eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb4:	2a01      	cmp	r2, #1
 8006eb6:	dc01      	bgt.n	8006ebc <_printf_float+0x3b8>
 8006eb8:	07db      	lsls	r3, r3, #31
 8006eba:	d537      	bpl.n	8006f2c <_printf_float+0x428>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f ae77 	beq.w	8006bba <_printf_float+0xb6>
 8006ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f43f ae6f 	beq.w	8006bba <_printf_float+0xb6>
 8006edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8006ee8:	b9d8      	cbnz	r0, 8006f22 <_printf_float+0x41e>
 8006eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eec:	f108 0201 	add.w	r2, r8, #1
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d10e      	bne.n	8006f1a <_printf_float+0x416>
 8006efc:	e65d      	b.n	8006bba <_printf_float+0xb6>
 8006efe:	2301      	movs	r3, #1
 8006f00:	464a      	mov	r2, r9
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f ae56 	beq.w	8006bba <_printf_float+0xb6>
 8006f0e:	f108 0801 	add.w	r8, r8, #1
 8006f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f14:	3b01      	subs	r3, #1
 8006f16:	4543      	cmp	r3, r8
 8006f18:	dcf1      	bgt.n	8006efe <_printf_float+0x3fa>
 8006f1a:	4653      	mov	r3, sl
 8006f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f20:	e6e0      	b.n	8006ce4 <_printf_float+0x1e0>
 8006f22:	f04f 0800 	mov.w	r8, #0
 8006f26:	f104 091a 	add.w	r9, r4, #26
 8006f2a:	e7f2      	b.n	8006f12 <_printf_float+0x40e>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4642      	mov	r2, r8
 8006f30:	e7df      	b.n	8006ef2 <_printf_float+0x3ee>
 8006f32:	2301      	movs	r3, #1
 8006f34:	464a      	mov	r2, r9
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f ae3c 	beq.w	8006bba <_printf_float+0xb6>
 8006f42:	f108 0801 	add.w	r8, r8, #1
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f4a:	1a5b      	subs	r3, r3, r1
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	dcf0      	bgt.n	8006f32 <_printf_float+0x42e>
 8006f50:	e6fd      	b.n	8006d4e <_printf_float+0x24a>
 8006f52:	f04f 0800 	mov.w	r8, #0
 8006f56:	f104 0919 	add.w	r9, r4, #25
 8006f5a:	e7f4      	b.n	8006f46 <_printf_float+0x442>

08006f5c <_printf_common>:
 8006f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	4616      	mov	r6, r2
 8006f62:	4699      	mov	r9, r3
 8006f64:	688a      	ldr	r2, [r1, #8]
 8006f66:	690b      	ldr	r3, [r1, #16]
 8006f68:	4607      	mov	r7, r0
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	bfb8      	it	lt
 8006f6e:	4613      	movlt	r3, r2
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f76:	460c      	mov	r4, r1
 8006f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f7c:	b10a      	cbz	r2, 8006f82 <_printf_common+0x26>
 8006f7e:	3301      	adds	r3, #1
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	0699      	lsls	r1, r3, #26
 8006f86:	bf42      	ittt	mi
 8006f88:	6833      	ldrmi	r3, [r6, #0]
 8006f8a:	3302      	addmi	r3, #2
 8006f8c:	6033      	strmi	r3, [r6, #0]
 8006f8e:	6825      	ldr	r5, [r4, #0]
 8006f90:	f015 0506 	ands.w	r5, r5, #6
 8006f94:	d106      	bne.n	8006fa4 <_printf_common+0x48>
 8006f96:	f104 0a19 	add.w	sl, r4, #25
 8006f9a:	68e3      	ldr	r3, [r4, #12]
 8006f9c:	6832      	ldr	r2, [r6, #0]
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	dc28      	bgt.n	8006ff6 <_printf_common+0x9a>
 8006fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa8:	1e13      	subs	r3, r2, #0
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	bf18      	it	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	0692      	lsls	r2, r2, #26
 8006fb2:	d42d      	bmi.n	8007010 <_printf_common+0xb4>
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fbc:	47c0      	blx	r8
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d020      	beq.n	8007004 <_printf_common+0xa8>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	68e5      	ldr	r5, [r4, #12]
 8006fc6:	f003 0306 	and.w	r3, r3, #6
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	bf18      	it	ne
 8006fce:	2500      	movne	r5, #0
 8006fd0:	6832      	ldr	r2, [r6, #0]
 8006fd2:	f04f 0600 	mov.w	r6, #0
 8006fd6:	68a3      	ldr	r3, [r4, #8]
 8006fd8:	bf08      	it	eq
 8006fda:	1aad      	subeq	r5, r5, r2
 8006fdc:	6922      	ldr	r2, [r4, #16]
 8006fde:	bf08      	it	eq
 8006fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfc4      	itt	gt
 8006fe8:	1a9b      	subgt	r3, r3, r2
 8006fea:	18ed      	addgt	r5, r5, r3
 8006fec:	341a      	adds	r4, #26
 8006fee:	42b5      	cmp	r5, r6
 8006ff0:	d11a      	bne.n	8007028 <_printf_common+0xcc>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e008      	b.n	8007008 <_printf_common+0xac>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	47c0      	blx	r8
 8007000:	3001      	adds	r0, #1
 8007002:	d103      	bne.n	800700c <_printf_common+0xb0>
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700c:	3501      	adds	r5, #1
 800700e:	e7c4      	b.n	8006f9a <_printf_common+0x3e>
 8007010:	2030      	movs	r0, #48	; 0x30
 8007012:	18e1      	adds	r1, r4, r3
 8007014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800701e:	4422      	add	r2, r4
 8007020:	3302      	adds	r3, #2
 8007022:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007026:	e7c5      	b.n	8006fb4 <_printf_common+0x58>
 8007028:	2301      	movs	r3, #1
 800702a:	4622      	mov	r2, r4
 800702c:	4649      	mov	r1, r9
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	3001      	adds	r0, #1
 8007034:	d0e6      	beq.n	8007004 <_printf_common+0xa8>
 8007036:	3601      	adds	r6, #1
 8007038:	e7d9      	b.n	8006fee <_printf_common+0x92>
	...

0800703c <_printf_i>:
 800703c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	7e0f      	ldrb	r7, [r1, #24]
 8007042:	4691      	mov	r9, r2
 8007044:	2f78      	cmp	r7, #120	; 0x78
 8007046:	4680      	mov	r8, r0
 8007048:	460c      	mov	r4, r1
 800704a:	469a      	mov	sl, r3
 800704c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800704e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007052:	d807      	bhi.n	8007064 <_printf_i+0x28>
 8007054:	2f62      	cmp	r7, #98	; 0x62
 8007056:	d80a      	bhi.n	800706e <_printf_i+0x32>
 8007058:	2f00      	cmp	r7, #0
 800705a:	f000 80d9 	beq.w	8007210 <_printf_i+0x1d4>
 800705e:	2f58      	cmp	r7, #88	; 0x58
 8007060:	f000 80a4 	beq.w	80071ac <_printf_i+0x170>
 8007064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800706c:	e03a      	b.n	80070e4 <_printf_i+0xa8>
 800706e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007072:	2b15      	cmp	r3, #21
 8007074:	d8f6      	bhi.n	8007064 <_printf_i+0x28>
 8007076:	a101      	add	r1, pc, #4	; (adr r1, 800707c <_printf_i+0x40>)
 8007078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800707c:	080070d5 	.word	0x080070d5
 8007080:	080070e9 	.word	0x080070e9
 8007084:	08007065 	.word	0x08007065
 8007088:	08007065 	.word	0x08007065
 800708c:	08007065 	.word	0x08007065
 8007090:	08007065 	.word	0x08007065
 8007094:	080070e9 	.word	0x080070e9
 8007098:	08007065 	.word	0x08007065
 800709c:	08007065 	.word	0x08007065
 80070a0:	08007065 	.word	0x08007065
 80070a4:	08007065 	.word	0x08007065
 80070a8:	080071f7 	.word	0x080071f7
 80070ac:	08007119 	.word	0x08007119
 80070b0:	080071d9 	.word	0x080071d9
 80070b4:	08007065 	.word	0x08007065
 80070b8:	08007065 	.word	0x08007065
 80070bc:	08007219 	.word	0x08007219
 80070c0:	08007065 	.word	0x08007065
 80070c4:	08007119 	.word	0x08007119
 80070c8:	08007065 	.word	0x08007065
 80070cc:	08007065 	.word	0x08007065
 80070d0:	080071e1 	.word	0x080071e1
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	1d1a      	adds	r2, r3, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	602a      	str	r2, [r5, #0]
 80070dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0a4      	b.n	8007232 <_printf_i+0x1f6>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	6829      	ldr	r1, [r5, #0]
 80070ec:	0606      	lsls	r6, r0, #24
 80070ee:	f101 0304 	add.w	r3, r1, #4
 80070f2:	d50a      	bpl.n	800710a <_printf_i+0xce>
 80070f4:	680e      	ldr	r6, [r1, #0]
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	2e00      	cmp	r6, #0
 80070fa:	da03      	bge.n	8007104 <_printf_i+0xc8>
 80070fc:	232d      	movs	r3, #45	; 0x2d
 80070fe:	4276      	negs	r6, r6
 8007100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007104:	230a      	movs	r3, #10
 8007106:	485e      	ldr	r0, [pc, #376]	; (8007280 <_printf_i+0x244>)
 8007108:	e019      	b.n	800713e <_printf_i+0x102>
 800710a:	680e      	ldr	r6, [r1, #0]
 800710c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	bf18      	it	ne
 8007114:	b236      	sxthne	r6, r6
 8007116:	e7ef      	b.n	80070f8 <_printf_i+0xbc>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	6820      	ldr	r0, [r4, #0]
 800711c:	1d19      	adds	r1, r3, #4
 800711e:	6029      	str	r1, [r5, #0]
 8007120:	0601      	lsls	r1, r0, #24
 8007122:	d501      	bpl.n	8007128 <_printf_i+0xec>
 8007124:	681e      	ldr	r6, [r3, #0]
 8007126:	e002      	b.n	800712e <_printf_i+0xf2>
 8007128:	0646      	lsls	r6, r0, #25
 800712a:	d5fb      	bpl.n	8007124 <_printf_i+0xe8>
 800712c:	881e      	ldrh	r6, [r3, #0]
 800712e:	2f6f      	cmp	r7, #111	; 0x6f
 8007130:	bf0c      	ite	eq
 8007132:	2308      	moveq	r3, #8
 8007134:	230a      	movne	r3, #10
 8007136:	4852      	ldr	r0, [pc, #328]	; (8007280 <_printf_i+0x244>)
 8007138:	2100      	movs	r1, #0
 800713a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800713e:	6865      	ldr	r5, [r4, #4]
 8007140:	2d00      	cmp	r5, #0
 8007142:	bfa8      	it	ge
 8007144:	6821      	ldrge	r1, [r4, #0]
 8007146:	60a5      	str	r5, [r4, #8]
 8007148:	bfa4      	itt	ge
 800714a:	f021 0104 	bicge.w	r1, r1, #4
 800714e:	6021      	strge	r1, [r4, #0]
 8007150:	b90e      	cbnz	r6, 8007156 <_printf_i+0x11a>
 8007152:	2d00      	cmp	r5, #0
 8007154:	d04d      	beq.n	80071f2 <_printf_i+0x1b6>
 8007156:	4615      	mov	r5, r2
 8007158:	fbb6 f1f3 	udiv	r1, r6, r3
 800715c:	fb03 6711 	mls	r7, r3, r1, r6
 8007160:	5dc7      	ldrb	r7, [r0, r7]
 8007162:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007166:	4637      	mov	r7, r6
 8007168:	42bb      	cmp	r3, r7
 800716a:	460e      	mov	r6, r1
 800716c:	d9f4      	bls.n	8007158 <_printf_i+0x11c>
 800716e:	2b08      	cmp	r3, #8
 8007170:	d10b      	bne.n	800718a <_printf_i+0x14e>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	07de      	lsls	r6, r3, #31
 8007176:	d508      	bpl.n	800718a <_printf_i+0x14e>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	6861      	ldr	r1, [r4, #4]
 800717c:	4299      	cmp	r1, r3
 800717e:	bfde      	ittt	le
 8007180:	2330      	movle	r3, #48	; 0x30
 8007182:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007186:	f105 35ff 	addle.w	r5, r5, #4294967295
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	6122      	str	r2, [r4, #16]
 800718e:	464b      	mov	r3, r9
 8007190:	4621      	mov	r1, r4
 8007192:	4640      	mov	r0, r8
 8007194:	f8cd a000 	str.w	sl, [sp]
 8007198:	aa03      	add	r2, sp, #12
 800719a:	f7ff fedf 	bl	8006f5c <_printf_common>
 800719e:	3001      	adds	r0, #1
 80071a0:	d14c      	bne.n	800723c <_printf_i+0x200>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	b004      	add	sp, #16
 80071a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ac:	4834      	ldr	r0, [pc, #208]	; (8007280 <_printf_i+0x244>)
 80071ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071b2:	6829      	ldr	r1, [r5, #0]
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ba:	6029      	str	r1, [r5, #0]
 80071bc:	061d      	lsls	r5, r3, #24
 80071be:	d514      	bpl.n	80071ea <_printf_i+0x1ae>
 80071c0:	07df      	lsls	r7, r3, #31
 80071c2:	bf44      	itt	mi
 80071c4:	f043 0320 	orrmi.w	r3, r3, #32
 80071c8:	6023      	strmi	r3, [r4, #0]
 80071ca:	b91e      	cbnz	r6, 80071d4 <_printf_i+0x198>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	2310      	movs	r3, #16
 80071d6:	e7af      	b.n	8007138 <_printf_i+0xfc>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	f043 0320 	orr.w	r3, r3, #32
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	2378      	movs	r3, #120	; 0x78
 80071e2:	4828      	ldr	r0, [pc, #160]	; (8007284 <_printf_i+0x248>)
 80071e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071e8:	e7e3      	b.n	80071b2 <_printf_i+0x176>
 80071ea:	0659      	lsls	r1, r3, #25
 80071ec:	bf48      	it	mi
 80071ee:	b2b6      	uxthmi	r6, r6
 80071f0:	e7e6      	b.n	80071c0 <_printf_i+0x184>
 80071f2:	4615      	mov	r5, r2
 80071f4:	e7bb      	b.n	800716e <_printf_i+0x132>
 80071f6:	682b      	ldr	r3, [r5, #0]
 80071f8:	6826      	ldr	r6, [r4, #0]
 80071fa:	1d18      	adds	r0, r3, #4
 80071fc:	6961      	ldr	r1, [r4, #20]
 80071fe:	6028      	str	r0, [r5, #0]
 8007200:	0635      	lsls	r5, r6, #24
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	d501      	bpl.n	800720a <_printf_i+0x1ce>
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	e002      	b.n	8007210 <_printf_i+0x1d4>
 800720a:	0670      	lsls	r0, r6, #25
 800720c:	d5fb      	bpl.n	8007206 <_printf_i+0x1ca>
 800720e:	8019      	strh	r1, [r3, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	4615      	mov	r5, r2
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	e7ba      	b.n	800718e <_printf_i+0x152>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	2100      	movs	r1, #0
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	602a      	str	r2, [r5, #0]
 8007220:	681d      	ldr	r5, [r3, #0]
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	4628      	mov	r0, r5
 8007226:	f002 faed 	bl	8009804 <memchr>
 800722a:	b108      	cbz	r0, 8007230 <_printf_i+0x1f4>
 800722c:	1b40      	subs	r0, r0, r5
 800722e:	6060      	str	r0, [r4, #4]
 8007230:	6863      	ldr	r3, [r4, #4]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2300      	movs	r3, #0
 8007236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800723a:	e7a8      	b.n	800718e <_printf_i+0x152>
 800723c:	462a      	mov	r2, r5
 800723e:	4649      	mov	r1, r9
 8007240:	4640      	mov	r0, r8
 8007242:	6923      	ldr	r3, [r4, #16]
 8007244:	47d0      	blx	sl
 8007246:	3001      	adds	r0, #1
 8007248:	d0ab      	beq.n	80071a2 <_printf_i+0x166>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	079b      	lsls	r3, r3, #30
 800724e:	d413      	bmi.n	8007278 <_printf_i+0x23c>
 8007250:	68e0      	ldr	r0, [r4, #12]
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	4298      	cmp	r0, r3
 8007256:	bfb8      	it	lt
 8007258:	4618      	movlt	r0, r3
 800725a:	e7a4      	b.n	80071a6 <_printf_i+0x16a>
 800725c:	2301      	movs	r3, #1
 800725e:	4632      	mov	r2, r6
 8007260:	4649      	mov	r1, r9
 8007262:	4640      	mov	r0, r8
 8007264:	47d0      	blx	sl
 8007266:	3001      	adds	r0, #1
 8007268:	d09b      	beq.n	80071a2 <_printf_i+0x166>
 800726a:	3501      	adds	r5, #1
 800726c:	68e3      	ldr	r3, [r4, #12]
 800726e:	9903      	ldr	r1, [sp, #12]
 8007270:	1a5b      	subs	r3, r3, r1
 8007272:	42ab      	cmp	r3, r5
 8007274:	dcf2      	bgt.n	800725c <_printf_i+0x220>
 8007276:	e7eb      	b.n	8007250 <_printf_i+0x214>
 8007278:	2500      	movs	r5, #0
 800727a:	f104 0619 	add.w	r6, r4, #25
 800727e:	e7f5      	b.n	800726c <_printf_i+0x230>
 8007280:	0800b2c2 	.word	0x0800b2c2
 8007284:	0800b2d3 	.word	0x0800b2d3

08007288 <_scanf_float>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	b087      	sub	sp, #28
 800728e:	9303      	str	r3, [sp, #12]
 8007290:	688b      	ldr	r3, [r1, #8]
 8007292:	4617      	mov	r7, r2
 8007294:	1e5a      	subs	r2, r3, #1
 8007296:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800729a:	bf85      	ittet	hi
 800729c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80072a0:	195b      	addhi	r3, r3, r5
 80072a2:	2300      	movls	r3, #0
 80072a4:	9302      	strhi	r3, [sp, #8]
 80072a6:	bf88      	it	hi
 80072a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80072ac:	468b      	mov	fp, r1
 80072ae:	f04f 0500 	mov.w	r5, #0
 80072b2:	bf8c      	ite	hi
 80072b4:	608b      	strhi	r3, [r1, #8]
 80072b6:	9302      	strls	r3, [sp, #8]
 80072b8:	680b      	ldr	r3, [r1, #0]
 80072ba:	4680      	mov	r8, r0
 80072bc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80072c0:	f84b 3b1c 	str.w	r3, [fp], #28
 80072c4:	460c      	mov	r4, r1
 80072c6:	465e      	mov	r6, fp
 80072c8:	46aa      	mov	sl, r5
 80072ca:	46a9      	mov	r9, r5
 80072cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80072d0:	9501      	str	r5, [sp, #4]
 80072d2:	68a2      	ldr	r2, [r4, #8]
 80072d4:	b152      	cbz	r2, 80072ec <_scanf_float+0x64>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b4e      	cmp	r3, #78	; 0x4e
 80072dc:	d864      	bhi.n	80073a8 <_scanf_float+0x120>
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d83c      	bhi.n	800735c <_scanf_float+0xd4>
 80072e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80072e6:	b2c8      	uxtb	r0, r1
 80072e8:	280e      	cmp	r0, #14
 80072ea:	d93a      	bls.n	8007362 <_scanf_float+0xda>
 80072ec:	f1b9 0f00 	cmp.w	r9, #0
 80072f0:	d003      	beq.n	80072fa <_scanf_float+0x72>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072fe:	f1ba 0f01 	cmp.w	sl, #1
 8007302:	f200 8113 	bhi.w	800752c <_scanf_float+0x2a4>
 8007306:	455e      	cmp	r6, fp
 8007308:	f200 8105 	bhi.w	8007516 <_scanf_float+0x28e>
 800730c:	2501      	movs	r5, #1
 800730e:	4628      	mov	r0, r5
 8007310:	b007      	add	sp, #28
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800731a:	2a0d      	cmp	r2, #13
 800731c:	d8e6      	bhi.n	80072ec <_scanf_float+0x64>
 800731e:	a101      	add	r1, pc, #4	; (adr r1, 8007324 <_scanf_float+0x9c>)
 8007320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007324:	08007463 	.word	0x08007463
 8007328:	080072ed 	.word	0x080072ed
 800732c:	080072ed 	.word	0x080072ed
 8007330:	080072ed 	.word	0x080072ed
 8007334:	080074c3 	.word	0x080074c3
 8007338:	0800749b 	.word	0x0800749b
 800733c:	080072ed 	.word	0x080072ed
 8007340:	080072ed 	.word	0x080072ed
 8007344:	08007471 	.word	0x08007471
 8007348:	080072ed 	.word	0x080072ed
 800734c:	080072ed 	.word	0x080072ed
 8007350:	080072ed 	.word	0x080072ed
 8007354:	080072ed 	.word	0x080072ed
 8007358:	08007429 	.word	0x08007429
 800735c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007360:	e7db      	b.n	800731a <_scanf_float+0x92>
 8007362:	290e      	cmp	r1, #14
 8007364:	d8c2      	bhi.n	80072ec <_scanf_float+0x64>
 8007366:	a001      	add	r0, pc, #4	; (adr r0, 800736c <_scanf_float+0xe4>)
 8007368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800736c:	0800741b 	.word	0x0800741b
 8007370:	080072ed 	.word	0x080072ed
 8007374:	0800741b 	.word	0x0800741b
 8007378:	080074af 	.word	0x080074af
 800737c:	080072ed 	.word	0x080072ed
 8007380:	080073c9 	.word	0x080073c9
 8007384:	08007405 	.word	0x08007405
 8007388:	08007405 	.word	0x08007405
 800738c:	08007405 	.word	0x08007405
 8007390:	08007405 	.word	0x08007405
 8007394:	08007405 	.word	0x08007405
 8007398:	08007405 	.word	0x08007405
 800739c:	08007405 	.word	0x08007405
 80073a0:	08007405 	.word	0x08007405
 80073a4:	08007405 	.word	0x08007405
 80073a8:	2b6e      	cmp	r3, #110	; 0x6e
 80073aa:	d809      	bhi.n	80073c0 <_scanf_float+0x138>
 80073ac:	2b60      	cmp	r3, #96	; 0x60
 80073ae:	d8b2      	bhi.n	8007316 <_scanf_float+0x8e>
 80073b0:	2b54      	cmp	r3, #84	; 0x54
 80073b2:	d077      	beq.n	80074a4 <_scanf_float+0x21c>
 80073b4:	2b59      	cmp	r3, #89	; 0x59
 80073b6:	d199      	bne.n	80072ec <_scanf_float+0x64>
 80073b8:	2d07      	cmp	r5, #7
 80073ba:	d197      	bne.n	80072ec <_scanf_float+0x64>
 80073bc:	2508      	movs	r5, #8
 80073be:	e029      	b.n	8007414 <_scanf_float+0x18c>
 80073c0:	2b74      	cmp	r3, #116	; 0x74
 80073c2:	d06f      	beq.n	80074a4 <_scanf_float+0x21c>
 80073c4:	2b79      	cmp	r3, #121	; 0x79
 80073c6:	e7f6      	b.n	80073b6 <_scanf_float+0x12e>
 80073c8:	6821      	ldr	r1, [r4, #0]
 80073ca:	05c8      	lsls	r0, r1, #23
 80073cc:	d51a      	bpl.n	8007404 <_scanf_float+0x17c>
 80073ce:	9b02      	ldr	r3, [sp, #8]
 80073d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80073d4:	6021      	str	r1, [r4, #0]
 80073d6:	f109 0901 	add.w	r9, r9, #1
 80073da:	b11b      	cbz	r3, 80073e4 <_scanf_float+0x15c>
 80073dc:	3b01      	subs	r3, #1
 80073de:	3201      	adds	r2, #1
 80073e0:	9302      	str	r3, [sp, #8]
 80073e2:	60a2      	str	r2, [r4, #8]
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	60a3      	str	r3, [r4, #8]
 80073ea:	6923      	ldr	r3, [r4, #16]
 80073ec:	3301      	adds	r3, #1
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	607b      	str	r3, [r7, #4]
 80073f8:	f340 8084 	ble.w	8007504 <_scanf_float+0x27c>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	e766      	b.n	80072d2 <_scanf_float+0x4a>
 8007404:	eb1a 0f05 	cmn.w	sl, r5
 8007408:	f47f af70 	bne.w	80072ec <_scanf_float+0x64>
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	f806 3b01 	strb.w	r3, [r6], #1
 8007418:	e7e4      	b.n	80073e4 <_scanf_float+0x15c>
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	0610      	lsls	r0, r2, #24
 800741e:	f57f af65 	bpl.w	80072ec <_scanf_float+0x64>
 8007422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007426:	e7f4      	b.n	8007412 <_scanf_float+0x18a>
 8007428:	f1ba 0f00 	cmp.w	sl, #0
 800742c:	d10e      	bne.n	800744c <_scanf_float+0x1c4>
 800742e:	f1b9 0f00 	cmp.w	r9, #0
 8007432:	d10e      	bne.n	8007452 <_scanf_float+0x1ca>
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800743a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800743e:	d108      	bne.n	8007452 <_scanf_float+0x1ca>
 8007440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007444:	f04f 0a01 	mov.w	sl, #1
 8007448:	6022      	str	r2, [r4, #0]
 800744a:	e7e3      	b.n	8007414 <_scanf_float+0x18c>
 800744c:	f1ba 0f02 	cmp.w	sl, #2
 8007450:	d055      	beq.n	80074fe <_scanf_float+0x276>
 8007452:	2d01      	cmp	r5, #1
 8007454:	d002      	beq.n	800745c <_scanf_float+0x1d4>
 8007456:	2d04      	cmp	r5, #4
 8007458:	f47f af48 	bne.w	80072ec <_scanf_float+0x64>
 800745c:	3501      	adds	r5, #1
 800745e:	b2ed      	uxtb	r5, r5
 8007460:	e7d8      	b.n	8007414 <_scanf_float+0x18c>
 8007462:	f1ba 0f01 	cmp.w	sl, #1
 8007466:	f47f af41 	bne.w	80072ec <_scanf_float+0x64>
 800746a:	f04f 0a02 	mov.w	sl, #2
 800746e:	e7d1      	b.n	8007414 <_scanf_float+0x18c>
 8007470:	b97d      	cbnz	r5, 8007492 <_scanf_float+0x20a>
 8007472:	f1b9 0f00 	cmp.w	r9, #0
 8007476:	f47f af3c 	bne.w	80072f2 <_scanf_float+0x6a>
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007484:	f47f af39 	bne.w	80072fa <_scanf_float+0x72>
 8007488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800748c:	2501      	movs	r5, #1
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	e7c0      	b.n	8007414 <_scanf_float+0x18c>
 8007492:	2d03      	cmp	r5, #3
 8007494:	d0e2      	beq.n	800745c <_scanf_float+0x1d4>
 8007496:	2d05      	cmp	r5, #5
 8007498:	e7de      	b.n	8007458 <_scanf_float+0x1d0>
 800749a:	2d02      	cmp	r5, #2
 800749c:	f47f af26 	bne.w	80072ec <_scanf_float+0x64>
 80074a0:	2503      	movs	r5, #3
 80074a2:	e7b7      	b.n	8007414 <_scanf_float+0x18c>
 80074a4:	2d06      	cmp	r5, #6
 80074a6:	f47f af21 	bne.w	80072ec <_scanf_float+0x64>
 80074aa:	2507      	movs	r5, #7
 80074ac:	e7b2      	b.n	8007414 <_scanf_float+0x18c>
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	0591      	lsls	r1, r2, #22
 80074b2:	f57f af1b 	bpl.w	80072ec <_scanf_float+0x64>
 80074b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80074ba:	6022      	str	r2, [r4, #0]
 80074bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80074c0:	e7a8      	b.n	8007414 <_scanf_float+0x18c>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80074c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80074cc:	d006      	beq.n	80074dc <_scanf_float+0x254>
 80074ce:	0550      	lsls	r0, r2, #21
 80074d0:	f57f af0c 	bpl.w	80072ec <_scanf_float+0x64>
 80074d4:	f1b9 0f00 	cmp.w	r9, #0
 80074d8:	f43f af0f 	beq.w	80072fa <_scanf_float+0x72>
 80074dc:	0591      	lsls	r1, r2, #22
 80074de:	bf58      	it	pl
 80074e0:	9901      	ldrpl	r1, [sp, #4]
 80074e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074e6:	bf58      	it	pl
 80074e8:	eba9 0101 	subpl.w	r1, r9, r1
 80074ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80074f0:	f04f 0900 	mov.w	r9, #0
 80074f4:	bf58      	it	pl
 80074f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	e78a      	b.n	8007414 <_scanf_float+0x18c>
 80074fe:	f04f 0a03 	mov.w	sl, #3
 8007502:	e787      	b.n	8007414 <_scanf_float+0x18c>
 8007504:	4639      	mov	r1, r7
 8007506:	4640      	mov	r0, r8
 8007508:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800750c:	4798      	blx	r3
 800750e:	2800      	cmp	r0, #0
 8007510:	f43f aedf 	beq.w	80072d2 <_scanf_float+0x4a>
 8007514:	e6ea      	b.n	80072ec <_scanf_float+0x64>
 8007516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800751a:	463a      	mov	r2, r7
 800751c:	4640      	mov	r0, r8
 800751e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007522:	4798      	blx	r3
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	3b01      	subs	r3, #1
 8007528:	6123      	str	r3, [r4, #16]
 800752a:	e6ec      	b.n	8007306 <_scanf_float+0x7e>
 800752c:	1e6b      	subs	r3, r5, #1
 800752e:	2b06      	cmp	r3, #6
 8007530:	d825      	bhi.n	800757e <_scanf_float+0x2f6>
 8007532:	2d02      	cmp	r5, #2
 8007534:	d836      	bhi.n	80075a4 <_scanf_float+0x31c>
 8007536:	455e      	cmp	r6, fp
 8007538:	f67f aee8 	bls.w	800730c <_scanf_float+0x84>
 800753c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007540:	463a      	mov	r2, r7
 8007542:	4640      	mov	r0, r8
 8007544:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007548:	4798      	blx	r3
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	3b01      	subs	r3, #1
 800754e:	6123      	str	r3, [r4, #16]
 8007550:	e7f1      	b.n	8007536 <_scanf_float+0x2ae>
 8007552:	9802      	ldr	r0, [sp, #8]
 8007554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800755c:	463a      	mov	r2, r7
 800755e:	9002      	str	r0, [sp, #8]
 8007560:	4640      	mov	r0, r8
 8007562:	4798      	blx	r3
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	3b01      	subs	r3, #1
 8007568:	6123      	str	r3, [r4, #16]
 800756a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800756e:	fa5f fa8a 	uxtb.w	sl, sl
 8007572:	f1ba 0f02 	cmp.w	sl, #2
 8007576:	d1ec      	bne.n	8007552 <_scanf_float+0x2ca>
 8007578:	3d03      	subs	r5, #3
 800757a:	b2ed      	uxtb	r5, r5
 800757c:	1b76      	subs	r6, r6, r5
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	05da      	lsls	r2, r3, #23
 8007582:	d52f      	bpl.n	80075e4 <_scanf_float+0x35c>
 8007584:	055b      	lsls	r3, r3, #21
 8007586:	d510      	bpl.n	80075aa <_scanf_float+0x322>
 8007588:	455e      	cmp	r6, fp
 800758a:	f67f aebf 	bls.w	800730c <_scanf_float+0x84>
 800758e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007592:	463a      	mov	r2, r7
 8007594:	4640      	mov	r0, r8
 8007596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800759a:	4798      	blx	r3
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	3b01      	subs	r3, #1
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	e7f1      	b.n	8007588 <_scanf_float+0x300>
 80075a4:	46aa      	mov	sl, r5
 80075a6:	9602      	str	r6, [sp, #8]
 80075a8:	e7df      	b.n	800756a <_scanf_float+0x2e2>
 80075aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	2965      	cmp	r1, #101	; 0x65
 80075b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80075b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	d00c      	beq.n	80075d8 <_scanf_float+0x350>
 80075be:	2945      	cmp	r1, #69	; 0x45
 80075c0:	d00a      	beq.n	80075d8 <_scanf_float+0x350>
 80075c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075c6:	463a      	mov	r2, r7
 80075c8:	4640      	mov	r0, r8
 80075ca:	4798      	blx	r3
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	1eb5      	subs	r5, r6, #2
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	463a      	mov	r2, r7
 80075da:	4640      	mov	r0, r8
 80075dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075e0:	4798      	blx	r3
 80075e2:	462e      	mov	r6, r5
 80075e4:	6825      	ldr	r5, [r4, #0]
 80075e6:	f015 0510 	ands.w	r5, r5, #16
 80075ea:	d155      	bne.n	8007698 <_scanf_float+0x410>
 80075ec:	7035      	strb	r5, [r6, #0]
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f8:	d11b      	bne.n	8007632 <_scanf_float+0x3aa>
 80075fa:	9b01      	ldr	r3, [sp, #4]
 80075fc:	454b      	cmp	r3, r9
 80075fe:	eba3 0209 	sub.w	r2, r3, r9
 8007602:	d123      	bne.n	800764c <_scanf_float+0x3c4>
 8007604:	2200      	movs	r2, #0
 8007606:	4659      	mov	r1, fp
 8007608:	4640      	mov	r0, r8
 800760a:	f000 fe79 	bl	8008300 <_strtod_r>
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	f012 0f02 	tst.w	r2, #2
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	d021      	beq.n	8007662 <_scanf_float+0x3da>
 800761e:	1d1a      	adds	r2, r3, #4
 8007620:	9903      	ldr	r1, [sp, #12]
 8007622:	600a      	str	r2, [r1, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	e9c3 6700 	strd	r6, r7, [r3]
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60e3      	str	r3, [r4, #12]
 8007630:	e66d      	b.n	800730e <_scanf_float+0x86>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0e5      	beq.n	8007604 <_scanf_float+0x37c>
 8007638:	9905      	ldr	r1, [sp, #20]
 800763a:	230a      	movs	r3, #10
 800763c:	462a      	mov	r2, r5
 800763e:	4640      	mov	r0, r8
 8007640:	3101      	adds	r1, #1
 8007642:	f000 fedf 	bl	8008404 <_strtol_r>
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	9e05      	ldr	r6, [sp, #20]
 800764a:	1ac2      	subs	r2, r0, r3
 800764c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007650:	429e      	cmp	r6, r3
 8007652:	bf28      	it	cs
 8007654:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007658:	4630      	mov	r0, r6
 800765a:	4910      	ldr	r1, [pc, #64]	; (800769c <_scanf_float+0x414>)
 800765c:	f000 f826 	bl	80076ac <siprintf>
 8007660:	e7d0      	b.n	8007604 <_scanf_float+0x37c>
 8007662:	f012 0f04 	tst.w	r2, #4
 8007666:	f103 0204 	add.w	r2, r3, #4
 800766a:	d1d9      	bne.n	8007620 <_scanf_float+0x398>
 800766c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007670:	f8cc 2000 	str.w	r2, [ip]
 8007674:	f8d3 8000 	ldr.w	r8, [r3]
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	f7f9 f9c6 	bl	8000a0c <__aeabi_dcmpun>
 8007680:	b128      	cbz	r0, 800768e <_scanf_float+0x406>
 8007682:	4807      	ldr	r0, [pc, #28]	; (80076a0 <_scanf_float+0x418>)
 8007684:	f000 f80e 	bl	80076a4 <nanf>
 8007688:	f8c8 0000 	str.w	r0, [r8]
 800768c:	e7cd      	b.n	800762a <_scanf_float+0x3a2>
 800768e:	4630      	mov	r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	f7f9 fa19 	bl	8000ac8 <__aeabi_d2f>
 8007696:	e7f7      	b.n	8007688 <_scanf_float+0x400>
 8007698:	2500      	movs	r5, #0
 800769a:	e638      	b.n	800730e <_scanf_float+0x86>
 800769c:	0800b2e4 	.word	0x0800b2e4
 80076a0:	0800b6f0 	.word	0x0800b6f0

080076a4 <nanf>:
 80076a4:	4800      	ldr	r0, [pc, #0]	; (80076a8 <nanf+0x4>)
 80076a6:	4770      	bx	lr
 80076a8:	7fc00000 	.word	0x7fc00000

080076ac <siprintf>:
 80076ac:	b40e      	push	{r1, r2, r3}
 80076ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076b2:	b500      	push	{lr}
 80076b4:	b09c      	sub	sp, #112	; 0x70
 80076b6:	ab1d      	add	r3, sp, #116	; 0x74
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	9006      	str	r0, [sp, #24]
 80076bc:	9107      	str	r1, [sp, #28]
 80076be:	9104      	str	r1, [sp, #16]
 80076c0:	4808      	ldr	r0, [pc, #32]	; (80076e4 <siprintf+0x38>)
 80076c2:	4909      	ldr	r1, [pc, #36]	; (80076e8 <siprintf+0x3c>)
 80076c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c8:	9105      	str	r1, [sp, #20]
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	a902      	add	r1, sp, #8
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	f002 feb8 	bl	800a444 <_svfiprintf_r>
 80076d4:	2200      	movs	r2, #0
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	b01c      	add	sp, #112	; 0x70
 80076dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e0:	b003      	add	sp, #12
 80076e2:	4770      	bx	lr
 80076e4:	2000000c 	.word	0x2000000c
 80076e8:	ffff0208 	.word	0xffff0208

080076ec <sulp>:
 80076ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	460f      	mov	r7, r1
 80076f2:	4690      	mov	r8, r2
 80076f4:	f002 fc12 	bl	8009f1c <__ulp>
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	f1b8 0f00 	cmp.w	r8, #0
 8007700:	d011      	beq.n	8007726 <sulp+0x3a>
 8007702:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007706:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd0b      	ble.n	8007726 <sulp+0x3a>
 800770e:	2400      	movs	r4, #0
 8007710:	051b      	lsls	r3, r3, #20
 8007712:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007716:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800771a:	4622      	mov	r2, r4
 800771c:	462b      	mov	r3, r5
 800771e:	f7f8 fedb 	bl	80004d8 <__aeabi_dmul>
 8007722:	4604      	mov	r4, r0
 8007724:	460d      	mov	r5, r1
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007730 <_strtod_l>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	469b      	mov	fp, r3
 8007736:	2300      	movs	r3, #0
 8007738:	b09f      	sub	sp, #124	; 0x7c
 800773a:	931a      	str	r3, [sp, #104]	; 0x68
 800773c:	4b9e      	ldr	r3, [pc, #632]	; (80079b8 <_strtod_l+0x288>)
 800773e:	4682      	mov	sl, r0
 8007740:	681f      	ldr	r7, [r3, #0]
 8007742:	460e      	mov	r6, r1
 8007744:	4638      	mov	r0, r7
 8007746:	9215      	str	r2, [sp, #84]	; 0x54
 8007748:	f7f8 fd02 	bl	8000150 <strlen>
 800774c:	f04f 0800 	mov.w	r8, #0
 8007750:	4604      	mov	r4, r0
 8007752:	f04f 0900 	mov.w	r9, #0
 8007756:	9619      	str	r6, [sp, #100]	; 0x64
 8007758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	2a2b      	cmp	r2, #43	; 0x2b
 800775e:	d04c      	beq.n	80077fa <_strtod_l+0xca>
 8007760:	d83a      	bhi.n	80077d8 <_strtod_l+0xa8>
 8007762:	2a0d      	cmp	r2, #13
 8007764:	d833      	bhi.n	80077ce <_strtod_l+0x9e>
 8007766:	2a08      	cmp	r2, #8
 8007768:	d833      	bhi.n	80077d2 <_strtod_l+0xa2>
 800776a:	2a00      	cmp	r2, #0
 800776c:	d03d      	beq.n	80077ea <_strtod_l+0xba>
 800776e:	2300      	movs	r3, #0
 8007770:	930a      	str	r3, [sp, #40]	; 0x28
 8007772:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007774:	782b      	ldrb	r3, [r5, #0]
 8007776:	2b30      	cmp	r3, #48	; 0x30
 8007778:	f040 80aa 	bne.w	80078d0 <_strtod_l+0x1a0>
 800777c:	786b      	ldrb	r3, [r5, #1]
 800777e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007782:	2b58      	cmp	r3, #88	; 0x58
 8007784:	d166      	bne.n	8007854 <_strtod_l+0x124>
 8007786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007788:	4650      	mov	r0, sl
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	ab1a      	add	r3, sp, #104	; 0x68
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4a8a      	ldr	r2, [pc, #552]	; (80079bc <_strtod_l+0x28c>)
 8007792:	f8cd b008 	str.w	fp, [sp, #8]
 8007796:	ab1b      	add	r3, sp, #108	; 0x6c
 8007798:	a919      	add	r1, sp, #100	; 0x64
 800779a:	f001 fd17 	bl	80091cc <__gethex>
 800779e:	f010 0607 	ands.w	r6, r0, #7
 80077a2:	4604      	mov	r4, r0
 80077a4:	d005      	beq.n	80077b2 <_strtod_l+0x82>
 80077a6:	2e06      	cmp	r6, #6
 80077a8:	d129      	bne.n	80077fe <_strtod_l+0xce>
 80077aa:	2300      	movs	r3, #0
 80077ac:	3501      	adds	r5, #1
 80077ae:	9519      	str	r5, [sp, #100]	; 0x64
 80077b0:	930a      	str	r3, [sp, #40]	; 0x28
 80077b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 858a 	bne.w	80082ce <_strtod_l+0xb9e>
 80077ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077bc:	b1d3      	cbz	r3, 80077f4 <_strtod_l+0xc4>
 80077be:	4642      	mov	r2, r8
 80077c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077c4:	4610      	mov	r0, r2
 80077c6:	4619      	mov	r1, r3
 80077c8:	b01f      	add	sp, #124	; 0x7c
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	2a20      	cmp	r2, #32
 80077d0:	d1cd      	bne.n	800776e <_strtod_l+0x3e>
 80077d2:	3301      	adds	r3, #1
 80077d4:	9319      	str	r3, [sp, #100]	; 0x64
 80077d6:	e7bf      	b.n	8007758 <_strtod_l+0x28>
 80077d8:	2a2d      	cmp	r2, #45	; 0x2d
 80077da:	d1c8      	bne.n	800776e <_strtod_l+0x3e>
 80077dc:	2201      	movs	r2, #1
 80077de:	920a      	str	r2, [sp, #40]	; 0x28
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	9219      	str	r2, [sp, #100]	; 0x64
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1c3      	bne.n	8007772 <_strtod_l+0x42>
 80077ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ec:	9619      	str	r6, [sp, #100]	; 0x64
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f040 856b 	bne.w	80082ca <_strtod_l+0xb9a>
 80077f4:	4642      	mov	r2, r8
 80077f6:	464b      	mov	r3, r9
 80077f8:	e7e4      	b.n	80077c4 <_strtod_l+0x94>
 80077fa:	2200      	movs	r2, #0
 80077fc:	e7ef      	b.n	80077de <_strtod_l+0xae>
 80077fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007800:	b13a      	cbz	r2, 8007812 <_strtod_l+0xe2>
 8007802:	2135      	movs	r1, #53	; 0x35
 8007804:	a81c      	add	r0, sp, #112	; 0x70
 8007806:	f002 fc8d 	bl	800a124 <__copybits>
 800780a:	4650      	mov	r0, sl
 800780c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800780e:	f002 f855 	bl	80098bc <_Bfree>
 8007812:	3e01      	subs	r6, #1
 8007814:	2e04      	cmp	r6, #4
 8007816:	d806      	bhi.n	8007826 <_strtod_l+0xf6>
 8007818:	e8df f006 	tbb	[pc, r6]
 800781c:	1714030a 	.word	0x1714030a
 8007820:	0a          	.byte	0x0a
 8007821:	00          	.byte	0x00
 8007822:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007826:	0721      	lsls	r1, r4, #28
 8007828:	d5c3      	bpl.n	80077b2 <_strtod_l+0x82>
 800782a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800782e:	e7c0      	b.n	80077b2 <_strtod_l+0x82>
 8007830:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007832:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007836:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800783a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800783e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007842:	e7f0      	b.n	8007826 <_strtod_l+0xf6>
 8007844:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80079c0 <_strtod_l+0x290>
 8007848:	e7ed      	b.n	8007826 <_strtod_l+0xf6>
 800784a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800784e:	f04f 38ff 	mov.w	r8, #4294967295
 8007852:	e7e8      	b.n	8007826 <_strtod_l+0xf6>
 8007854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	9219      	str	r2, [sp, #100]	; 0x64
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b30      	cmp	r3, #48	; 0x30
 800785e:	d0f9      	beq.n	8007854 <_strtod_l+0x124>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0a6      	beq.n	80077b2 <_strtod_l+0x82>
 8007864:	2301      	movs	r3, #1
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800786a:	220a      	movs	r2, #10
 800786c:	9308      	str	r3, [sp, #32]
 800786e:	2300      	movs	r3, #0
 8007870:	469b      	mov	fp, r3
 8007872:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007876:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007878:	7805      	ldrb	r5, [r0, #0]
 800787a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800787e:	b2d9      	uxtb	r1, r3
 8007880:	2909      	cmp	r1, #9
 8007882:	d927      	bls.n	80078d4 <_strtod_l+0x1a4>
 8007884:	4622      	mov	r2, r4
 8007886:	4639      	mov	r1, r7
 8007888:	f002 fef2 	bl	800a670 <strncmp>
 800788c:	2800      	cmp	r0, #0
 800788e:	d033      	beq.n	80078f8 <_strtod_l+0x1c8>
 8007890:	2000      	movs	r0, #0
 8007892:	462a      	mov	r2, r5
 8007894:	465c      	mov	r4, fp
 8007896:	4603      	mov	r3, r0
 8007898:	9004      	str	r0, [sp, #16]
 800789a:	2a65      	cmp	r2, #101	; 0x65
 800789c:	d001      	beq.n	80078a2 <_strtod_l+0x172>
 800789e:	2a45      	cmp	r2, #69	; 0x45
 80078a0:	d114      	bne.n	80078cc <_strtod_l+0x19c>
 80078a2:	b91c      	cbnz	r4, 80078ac <_strtod_l+0x17c>
 80078a4:	9a07      	ldr	r2, [sp, #28]
 80078a6:	4302      	orrs	r2, r0
 80078a8:	d09f      	beq.n	80077ea <_strtod_l+0xba>
 80078aa:	2400      	movs	r4, #0
 80078ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80078ae:	1c72      	adds	r2, r6, #1
 80078b0:	9219      	str	r2, [sp, #100]	; 0x64
 80078b2:	7872      	ldrb	r2, [r6, #1]
 80078b4:	2a2b      	cmp	r2, #43	; 0x2b
 80078b6:	d079      	beq.n	80079ac <_strtod_l+0x27c>
 80078b8:	2a2d      	cmp	r2, #45	; 0x2d
 80078ba:	f000 8083 	beq.w	80079c4 <_strtod_l+0x294>
 80078be:	2700      	movs	r7, #0
 80078c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078c4:	2909      	cmp	r1, #9
 80078c6:	f240 8083 	bls.w	80079d0 <_strtod_l+0x2a0>
 80078ca:	9619      	str	r6, [sp, #100]	; 0x64
 80078cc:	2500      	movs	r5, #0
 80078ce:	e09f      	b.n	8007a10 <_strtod_l+0x2e0>
 80078d0:	2300      	movs	r3, #0
 80078d2:	e7c8      	b.n	8007866 <_strtod_l+0x136>
 80078d4:	f1bb 0f08 	cmp.w	fp, #8
 80078d8:	bfd5      	itete	le
 80078da:	9906      	ldrle	r1, [sp, #24]
 80078dc:	9905      	ldrgt	r1, [sp, #20]
 80078de:	fb02 3301 	mlale	r3, r2, r1, r3
 80078e2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80078e6:	f100 0001 	add.w	r0, r0, #1
 80078ea:	bfd4      	ite	le
 80078ec:	9306      	strle	r3, [sp, #24]
 80078ee:	9305      	strgt	r3, [sp, #20]
 80078f0:	f10b 0b01 	add.w	fp, fp, #1
 80078f4:	9019      	str	r0, [sp, #100]	; 0x64
 80078f6:	e7be      	b.n	8007876 <_strtod_l+0x146>
 80078f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078fa:	191a      	adds	r2, r3, r4
 80078fc:	9219      	str	r2, [sp, #100]	; 0x64
 80078fe:	5d1a      	ldrb	r2, [r3, r4]
 8007900:	f1bb 0f00 	cmp.w	fp, #0
 8007904:	d036      	beq.n	8007974 <_strtod_l+0x244>
 8007906:	465c      	mov	r4, fp
 8007908:	9004      	str	r0, [sp, #16]
 800790a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800790e:	2b09      	cmp	r3, #9
 8007910:	d912      	bls.n	8007938 <_strtod_l+0x208>
 8007912:	2301      	movs	r3, #1
 8007914:	e7c1      	b.n	800789a <_strtod_l+0x16a>
 8007916:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007918:	3001      	adds	r0, #1
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	9219      	str	r2, [sp, #100]	; 0x64
 800791e:	785a      	ldrb	r2, [r3, #1]
 8007920:	2a30      	cmp	r2, #48	; 0x30
 8007922:	d0f8      	beq.n	8007916 <_strtod_l+0x1e6>
 8007924:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007928:	2b08      	cmp	r3, #8
 800792a:	f200 84d5 	bhi.w	80082d8 <_strtod_l+0xba8>
 800792e:	9004      	str	r0, [sp, #16]
 8007930:	2000      	movs	r0, #0
 8007932:	4604      	mov	r4, r0
 8007934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007936:	9308      	str	r3, [sp, #32]
 8007938:	3a30      	subs	r2, #48	; 0x30
 800793a:	f100 0301 	add.w	r3, r0, #1
 800793e:	d013      	beq.n	8007968 <_strtod_l+0x238>
 8007940:	9904      	ldr	r1, [sp, #16]
 8007942:	1905      	adds	r5, r0, r4
 8007944:	4419      	add	r1, r3
 8007946:	9104      	str	r1, [sp, #16]
 8007948:	4623      	mov	r3, r4
 800794a:	210a      	movs	r1, #10
 800794c:	42ab      	cmp	r3, r5
 800794e:	d113      	bne.n	8007978 <_strtod_l+0x248>
 8007950:	1823      	adds	r3, r4, r0
 8007952:	2b08      	cmp	r3, #8
 8007954:	f104 0401 	add.w	r4, r4, #1
 8007958:	4404      	add	r4, r0
 800795a:	dc1b      	bgt.n	8007994 <_strtod_l+0x264>
 800795c:	230a      	movs	r3, #10
 800795e:	9906      	ldr	r1, [sp, #24]
 8007960:	fb03 2301 	mla	r3, r3, r1, r2
 8007964:	9306      	str	r3, [sp, #24]
 8007966:	2300      	movs	r3, #0
 8007968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800796a:	4618      	mov	r0, r3
 800796c:	1c51      	adds	r1, r2, #1
 800796e:	9119      	str	r1, [sp, #100]	; 0x64
 8007970:	7852      	ldrb	r2, [r2, #1]
 8007972:	e7ca      	b.n	800790a <_strtod_l+0x1da>
 8007974:	4658      	mov	r0, fp
 8007976:	e7d3      	b.n	8007920 <_strtod_l+0x1f0>
 8007978:	2b08      	cmp	r3, #8
 800797a:	dc04      	bgt.n	8007986 <_strtod_l+0x256>
 800797c:	9f06      	ldr	r7, [sp, #24]
 800797e:	434f      	muls	r7, r1
 8007980:	9706      	str	r7, [sp, #24]
 8007982:	3301      	adds	r3, #1
 8007984:	e7e2      	b.n	800794c <_strtod_l+0x21c>
 8007986:	1c5f      	adds	r7, r3, #1
 8007988:	2f10      	cmp	r7, #16
 800798a:	bfde      	ittt	le
 800798c:	9f05      	ldrle	r7, [sp, #20]
 800798e:	434f      	mulle	r7, r1
 8007990:	9705      	strle	r7, [sp, #20]
 8007992:	e7f6      	b.n	8007982 <_strtod_l+0x252>
 8007994:	2c10      	cmp	r4, #16
 8007996:	bfdf      	itttt	le
 8007998:	230a      	movle	r3, #10
 800799a:	9905      	ldrle	r1, [sp, #20]
 800799c:	fb03 2301 	mlale	r3, r3, r1, r2
 80079a0:	9305      	strle	r3, [sp, #20]
 80079a2:	e7e0      	b.n	8007966 <_strtod_l+0x236>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	2301      	movs	r3, #1
 80079aa:	e77b      	b.n	80078a4 <_strtod_l+0x174>
 80079ac:	2700      	movs	r7, #0
 80079ae:	1cb2      	adds	r2, r6, #2
 80079b0:	9219      	str	r2, [sp, #100]	; 0x64
 80079b2:	78b2      	ldrb	r2, [r6, #2]
 80079b4:	e784      	b.n	80078c0 <_strtod_l+0x190>
 80079b6:	bf00      	nop
 80079b8:	0800b538 	.word	0x0800b538
 80079bc:	0800b2ec 	.word	0x0800b2ec
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	2701      	movs	r7, #1
 80079c6:	e7f2      	b.n	80079ae <_strtod_l+0x27e>
 80079c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079ca:	1c51      	adds	r1, r2, #1
 80079cc:	9119      	str	r1, [sp, #100]	; 0x64
 80079ce:	7852      	ldrb	r2, [r2, #1]
 80079d0:	2a30      	cmp	r2, #48	; 0x30
 80079d2:	d0f9      	beq.n	80079c8 <_strtod_l+0x298>
 80079d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80079d8:	2908      	cmp	r1, #8
 80079da:	f63f af77 	bhi.w	80078cc <_strtod_l+0x19c>
 80079de:	f04f 0e0a 	mov.w	lr, #10
 80079e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80079e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079e8:	9209      	str	r2, [sp, #36]	; 0x24
 80079ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079ec:	1c51      	adds	r1, r2, #1
 80079ee:	9119      	str	r1, [sp, #100]	; 0x64
 80079f0:	7852      	ldrb	r2, [r2, #1]
 80079f2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80079f6:	2d09      	cmp	r5, #9
 80079f8:	d935      	bls.n	8007a66 <_strtod_l+0x336>
 80079fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079fc:	1b49      	subs	r1, r1, r5
 80079fe:	2908      	cmp	r1, #8
 8007a00:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007a04:	dc02      	bgt.n	8007a0c <_strtod_l+0x2dc>
 8007a06:	4565      	cmp	r5, ip
 8007a08:	bfa8      	it	ge
 8007a0a:	4665      	movge	r5, ip
 8007a0c:	b107      	cbz	r7, 8007a10 <_strtod_l+0x2e0>
 8007a0e:	426d      	negs	r5, r5
 8007a10:	2c00      	cmp	r4, #0
 8007a12:	d14c      	bne.n	8007aae <_strtod_l+0x37e>
 8007a14:	9907      	ldr	r1, [sp, #28]
 8007a16:	4301      	orrs	r1, r0
 8007a18:	f47f aecb 	bne.w	80077b2 <_strtod_l+0x82>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f47f aee4 	bne.w	80077ea <_strtod_l+0xba>
 8007a22:	2a69      	cmp	r2, #105	; 0x69
 8007a24:	d026      	beq.n	8007a74 <_strtod_l+0x344>
 8007a26:	dc23      	bgt.n	8007a70 <_strtod_l+0x340>
 8007a28:	2a49      	cmp	r2, #73	; 0x49
 8007a2a:	d023      	beq.n	8007a74 <_strtod_l+0x344>
 8007a2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a2e:	f47f aedc 	bne.w	80077ea <_strtod_l+0xba>
 8007a32:	499d      	ldr	r1, [pc, #628]	; (8007ca8 <_strtod_l+0x578>)
 8007a34:	a819      	add	r0, sp, #100	; 0x64
 8007a36:	f001 fe17 	bl	8009668 <__match>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f43f aed5 	beq.w	80077ea <_strtod_l+0xba>
 8007a40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b28      	cmp	r3, #40	; 0x28
 8007a46:	d12c      	bne.n	8007aa2 <_strtod_l+0x372>
 8007a48:	4998      	ldr	r1, [pc, #608]	; (8007cac <_strtod_l+0x57c>)
 8007a4a:	aa1c      	add	r2, sp, #112	; 0x70
 8007a4c:	a819      	add	r0, sp, #100	; 0x64
 8007a4e:	f001 fe1f 	bl	8009690 <__hexnan>
 8007a52:	2805      	cmp	r0, #5
 8007a54:	d125      	bne.n	8007aa2 <_strtod_l+0x372>
 8007a56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007a5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a64:	e6a5      	b.n	80077b2 <_strtod_l+0x82>
 8007a66:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007a6a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007a6e:	e7bc      	b.n	80079ea <_strtod_l+0x2ba>
 8007a70:	2a6e      	cmp	r2, #110	; 0x6e
 8007a72:	e7dc      	b.n	8007a2e <_strtod_l+0x2fe>
 8007a74:	498e      	ldr	r1, [pc, #568]	; (8007cb0 <_strtod_l+0x580>)
 8007a76:	a819      	add	r0, sp, #100	; 0x64
 8007a78:	f001 fdf6 	bl	8009668 <__match>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f43f aeb4 	beq.w	80077ea <_strtod_l+0xba>
 8007a82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a84:	498b      	ldr	r1, [pc, #556]	; (8007cb4 <_strtod_l+0x584>)
 8007a86:	3b01      	subs	r3, #1
 8007a88:	a819      	add	r0, sp, #100	; 0x64
 8007a8a:	9319      	str	r3, [sp, #100]	; 0x64
 8007a8c:	f001 fdec 	bl	8009668 <__match>
 8007a90:	b910      	cbnz	r0, 8007a98 <_strtod_l+0x368>
 8007a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a94:	3301      	adds	r3, #1
 8007a96:	9319      	str	r3, [sp, #100]	; 0x64
 8007a98:	f04f 0800 	mov.w	r8, #0
 8007a9c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007cb8 <_strtod_l+0x588>
 8007aa0:	e687      	b.n	80077b2 <_strtod_l+0x82>
 8007aa2:	4886      	ldr	r0, [pc, #536]	; (8007cbc <_strtod_l+0x58c>)
 8007aa4:	f002 fdce 	bl	800a644 <nan>
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	4689      	mov	r9, r1
 8007aac:	e681      	b.n	80077b2 <_strtod_l+0x82>
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	f1bb 0f00 	cmp.w	fp, #0
 8007ab4:	bf08      	it	eq
 8007ab6:	46a3      	moveq	fp, r4
 8007ab8:	1aeb      	subs	r3, r5, r3
 8007aba:	2c10      	cmp	r4, #16
 8007abc:	9806      	ldr	r0, [sp, #24]
 8007abe:	4626      	mov	r6, r4
 8007ac0:	9307      	str	r3, [sp, #28]
 8007ac2:	bfa8      	it	ge
 8007ac4:	2610      	movge	r6, #16
 8007ac6:	f7f8 fc8d 	bl	80003e4 <__aeabi_ui2d>
 8007aca:	2c09      	cmp	r4, #9
 8007acc:	4680      	mov	r8, r0
 8007ace:	4689      	mov	r9, r1
 8007ad0:	dd13      	ble.n	8007afa <_strtod_l+0x3ca>
 8007ad2:	4b7b      	ldr	r3, [pc, #492]	; (8007cc0 <_strtod_l+0x590>)
 8007ad4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ad8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007adc:	f7f8 fcfc 	bl	80004d8 <__aeabi_dmul>
 8007ae0:	4680      	mov	r8, r0
 8007ae2:	9805      	ldr	r0, [sp, #20]
 8007ae4:	4689      	mov	r9, r1
 8007ae6:	f7f8 fc7d 	bl	80003e4 <__aeabi_ui2d>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fb3b 	bl	800016c <__adddf3>
 8007af6:	4680      	mov	r8, r0
 8007af8:	4689      	mov	r9, r1
 8007afa:	2c0f      	cmp	r4, #15
 8007afc:	dc36      	bgt.n	8007b6c <_strtod_l+0x43c>
 8007afe:	9b07      	ldr	r3, [sp, #28]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f43f ae56 	beq.w	80077b2 <_strtod_l+0x82>
 8007b06:	dd22      	ble.n	8007b4e <_strtod_l+0x41e>
 8007b08:	2b16      	cmp	r3, #22
 8007b0a:	dc09      	bgt.n	8007b20 <_strtod_l+0x3f0>
 8007b0c:	496c      	ldr	r1, [pc, #432]	; (8007cc0 <_strtod_l+0x590>)
 8007b0e:	4642      	mov	r2, r8
 8007b10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b14:	464b      	mov	r3, r9
 8007b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b1a:	f7f8 fcdd 	bl	80004d8 <__aeabi_dmul>
 8007b1e:	e7c3      	b.n	8007aa8 <_strtod_l+0x378>
 8007b20:	9a07      	ldr	r2, [sp, #28]
 8007b22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007b26:	4293      	cmp	r3, r2
 8007b28:	db20      	blt.n	8007b6c <_strtod_l+0x43c>
 8007b2a:	4d65      	ldr	r5, [pc, #404]	; (8007cc0 <_strtod_l+0x590>)
 8007b2c:	f1c4 040f 	rsb	r4, r4, #15
 8007b30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007b34:	4642      	mov	r2, r8
 8007b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	f7f8 fccc 	bl	80004d8 <__aeabi_dmul>
 8007b40:	9b07      	ldr	r3, [sp, #28]
 8007b42:	1b1c      	subs	r4, r3, r4
 8007b44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007b48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b4c:	e7e5      	b.n	8007b1a <_strtod_l+0x3ea>
 8007b4e:	9b07      	ldr	r3, [sp, #28]
 8007b50:	3316      	adds	r3, #22
 8007b52:	db0b      	blt.n	8007b6c <_strtod_l+0x43c>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	4640      	mov	r0, r8
 8007b58:	1b5d      	subs	r5, r3, r5
 8007b5a:	4b59      	ldr	r3, [pc, #356]	; (8007cc0 <_strtod_l+0x590>)
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b66:	f7f8 fde1 	bl	800072c <__aeabi_ddiv>
 8007b6a:	e79d      	b.n	8007aa8 <_strtod_l+0x378>
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	1ba6      	subs	r6, r4, r6
 8007b70:	441e      	add	r6, r3
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	dd74      	ble.n	8007c60 <_strtod_l+0x530>
 8007b76:	f016 030f 	ands.w	r3, r6, #15
 8007b7a:	d00a      	beq.n	8007b92 <_strtod_l+0x462>
 8007b7c:	4950      	ldr	r1, [pc, #320]	; (8007cc0 <_strtod_l+0x590>)
 8007b7e:	4642      	mov	r2, r8
 8007b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b88:	464b      	mov	r3, r9
 8007b8a:	f7f8 fca5 	bl	80004d8 <__aeabi_dmul>
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	f036 060f 	bics.w	r6, r6, #15
 8007b96:	d052      	beq.n	8007c3e <_strtod_l+0x50e>
 8007b98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007b9c:	dd27      	ble.n	8007bee <_strtod_l+0x4be>
 8007b9e:	f04f 0b00 	mov.w	fp, #0
 8007ba2:	f8cd b010 	str.w	fp, [sp, #16]
 8007ba6:	f8cd b020 	str.w	fp, [sp, #32]
 8007baa:	f8cd b018 	str.w	fp, [sp, #24]
 8007bae:	2322      	movs	r3, #34	; 0x22
 8007bb0:	f04f 0800 	mov.w	r8, #0
 8007bb4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007cb8 <_strtod_l+0x588>
 8007bb8:	f8ca 3000 	str.w	r3, [sl]
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f43f adf7 	beq.w	80077b2 <_strtod_l+0x82>
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bc8:	f001 fe78 	bl	80098bc <_Bfree>
 8007bcc:	4650      	mov	r0, sl
 8007bce:	9906      	ldr	r1, [sp, #24]
 8007bd0:	f001 fe74 	bl	80098bc <_Bfree>
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	9904      	ldr	r1, [sp, #16]
 8007bd8:	f001 fe70 	bl	80098bc <_Bfree>
 8007bdc:	4650      	mov	r0, sl
 8007bde:	9908      	ldr	r1, [sp, #32]
 8007be0:	f001 fe6c 	bl	80098bc <_Bfree>
 8007be4:	4659      	mov	r1, fp
 8007be6:	4650      	mov	r0, sl
 8007be8:	f001 fe68 	bl	80098bc <_Bfree>
 8007bec:	e5e1      	b.n	80077b2 <_strtod_l+0x82>
 8007bee:	4b35      	ldr	r3, [pc, #212]	; (8007cc4 <_strtod_l+0x594>)
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	461f      	mov	r7, r3
 8007bfa:	1136      	asrs	r6, r6, #4
 8007bfc:	2e01      	cmp	r6, #1
 8007bfe:	dc21      	bgt.n	8007c44 <_strtod_l+0x514>
 8007c00:	b10b      	cbz	r3, 8007c06 <_strtod_l+0x4d6>
 8007c02:	4680      	mov	r8, r0
 8007c04:	4689      	mov	r9, r1
 8007c06:	4b2f      	ldr	r3, [pc, #188]	; (8007cc4 <_strtod_l+0x594>)
 8007c08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007c0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007c10:	4642      	mov	r2, r8
 8007c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c16:	464b      	mov	r3, r9
 8007c18:	f7f8 fc5e 	bl	80004d8 <__aeabi_dmul>
 8007c1c:	4b26      	ldr	r3, [pc, #152]	; (8007cb8 <_strtod_l+0x588>)
 8007c1e:	460a      	mov	r2, r1
 8007c20:	400b      	ands	r3, r1
 8007c22:	4929      	ldr	r1, [pc, #164]	; (8007cc8 <_strtod_l+0x598>)
 8007c24:	4680      	mov	r8, r0
 8007c26:	428b      	cmp	r3, r1
 8007c28:	d8b9      	bhi.n	8007b9e <_strtod_l+0x46e>
 8007c2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c2e:	428b      	cmp	r3, r1
 8007c30:	bf86      	itte	hi
 8007c32:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c36:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007ccc <_strtod_l+0x59c>
 8007c3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	e07f      	b.n	8007d44 <_strtod_l+0x614>
 8007c44:	07f2      	lsls	r2, r6, #31
 8007c46:	d505      	bpl.n	8007c54 <_strtod_l+0x524>
 8007c48:	9b05      	ldr	r3, [sp, #20]
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 fc43 	bl	80004d8 <__aeabi_dmul>
 8007c52:	2301      	movs	r3, #1
 8007c54:	9a05      	ldr	r2, [sp, #20]
 8007c56:	3701      	adds	r7, #1
 8007c58:	3208      	adds	r2, #8
 8007c5a:	1076      	asrs	r6, r6, #1
 8007c5c:	9205      	str	r2, [sp, #20]
 8007c5e:	e7cd      	b.n	8007bfc <_strtod_l+0x4cc>
 8007c60:	d0ed      	beq.n	8007c3e <_strtod_l+0x50e>
 8007c62:	4276      	negs	r6, r6
 8007c64:	f016 020f 	ands.w	r2, r6, #15
 8007c68:	d00a      	beq.n	8007c80 <_strtod_l+0x550>
 8007c6a:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <_strtod_l+0x590>)
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c72:	4649      	mov	r1, r9
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fd58 	bl	800072c <__aeabi_ddiv>
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	1136      	asrs	r6, r6, #4
 8007c82:	d0dc      	beq.n	8007c3e <_strtod_l+0x50e>
 8007c84:	2e1f      	cmp	r6, #31
 8007c86:	dd23      	ble.n	8007cd0 <_strtod_l+0x5a0>
 8007c88:	f04f 0b00 	mov.w	fp, #0
 8007c8c:	f8cd b010 	str.w	fp, [sp, #16]
 8007c90:	f8cd b020 	str.w	fp, [sp, #32]
 8007c94:	f8cd b018 	str.w	fp, [sp, #24]
 8007c98:	2322      	movs	r3, #34	; 0x22
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	f04f 0900 	mov.w	r9, #0
 8007ca2:	f8ca 3000 	str.w	r3, [sl]
 8007ca6:	e789      	b.n	8007bbc <_strtod_l+0x48c>
 8007ca8:	0800b2bd 	.word	0x0800b2bd
 8007cac:	0800b300 	.word	0x0800b300
 8007cb0:	0800b2b5 	.word	0x0800b2b5
 8007cb4:	0800b444 	.word	0x0800b444
 8007cb8:	7ff00000 	.word	0x7ff00000
 8007cbc:	0800b6f0 	.word	0x0800b6f0
 8007cc0:	0800b5d0 	.word	0x0800b5d0
 8007cc4:	0800b5a8 	.word	0x0800b5a8
 8007cc8:	7ca00000 	.word	0x7ca00000
 8007ccc:	7fefffff 	.word	0x7fefffff
 8007cd0:	f016 0310 	ands.w	r3, r6, #16
 8007cd4:	bf18      	it	ne
 8007cd6:	236a      	movne	r3, #106	; 0x6a
 8007cd8:	4640      	mov	r0, r8
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	4649      	mov	r1, r9
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4fb0      	ldr	r7, [pc, #704]	; (8007fa4 <_strtod_l+0x874>)
 8007ce2:	07f2      	lsls	r2, r6, #31
 8007ce4:	d504      	bpl.n	8007cf0 <_strtod_l+0x5c0>
 8007ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cea:	f7f8 fbf5 	bl	80004d8 <__aeabi_dmul>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	1076      	asrs	r6, r6, #1
 8007cf2:	f107 0708 	add.w	r7, r7, #8
 8007cf6:	d1f4      	bne.n	8007ce2 <_strtod_l+0x5b2>
 8007cf8:	b10b      	cbz	r3, 8007cfe <_strtod_l+0x5ce>
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	4689      	mov	r9, r1
 8007cfe:	9b05      	ldr	r3, [sp, #20]
 8007d00:	b1c3      	cbz	r3, 8007d34 <_strtod_l+0x604>
 8007d02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007d06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	dd11      	ble.n	8007d34 <_strtod_l+0x604>
 8007d10:	2b1f      	cmp	r3, #31
 8007d12:	f340 8127 	ble.w	8007f64 <_strtod_l+0x834>
 8007d16:	2b34      	cmp	r3, #52	; 0x34
 8007d18:	bfd8      	it	le
 8007d1a:	f04f 33ff 	movle.w	r3, #4294967295
 8007d1e:	f04f 0800 	mov.w	r8, #0
 8007d22:	bfcf      	iteee	gt
 8007d24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d2c:	fa03 f202 	lslle.w	r2, r3, r2
 8007d30:	ea02 0901 	andle.w	r9, r2, r1
 8007d34:	2200      	movs	r2, #0
 8007d36:	2300      	movs	r3, #0
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	f7f8 fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d1a1      	bne.n	8007c88 <_strtod_l+0x558>
 8007d44:	9b06      	ldr	r3, [sp, #24]
 8007d46:	465a      	mov	r2, fp
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	4623      	mov	r3, r4
 8007d4e:	9908      	ldr	r1, [sp, #32]
 8007d50:	f001 fe1c 	bl	800998c <__s2b>
 8007d54:	9008      	str	r0, [sp, #32]
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f43f af21 	beq.w	8007b9e <_strtod_l+0x46e>
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	f04f 0b00 	mov.w	fp, #0
 8007d62:	1b5d      	subs	r5, r3, r5
 8007d64:	9b07      	ldr	r3, [sp, #28]
 8007d66:	f8cd b010 	str.w	fp, [sp, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfb4      	ite	lt
 8007d6e:	462b      	movlt	r3, r5
 8007d70:	2300      	movge	r3, #0
 8007d72:	930e      	str	r3, [sp, #56]	; 0x38
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d7a:	9314      	str	r3, [sp, #80]	; 0x50
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	4650      	mov	r0, sl
 8007d80:	6859      	ldr	r1, [r3, #4]
 8007d82:	f001 fd5b 	bl	800983c <_Balloc>
 8007d86:	9006      	str	r0, [sp, #24]
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f af10 	beq.w	8007bae <_strtod_l+0x47e>
 8007d8e:	9b08      	ldr	r3, [sp, #32]
 8007d90:	300c      	adds	r0, #12
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	f103 010c 	add.w	r1, r3, #12
 8007d98:	3202      	adds	r2, #2
 8007d9a:	0092      	lsls	r2, r2, #2
 8007d9c:	f001 fd40 	bl	8009820 <memcpy>
 8007da0:	ab1c      	add	r3, sp, #112	; 0x70
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	ab1b      	add	r3, sp, #108	; 0x6c
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	4650      	mov	r0, sl
 8007dae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007db2:	f002 f92d 	bl	800a010 <__d2b>
 8007db6:	901a      	str	r0, [sp, #104]	; 0x68
 8007db8:	2800      	cmp	r0, #0
 8007dba:	f43f aef8 	beq.w	8007bae <_strtod_l+0x47e>
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	f001 fe7b 	bl	8009abc <__i2b>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	9004      	str	r0, [sp, #16]
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	f43f aeef 	beq.w	8007bae <_strtod_l+0x47e>
 8007dd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007dd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	bfab      	itete	ge
 8007dd8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007dda:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007ddc:	18ee      	addge	r6, r5, r3
 8007dde:	1b5c      	sublt	r4, r3, r5
 8007de0:	9b05      	ldr	r3, [sp, #20]
 8007de2:	bfa8      	it	ge
 8007de4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007de6:	eba5 0503 	sub.w	r5, r5, r3
 8007dea:	4415      	add	r5, r2
 8007dec:	4b6e      	ldr	r3, [pc, #440]	; (8007fa8 <_strtod_l+0x878>)
 8007dee:	f105 35ff 	add.w	r5, r5, #4294967295
 8007df2:	bfb8      	it	lt
 8007df4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007df6:	429d      	cmp	r5, r3
 8007df8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007dfc:	f280 80c4 	bge.w	8007f88 <_strtod_l+0x858>
 8007e00:	1b5b      	subs	r3, r3, r5
 8007e02:	2b1f      	cmp	r3, #31
 8007e04:	f04f 0701 	mov.w	r7, #1
 8007e08:	eba2 0203 	sub.w	r2, r2, r3
 8007e0c:	f300 80b1 	bgt.w	8007f72 <_strtod_l+0x842>
 8007e10:	2500      	movs	r5, #0
 8007e12:	fa07 f303 	lsl.w	r3, r7, r3
 8007e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e18:	18b7      	adds	r7, r6, r2
 8007e1a:	9b05      	ldr	r3, [sp, #20]
 8007e1c:	42be      	cmp	r6, r7
 8007e1e:	4414      	add	r4, r2
 8007e20:	441c      	add	r4, r3
 8007e22:	4633      	mov	r3, r6
 8007e24:	bfa8      	it	ge
 8007e26:	463b      	movge	r3, r7
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	bfa8      	it	ge
 8007e2c:	4623      	movge	r3, r4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bfc2      	ittt	gt
 8007e32:	1aff      	subgt	r7, r7, r3
 8007e34:	1ae4      	subgt	r4, r4, r3
 8007e36:	1af6      	subgt	r6, r6, r3
 8007e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dd17      	ble.n	8007e6e <_strtod_l+0x73e>
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4650      	mov	r0, sl
 8007e42:	9904      	ldr	r1, [sp, #16]
 8007e44:	f001 fef8 	bl	8009c38 <__pow5mult>
 8007e48:	9004      	str	r0, [sp, #16]
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f aeaf 	beq.w	8007bae <_strtod_l+0x47e>
 8007e50:	4601      	mov	r1, r0
 8007e52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e54:	4650      	mov	r0, sl
 8007e56:	f001 fe47 	bl	8009ae8 <__multiply>
 8007e5a:	9009      	str	r0, [sp, #36]	; 0x24
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f43f aea6 	beq.w	8007bae <_strtod_l+0x47e>
 8007e62:	4650      	mov	r0, sl
 8007e64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e66:	f001 fd29 	bl	80098bc <_Bfree>
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e6e:	2f00      	cmp	r7, #0
 8007e70:	f300 808e 	bgt.w	8007f90 <_strtod_l+0x860>
 8007e74:	9b07      	ldr	r3, [sp, #28]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dd08      	ble.n	8007e8c <_strtod_l+0x75c>
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e7e:	9906      	ldr	r1, [sp, #24]
 8007e80:	f001 feda 	bl	8009c38 <__pow5mult>
 8007e84:	9006      	str	r0, [sp, #24]
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f ae91 	beq.w	8007bae <_strtod_l+0x47e>
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	dd08      	ble.n	8007ea2 <_strtod_l+0x772>
 8007e90:	4622      	mov	r2, r4
 8007e92:	4650      	mov	r0, sl
 8007e94:	9906      	ldr	r1, [sp, #24]
 8007e96:	f001 ff29 	bl	8009cec <__lshift>
 8007e9a:	9006      	str	r0, [sp, #24]
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f ae86 	beq.w	8007bae <_strtod_l+0x47e>
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	dd08      	ble.n	8007eb8 <_strtod_l+0x788>
 8007ea6:	4632      	mov	r2, r6
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	9904      	ldr	r1, [sp, #16]
 8007eac:	f001 ff1e 	bl	8009cec <__lshift>
 8007eb0:	9004      	str	r0, [sp, #16]
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f43f ae7b 	beq.w	8007bae <_strtod_l+0x47e>
 8007eb8:	4650      	mov	r0, sl
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ebe:	f001 ffa1 	bl	8009e04 <__mdiff>
 8007ec2:	4683      	mov	fp, r0
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f ae72 	beq.w	8007bae <_strtod_l+0x47e>
 8007eca:	2400      	movs	r4, #0
 8007ecc:	68c3      	ldr	r3, [r0, #12]
 8007ece:	9904      	ldr	r1, [sp, #16]
 8007ed0:	60c4      	str	r4, [r0, #12]
 8007ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed4:	f001 ff7a 	bl	8009dcc <__mcmp>
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	da6b      	bge.n	8007fb4 <_strtod_l+0x884>
 8007edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ede:	ea53 0308 	orrs.w	r3, r3, r8
 8007ee2:	f040 8091 	bne.w	8008008 <_strtod_l+0x8d8>
 8007ee6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f040 808c 	bne.w	8008008 <_strtod_l+0x8d8>
 8007ef0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef4:	0d1b      	lsrs	r3, r3, #20
 8007ef6:	051b      	lsls	r3, r3, #20
 8007ef8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007efc:	f240 8084 	bls.w	8008008 <_strtod_l+0x8d8>
 8007f00:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007f04:	b91b      	cbnz	r3, 8007f0e <_strtod_l+0x7de>
 8007f06:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	dd7c      	ble.n	8008008 <_strtod_l+0x8d8>
 8007f0e:	4659      	mov	r1, fp
 8007f10:	2201      	movs	r2, #1
 8007f12:	4650      	mov	r0, sl
 8007f14:	f001 feea 	bl	8009cec <__lshift>
 8007f18:	9904      	ldr	r1, [sp, #16]
 8007f1a:	4683      	mov	fp, r0
 8007f1c:	f001 ff56 	bl	8009dcc <__mcmp>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	dd71      	ble.n	8008008 <_strtod_l+0x8d8>
 8007f24:	9905      	ldr	r1, [sp, #20]
 8007f26:	464b      	mov	r3, r9
 8007f28:	4a20      	ldr	r2, [pc, #128]	; (8007fac <_strtod_l+0x87c>)
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	f000 808c 	beq.w	8008048 <_strtod_l+0x918>
 8007f30:	ea02 0109 	and.w	r1, r2, r9
 8007f34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f38:	f300 8086 	bgt.w	8008048 <_strtod_l+0x918>
 8007f3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f40:	f77f aeaa 	ble.w	8007c98 <_strtod_l+0x568>
 8007f44:	4640      	mov	r0, r8
 8007f46:	4649      	mov	r1, r9
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <_strtod_l+0x880>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f7f8 fac4 	bl	80004d8 <__aeabi_dmul>
 8007f50:	460b      	mov	r3, r1
 8007f52:	4303      	orrs	r3, r0
 8007f54:	bf08      	it	eq
 8007f56:	2322      	moveq	r3, #34	; 0x22
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4689      	mov	r9, r1
 8007f5c:	bf08      	it	eq
 8007f5e:	f8ca 3000 	streq.w	r3, [sl]
 8007f62:	e62f      	b.n	8007bc4 <_strtod_l+0x494>
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	ea03 0808 	and.w	r8, r3, r8
 8007f70:	e6e0      	b.n	8007d34 <_strtod_l+0x604>
 8007f72:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007f76:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007f7a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007f7e:	35e2      	adds	r5, #226	; 0xe2
 8007f80:	fa07 f505 	lsl.w	r5, r7, r5
 8007f84:	970f      	str	r7, [sp, #60]	; 0x3c
 8007f86:	e747      	b.n	8007e18 <_strtod_l+0x6e8>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f8e:	e743      	b.n	8007e18 <_strtod_l+0x6e8>
 8007f90:	463a      	mov	r2, r7
 8007f92:	4650      	mov	r0, sl
 8007f94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f96:	f001 fea9 	bl	8009cec <__lshift>
 8007f9a:	901a      	str	r0, [sp, #104]	; 0x68
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f47f af69 	bne.w	8007e74 <_strtod_l+0x744>
 8007fa2:	e604      	b.n	8007bae <_strtod_l+0x47e>
 8007fa4:	0800b318 	.word	0x0800b318
 8007fa8:	fffffc02 	.word	0xfffffc02
 8007fac:	7ff00000 	.word	0x7ff00000
 8007fb0:	39500000 	.word	0x39500000
 8007fb4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007fb8:	d165      	bne.n	8008086 <_strtod_l+0x956>
 8007fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fc0:	b35a      	cbz	r2, 800801a <_strtod_l+0x8ea>
 8007fc2:	4a99      	ldr	r2, [pc, #612]	; (8008228 <_strtod_l+0xaf8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d12b      	bne.n	8008020 <_strtod_l+0x8f0>
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	4641      	mov	r1, r8
 8007fcc:	b303      	cbz	r3, 8008010 <_strtod_l+0x8e0>
 8007fce:	464a      	mov	r2, r9
 8007fd0:	4b96      	ldr	r3, [pc, #600]	; (800822c <_strtod_l+0xafc>)
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	d81b      	bhi.n	8008016 <_strtod_l+0x8e6>
 8007fde:	0d1b      	lsrs	r3, r3, #20
 8007fe0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	d119      	bne.n	8008020 <_strtod_l+0x8f0>
 8007fec:	4b90      	ldr	r3, [pc, #576]	; (8008230 <_strtod_l+0xb00>)
 8007fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d102      	bne.n	8007ffa <_strtod_l+0x8ca>
 8007ff4:	3101      	adds	r1, #1
 8007ff6:	f43f adda 	beq.w	8007bae <_strtod_l+0x47e>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	4b8b      	ldr	r3, [pc, #556]	; (800822c <_strtod_l+0xafc>)
 8008000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008002:	401a      	ands	r2, r3
 8008004:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d19a      	bne.n	8007f44 <_strtod_l+0x814>
 800800e:	e5d9      	b.n	8007bc4 <_strtod_l+0x494>
 8008010:	f04f 33ff 	mov.w	r3, #4294967295
 8008014:	e7e8      	b.n	8007fe8 <_strtod_l+0x8b8>
 8008016:	4613      	mov	r3, r2
 8008018:	e7e6      	b.n	8007fe8 <_strtod_l+0x8b8>
 800801a:	ea53 0308 	orrs.w	r3, r3, r8
 800801e:	d081      	beq.n	8007f24 <_strtod_l+0x7f4>
 8008020:	b1e5      	cbz	r5, 800805c <_strtod_l+0x92c>
 8008022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008024:	421d      	tst	r5, r3
 8008026:	d0ef      	beq.n	8008008 <_strtod_l+0x8d8>
 8008028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	9a05      	ldr	r2, [sp, #20]
 8008030:	b1c3      	cbz	r3, 8008064 <_strtod_l+0x934>
 8008032:	f7ff fb5b 	bl	80076ec <sulp>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800803e:	f7f8 f895 	bl	800016c <__adddf3>
 8008042:	4680      	mov	r8, r0
 8008044:	4689      	mov	r9, r1
 8008046:	e7df      	b.n	8008008 <_strtod_l+0x8d8>
 8008048:	4013      	ands	r3, r2
 800804a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800804e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008052:	f04f 38ff 	mov.w	r8, #4294967295
 8008056:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800805a:	e7d5      	b.n	8008008 <_strtod_l+0x8d8>
 800805c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800805e:	ea13 0f08 	tst.w	r3, r8
 8008062:	e7e0      	b.n	8008026 <_strtod_l+0x8f6>
 8008064:	f7ff fb42 	bl	80076ec <sulp>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008070:	f7f8 f87a 	bl	8000168 <__aeabi_dsub>
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	4680      	mov	r8, r0
 800807a:	4689      	mov	r9, r1
 800807c:	f7f8 fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8008080:	2800      	cmp	r0, #0
 8008082:	d0c1      	beq.n	8008008 <_strtod_l+0x8d8>
 8008084:	e608      	b.n	8007c98 <_strtod_l+0x568>
 8008086:	4658      	mov	r0, fp
 8008088:	9904      	ldr	r1, [sp, #16]
 800808a:	f002 f81d 	bl	800a0c8 <__ratio>
 800808e:	2200      	movs	r2, #0
 8008090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	f7f8 fc9a 	bl	80009d0 <__aeabi_dcmple>
 800809c:	2800      	cmp	r0, #0
 800809e:	d070      	beq.n	8008182 <_strtod_l+0xa52>
 80080a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d042      	beq.n	800812c <_strtod_l+0x9fc>
 80080a6:	2600      	movs	r6, #0
 80080a8:	4f62      	ldr	r7, [pc, #392]	; (8008234 <_strtod_l+0xb04>)
 80080aa:	4d62      	ldr	r5, [pc, #392]	; (8008234 <_strtod_l+0xb04>)
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b2:	0d1b      	lsrs	r3, r3, #20
 80080b4:	051b      	lsls	r3, r3, #20
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080ba:	4b5f      	ldr	r3, [pc, #380]	; (8008238 <_strtod_l+0xb08>)
 80080bc:	429a      	cmp	r2, r3
 80080be:	f040 80c3 	bne.w	8008248 <_strtod_l+0xb18>
 80080c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c4:	4640      	mov	r0, r8
 80080c6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80080ca:	4649      	mov	r1, r9
 80080cc:	f001 ff26 	bl	8009f1c <__ulp>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7f8 f9fe 	bl	80004d8 <__aeabi_dmul>
 80080dc:	4642      	mov	r2, r8
 80080de:	464b      	mov	r3, r9
 80080e0:	f7f8 f844 	bl	800016c <__adddf3>
 80080e4:	460b      	mov	r3, r1
 80080e6:	4951      	ldr	r1, [pc, #324]	; (800822c <_strtod_l+0xafc>)
 80080e8:	4a54      	ldr	r2, [pc, #336]	; (800823c <_strtod_l+0xb0c>)
 80080ea:	4019      	ands	r1, r3
 80080ec:	4291      	cmp	r1, r2
 80080ee:	4680      	mov	r8, r0
 80080f0:	d95d      	bls.n	80081ae <_strtod_l+0xa7e>
 80080f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f4:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <_strtod_l+0xb00>)
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d103      	bne.n	8008102 <_strtod_l+0x9d2>
 80080fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fc:	3301      	adds	r3, #1
 80080fe:	f43f ad56 	beq.w	8007bae <_strtod_l+0x47e>
 8008102:	f04f 38ff 	mov.w	r8, #4294967295
 8008106:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008230 <_strtod_l+0xb00>
 800810a:	4650      	mov	r0, sl
 800810c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800810e:	f001 fbd5 	bl	80098bc <_Bfree>
 8008112:	4650      	mov	r0, sl
 8008114:	9906      	ldr	r1, [sp, #24]
 8008116:	f001 fbd1 	bl	80098bc <_Bfree>
 800811a:	4650      	mov	r0, sl
 800811c:	9904      	ldr	r1, [sp, #16]
 800811e:	f001 fbcd 	bl	80098bc <_Bfree>
 8008122:	4659      	mov	r1, fp
 8008124:	4650      	mov	r0, sl
 8008126:	f001 fbc9 	bl	80098bc <_Bfree>
 800812a:	e627      	b.n	8007d7c <_strtod_l+0x64c>
 800812c:	f1b8 0f00 	cmp.w	r8, #0
 8008130:	d119      	bne.n	8008166 <_strtod_l+0xa36>
 8008132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	b9e3      	cbnz	r3, 8008174 <_strtod_l+0xa44>
 800813a:	2200      	movs	r2, #0
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	4b3c      	ldr	r3, [pc, #240]	; (8008234 <_strtod_l+0xb04>)
 8008142:	f7f8 fc3b 	bl	80009bc <__aeabi_dcmplt>
 8008146:	b9c8      	cbnz	r0, 800817c <_strtod_l+0xa4c>
 8008148:	2200      	movs	r2, #0
 800814a:	4630      	mov	r0, r6
 800814c:	4639      	mov	r1, r7
 800814e:	4b3c      	ldr	r3, [pc, #240]	; (8008240 <_strtod_l+0xb10>)
 8008150:	f7f8 f9c2 	bl	80004d8 <__aeabi_dmul>
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800815c:	9416      	str	r4, [sp, #88]	; 0x58
 800815e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008160:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008164:	e7a2      	b.n	80080ac <_strtod_l+0x97c>
 8008166:	f1b8 0f01 	cmp.w	r8, #1
 800816a:	d103      	bne.n	8008174 <_strtod_l+0xa44>
 800816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	f43f ad92 	beq.w	8007c98 <_strtod_l+0x568>
 8008174:	2600      	movs	r6, #0
 8008176:	2400      	movs	r4, #0
 8008178:	4f32      	ldr	r7, [pc, #200]	; (8008244 <_strtod_l+0xb14>)
 800817a:	e796      	b.n	80080aa <_strtod_l+0x97a>
 800817c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800817e:	4d30      	ldr	r5, [pc, #192]	; (8008240 <_strtod_l+0xb10>)
 8008180:	e7ea      	b.n	8008158 <_strtod_l+0xa28>
 8008182:	4b2f      	ldr	r3, [pc, #188]	; (8008240 <_strtod_l+0xb10>)
 8008184:	2200      	movs	r2, #0
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 f9a5 	bl	80004d8 <__aeabi_dmul>
 800818e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	b933      	cbnz	r3, 80081a4 <_strtod_l+0xa74>
 8008196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800819a:	9010      	str	r0, [sp, #64]	; 0x40
 800819c:	9311      	str	r3, [sp, #68]	; 0x44
 800819e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80081a2:	e783      	b.n	80080ac <_strtod_l+0x97c>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80081ac:	e7f7      	b.n	800819e <_strtod_l+0xa6e>
 80081ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1a8      	bne.n	800810a <_strtod_l+0x9da>
 80081b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081be:	0d1b      	lsrs	r3, r3, #20
 80081c0:	051b      	lsls	r3, r3, #20
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d1a1      	bne.n	800810a <_strtod_l+0x9da>
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 fe51 	bl	8000e70 <__aeabi_d2lz>
 80081ce:	f7f8 f955 	bl	800047c <__aeabi_l2d>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f7 ffc5 	bl	8000168 <__aeabi_dsub>
 80081de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e4:	ea43 0308 	orr.w	r3, r3, r8
 80081e8:	4313      	orrs	r3, r2
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	d066      	beq.n	80082be <_strtod_l+0xb8e>
 80081f0:	a309      	add	r3, pc, #36	; (adr r3, 8008218 <_strtod_l+0xae8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fbe1 	bl	80009bc <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f47f ace2 	bne.w	8007bc4 <_strtod_l+0x494>
 8008200:	a307      	add	r3, pc, #28	; (adr r3, 8008220 <_strtod_l+0xaf0>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	4620      	mov	r0, r4
 8008208:	4629      	mov	r1, r5
 800820a:	f7f8 fbf5 	bl	80009f8 <__aeabi_dcmpgt>
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f af7b 	beq.w	800810a <_strtod_l+0x9da>
 8008214:	e4d6      	b.n	8007bc4 <_strtod_l+0x494>
 8008216:	bf00      	nop
 8008218:	94a03595 	.word	0x94a03595
 800821c:	3fdfffff 	.word	0x3fdfffff
 8008220:	35afe535 	.word	0x35afe535
 8008224:	3fe00000 	.word	0x3fe00000
 8008228:	000fffff 	.word	0x000fffff
 800822c:	7ff00000 	.word	0x7ff00000
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	3ff00000 	.word	0x3ff00000
 8008238:	7fe00000 	.word	0x7fe00000
 800823c:	7c9fffff 	.word	0x7c9fffff
 8008240:	3fe00000 	.word	0x3fe00000
 8008244:	bff00000 	.word	0xbff00000
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	b313      	cbz	r3, 8008292 <_strtod_l+0xb62>
 800824c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800824e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008252:	d81e      	bhi.n	8008292 <_strtod_l+0xb62>
 8008254:	a326      	add	r3, pc, #152	; (adr r3, 80082f0 <_strtod_l+0xbc0>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	4620      	mov	r0, r4
 800825c:	4629      	mov	r1, r5
 800825e:	f7f8 fbb7 	bl	80009d0 <__aeabi_dcmple>
 8008262:	b190      	cbz	r0, 800828a <_strtod_l+0xb5a>
 8008264:	4629      	mov	r1, r5
 8008266:	4620      	mov	r0, r4
 8008268:	f7f8 fc0e 	bl	8000a88 <__aeabi_d2uiz>
 800826c:	2801      	cmp	r0, #1
 800826e:	bf38      	it	cc
 8008270:	2001      	movcc	r0, #1
 8008272:	f7f8 f8b7 	bl	80003e4 <__aeabi_ui2d>
 8008276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	b9d3      	cbnz	r3, 80082b4 <_strtod_l+0xb84>
 800827e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008282:	9012      	str	r0, [sp, #72]	; 0x48
 8008284:	9313      	str	r3, [sp, #76]	; 0x4c
 8008286:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800828a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800828c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008290:	1a9f      	subs	r7, r3, r2
 8008292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008296:	f001 fe41 	bl	8009f1c <__ulp>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 f919 	bl	80004d8 <__aeabi_dmul>
 80082a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082aa:	f7f7 ff5f 	bl	800016c <__adddf3>
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	e77e      	b.n	80081b2 <_strtod_l+0xa82>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80082bc:	e7e3      	b.n	8008286 <_strtod_l+0xb56>
 80082be:	a30e      	add	r3, pc, #56	; (adr r3, 80082f8 <_strtod_l+0xbc8>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f8 fb7a 	bl	80009bc <__aeabi_dcmplt>
 80082c8:	e7a1      	b.n	800820e <_strtod_l+0xade>
 80082ca:	2300      	movs	r3, #0
 80082cc:	930a      	str	r3, [sp, #40]	; 0x28
 80082ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	f7ff ba71 	b.w	80077ba <_strtod_l+0x8a>
 80082d8:	2a65      	cmp	r2, #101	; 0x65
 80082da:	f43f ab63 	beq.w	80079a4 <_strtod_l+0x274>
 80082de:	2a45      	cmp	r2, #69	; 0x45
 80082e0:	f43f ab60 	beq.w	80079a4 <_strtod_l+0x274>
 80082e4:	2301      	movs	r3, #1
 80082e6:	f7ff bb95 	b.w	8007a14 <_strtod_l+0x2e4>
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w
 80082f0:	ffc00000 	.word	0xffc00000
 80082f4:	41dfffff 	.word	0x41dfffff
 80082f8:	94a03595 	.word	0x94a03595
 80082fc:	3fcfffff 	.word	0x3fcfffff

08008300 <_strtod_r>:
 8008300:	4b01      	ldr	r3, [pc, #4]	; (8008308 <_strtod_r+0x8>)
 8008302:	f7ff ba15 	b.w	8007730 <_strtod_l>
 8008306:	bf00      	nop
 8008308:	20000074 	.word	0x20000074

0800830c <_strtol_l.constprop.0>:
 800830c:	2b01      	cmp	r3, #1
 800830e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008312:	4680      	mov	r8, r0
 8008314:	d001      	beq.n	800831a <_strtol_l.constprop.0+0xe>
 8008316:	2b24      	cmp	r3, #36	; 0x24
 8008318:	d906      	bls.n	8008328 <_strtol_l.constprop.0+0x1c>
 800831a:	f7fe fb23 	bl	8006964 <__errno>
 800831e:	2316      	movs	r3, #22
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	2000      	movs	r0, #0
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	460d      	mov	r5, r1
 800832a:	4f35      	ldr	r7, [pc, #212]	; (8008400 <_strtol_l.constprop.0+0xf4>)
 800832c:	4628      	mov	r0, r5
 800832e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008332:	5de6      	ldrb	r6, [r4, r7]
 8008334:	f016 0608 	ands.w	r6, r6, #8
 8008338:	d1f8      	bne.n	800832c <_strtol_l.constprop.0+0x20>
 800833a:	2c2d      	cmp	r4, #45	; 0x2d
 800833c:	d12f      	bne.n	800839e <_strtol_l.constprop.0+0x92>
 800833e:	2601      	movs	r6, #1
 8008340:	782c      	ldrb	r4, [r5, #0]
 8008342:	1c85      	adds	r5, r0, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d057      	beq.n	80083f8 <_strtol_l.constprop.0+0xec>
 8008348:	2b10      	cmp	r3, #16
 800834a:	d109      	bne.n	8008360 <_strtol_l.constprop.0+0x54>
 800834c:	2c30      	cmp	r4, #48	; 0x30
 800834e:	d107      	bne.n	8008360 <_strtol_l.constprop.0+0x54>
 8008350:	7828      	ldrb	r0, [r5, #0]
 8008352:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008356:	2858      	cmp	r0, #88	; 0x58
 8008358:	d149      	bne.n	80083ee <_strtol_l.constprop.0+0xe2>
 800835a:	2310      	movs	r3, #16
 800835c:	786c      	ldrb	r4, [r5, #1]
 800835e:	3502      	adds	r5, #2
 8008360:	2700      	movs	r7, #0
 8008362:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008366:	f10e 3eff 	add.w	lr, lr, #4294967295
 800836a:	fbbe f9f3 	udiv	r9, lr, r3
 800836e:	4638      	mov	r0, r7
 8008370:	fb03 ea19 	mls	sl, r3, r9, lr
 8008374:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008378:	f1bc 0f09 	cmp.w	ip, #9
 800837c:	d814      	bhi.n	80083a8 <_strtol_l.constprop.0+0x9c>
 800837e:	4664      	mov	r4, ip
 8008380:	42a3      	cmp	r3, r4
 8008382:	dd22      	ble.n	80083ca <_strtol_l.constprop.0+0xbe>
 8008384:	2f00      	cmp	r7, #0
 8008386:	db1d      	blt.n	80083c4 <_strtol_l.constprop.0+0xb8>
 8008388:	4581      	cmp	r9, r0
 800838a:	d31b      	bcc.n	80083c4 <_strtol_l.constprop.0+0xb8>
 800838c:	d101      	bne.n	8008392 <_strtol_l.constprop.0+0x86>
 800838e:	45a2      	cmp	sl, r4
 8008390:	db18      	blt.n	80083c4 <_strtol_l.constprop.0+0xb8>
 8008392:	2701      	movs	r7, #1
 8008394:	fb00 4003 	mla	r0, r0, r3, r4
 8008398:	f815 4b01 	ldrb.w	r4, [r5], #1
 800839c:	e7ea      	b.n	8008374 <_strtol_l.constprop.0+0x68>
 800839e:	2c2b      	cmp	r4, #43	; 0x2b
 80083a0:	bf04      	itt	eq
 80083a2:	782c      	ldrbeq	r4, [r5, #0]
 80083a4:	1c85      	addeq	r5, r0, #2
 80083a6:	e7cd      	b.n	8008344 <_strtol_l.constprop.0+0x38>
 80083a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083ac:	f1bc 0f19 	cmp.w	ip, #25
 80083b0:	d801      	bhi.n	80083b6 <_strtol_l.constprop.0+0xaa>
 80083b2:	3c37      	subs	r4, #55	; 0x37
 80083b4:	e7e4      	b.n	8008380 <_strtol_l.constprop.0+0x74>
 80083b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083ba:	f1bc 0f19 	cmp.w	ip, #25
 80083be:	d804      	bhi.n	80083ca <_strtol_l.constprop.0+0xbe>
 80083c0:	3c57      	subs	r4, #87	; 0x57
 80083c2:	e7dd      	b.n	8008380 <_strtol_l.constprop.0+0x74>
 80083c4:	f04f 37ff 	mov.w	r7, #4294967295
 80083c8:	e7e6      	b.n	8008398 <_strtol_l.constprop.0+0x8c>
 80083ca:	2f00      	cmp	r7, #0
 80083cc:	da07      	bge.n	80083de <_strtol_l.constprop.0+0xd2>
 80083ce:	2322      	movs	r3, #34	; 0x22
 80083d0:	4670      	mov	r0, lr
 80083d2:	f8c8 3000 	str.w	r3, [r8]
 80083d6:	2a00      	cmp	r2, #0
 80083d8:	d0a4      	beq.n	8008324 <_strtol_l.constprop.0+0x18>
 80083da:	1e69      	subs	r1, r5, #1
 80083dc:	e005      	b.n	80083ea <_strtol_l.constprop.0+0xde>
 80083de:	b106      	cbz	r6, 80083e2 <_strtol_l.constprop.0+0xd6>
 80083e0:	4240      	negs	r0, r0
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	d09e      	beq.n	8008324 <_strtol_l.constprop.0+0x18>
 80083e6:	2f00      	cmp	r7, #0
 80083e8:	d1f7      	bne.n	80083da <_strtol_l.constprop.0+0xce>
 80083ea:	6011      	str	r1, [r2, #0]
 80083ec:	e79a      	b.n	8008324 <_strtol_l.constprop.0+0x18>
 80083ee:	2430      	movs	r4, #48	; 0x30
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1b5      	bne.n	8008360 <_strtol_l.constprop.0+0x54>
 80083f4:	2308      	movs	r3, #8
 80083f6:	e7b3      	b.n	8008360 <_strtol_l.constprop.0+0x54>
 80083f8:	2c30      	cmp	r4, #48	; 0x30
 80083fa:	d0a9      	beq.n	8008350 <_strtol_l.constprop.0+0x44>
 80083fc:	230a      	movs	r3, #10
 80083fe:	e7af      	b.n	8008360 <_strtol_l.constprop.0+0x54>
 8008400:	0800b341 	.word	0x0800b341

08008404 <_strtol_r>:
 8008404:	f7ff bf82 	b.w	800830c <_strtol_l.constprop.0>

08008408 <quorem>:
 8008408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	6903      	ldr	r3, [r0, #16]
 800840e:	690c      	ldr	r4, [r1, #16]
 8008410:	4607      	mov	r7, r0
 8008412:	42a3      	cmp	r3, r4
 8008414:	f2c0 8082 	blt.w	800851c <quorem+0x114>
 8008418:	3c01      	subs	r4, #1
 800841a:	f100 0514 	add.w	r5, r0, #20
 800841e:	f101 0814 	add.w	r8, r1, #20
 8008422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800842c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008430:	3301      	adds	r3, #1
 8008432:	429a      	cmp	r2, r3
 8008434:	fbb2 f6f3 	udiv	r6, r2, r3
 8008438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800843c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008440:	d331      	bcc.n	80084a6 <quorem+0x9e>
 8008442:	f04f 0e00 	mov.w	lr, #0
 8008446:	4640      	mov	r0, r8
 8008448:	46ac      	mov	ip, r5
 800844a:	46f2      	mov	sl, lr
 800844c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008450:	b293      	uxth	r3, r2
 8008452:	fb06 e303 	mla	r3, r6, r3, lr
 8008456:	0c12      	lsrs	r2, r2, #16
 8008458:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800845c:	b29b      	uxth	r3, r3
 800845e:	fb06 e202 	mla	r2, r6, r2, lr
 8008462:	ebaa 0303 	sub.w	r3, sl, r3
 8008466:	f8dc a000 	ldr.w	sl, [ip]
 800846a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800846e:	fa1f fa8a 	uxth.w	sl, sl
 8008472:	4453      	add	r3, sl
 8008474:	f8dc a000 	ldr.w	sl, [ip]
 8008478:	b292      	uxth	r2, r2
 800847a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800847e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008482:	b29b      	uxth	r3, r3
 8008484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008488:	4581      	cmp	r9, r0
 800848a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800848e:	f84c 3b04 	str.w	r3, [ip], #4
 8008492:	d2db      	bcs.n	800844c <quorem+0x44>
 8008494:	f855 300b 	ldr.w	r3, [r5, fp]
 8008498:	b92b      	cbnz	r3, 80084a6 <quorem+0x9e>
 800849a:	9b01      	ldr	r3, [sp, #4]
 800849c:	3b04      	subs	r3, #4
 800849e:	429d      	cmp	r5, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	d32f      	bcc.n	8008504 <quorem+0xfc>
 80084a4:	613c      	str	r4, [r7, #16]
 80084a6:	4638      	mov	r0, r7
 80084a8:	f001 fc90 	bl	8009dcc <__mcmp>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	db25      	blt.n	80084fc <quorem+0xf4>
 80084b0:	4628      	mov	r0, r5
 80084b2:	f04f 0c00 	mov.w	ip, #0
 80084b6:	3601      	adds	r6, #1
 80084b8:	f858 1b04 	ldr.w	r1, [r8], #4
 80084bc:	f8d0 e000 	ldr.w	lr, [r0]
 80084c0:	b28b      	uxth	r3, r1
 80084c2:	ebac 0303 	sub.w	r3, ip, r3
 80084c6:	fa1f f28e 	uxth.w	r2, lr
 80084ca:	4413      	add	r3, r2
 80084cc:	0c0a      	lsrs	r2, r1, #16
 80084ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084dc:	45c1      	cmp	r9, r8
 80084de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084e2:	f840 3b04 	str.w	r3, [r0], #4
 80084e6:	d2e7      	bcs.n	80084b8 <quorem+0xb0>
 80084e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084f0:	b922      	cbnz	r2, 80084fc <quorem+0xf4>
 80084f2:	3b04      	subs	r3, #4
 80084f4:	429d      	cmp	r5, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	d30a      	bcc.n	8008510 <quorem+0x108>
 80084fa:	613c      	str	r4, [r7, #16]
 80084fc:	4630      	mov	r0, r6
 80084fe:	b003      	add	sp, #12
 8008500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	3b04      	subs	r3, #4
 8008508:	2a00      	cmp	r2, #0
 800850a:	d1cb      	bne.n	80084a4 <quorem+0x9c>
 800850c:	3c01      	subs	r4, #1
 800850e:	e7c6      	b.n	800849e <quorem+0x96>
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	3b04      	subs	r3, #4
 8008514:	2a00      	cmp	r2, #0
 8008516:	d1f0      	bne.n	80084fa <quorem+0xf2>
 8008518:	3c01      	subs	r4, #1
 800851a:	e7eb      	b.n	80084f4 <quorem+0xec>
 800851c:	2000      	movs	r0, #0
 800851e:	e7ee      	b.n	80084fe <quorem+0xf6>

08008520 <_dtoa_r>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	4616      	mov	r6, r2
 8008526:	461f      	mov	r7, r3
 8008528:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800852a:	b099      	sub	sp, #100	; 0x64
 800852c:	4605      	mov	r5, r0
 800852e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008532:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008536:	b974      	cbnz	r4, 8008556 <_dtoa_r+0x36>
 8008538:	2010      	movs	r0, #16
 800853a:	f001 f949 	bl	80097d0 <malloc>
 800853e:	4602      	mov	r2, r0
 8008540:	6268      	str	r0, [r5, #36]	; 0x24
 8008542:	b920      	cbnz	r0, 800854e <_dtoa_r+0x2e>
 8008544:	21ea      	movs	r1, #234	; 0xea
 8008546:	4ba8      	ldr	r3, [pc, #672]	; (80087e8 <_dtoa_r+0x2c8>)
 8008548:	48a8      	ldr	r0, [pc, #672]	; (80087ec <_dtoa_r+0x2cc>)
 800854a:	f002 f8b3 	bl	800a6b4 <__assert_func>
 800854e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008552:	6004      	str	r4, [r0, #0]
 8008554:	60c4      	str	r4, [r0, #12]
 8008556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008558:	6819      	ldr	r1, [r3, #0]
 800855a:	b151      	cbz	r1, 8008572 <_dtoa_r+0x52>
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	2301      	movs	r3, #1
 8008560:	4093      	lsls	r3, r2
 8008562:	604a      	str	r2, [r1, #4]
 8008564:	608b      	str	r3, [r1, #8]
 8008566:	4628      	mov	r0, r5
 8008568:	f001 f9a8 	bl	80098bc <_Bfree>
 800856c:	2200      	movs	r2, #0
 800856e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	1e3b      	subs	r3, r7, #0
 8008574:	bfaf      	iteee	ge
 8008576:	2300      	movge	r3, #0
 8008578:	2201      	movlt	r2, #1
 800857a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800857e:	9305      	strlt	r3, [sp, #20]
 8008580:	bfa8      	it	ge
 8008582:	f8c8 3000 	strge.w	r3, [r8]
 8008586:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800858a:	4b99      	ldr	r3, [pc, #612]	; (80087f0 <_dtoa_r+0x2d0>)
 800858c:	bfb8      	it	lt
 800858e:	f8c8 2000 	strlt.w	r2, [r8]
 8008592:	ea33 0309 	bics.w	r3, r3, r9
 8008596:	d119      	bne.n	80085cc <_dtoa_r+0xac>
 8008598:	f242 730f 	movw	r3, #9999	; 0x270f
 800859c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a4:	4333      	orrs	r3, r6
 80085a6:	f000 857f 	beq.w	80090a8 <_dtoa_r+0xb88>
 80085aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085ac:	b953      	cbnz	r3, 80085c4 <_dtoa_r+0xa4>
 80085ae:	4b91      	ldr	r3, [pc, #580]	; (80087f4 <_dtoa_r+0x2d4>)
 80085b0:	e022      	b.n	80085f8 <_dtoa_r+0xd8>
 80085b2:	4b91      	ldr	r3, [pc, #580]	; (80087f8 <_dtoa_r+0x2d8>)
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	3308      	adds	r3, #8
 80085b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	9803      	ldr	r0, [sp, #12]
 80085be:	b019      	add	sp, #100	; 0x64
 80085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c4:	4b8b      	ldr	r3, [pc, #556]	; (80087f4 <_dtoa_r+0x2d4>)
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	3303      	adds	r3, #3
 80085ca:	e7f5      	b.n	80085b8 <_dtoa_r+0x98>
 80085cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80085d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085d8:	2200      	movs	r2, #0
 80085da:	2300      	movs	r3, #0
 80085dc:	f7f8 f9e4 	bl	80009a8 <__aeabi_dcmpeq>
 80085e0:	4680      	mov	r8, r0
 80085e2:	b158      	cbz	r0, 80085fc <_dtoa_r+0xdc>
 80085e4:	2301      	movs	r3, #1
 80085e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8558 	beq.w	80090a2 <_dtoa_r+0xb82>
 80085f2:	4882      	ldr	r0, [pc, #520]	; (80087fc <_dtoa_r+0x2dc>)
 80085f4:	6018      	str	r0, [r3, #0]
 80085f6:	1e43      	subs	r3, r0, #1
 80085f8:	9303      	str	r3, [sp, #12]
 80085fa:	e7df      	b.n	80085bc <_dtoa_r+0x9c>
 80085fc:	ab16      	add	r3, sp, #88	; 0x58
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	ab17      	add	r3, sp, #92	; 0x5c
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	4628      	mov	r0, r5
 8008606:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800860a:	f001 fd01 	bl	800a010 <__d2b>
 800860e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008612:	4683      	mov	fp, r0
 8008614:	2c00      	cmp	r4, #0
 8008616:	d07f      	beq.n	8008718 <_dtoa_r+0x1f8>
 8008618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800861c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800861e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008626:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800862a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800862e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008632:	2200      	movs	r2, #0
 8008634:	4b72      	ldr	r3, [pc, #456]	; (8008800 <_dtoa_r+0x2e0>)
 8008636:	f7f7 fd97 	bl	8000168 <__aeabi_dsub>
 800863a:	a365      	add	r3, pc, #404	; (adr r3, 80087d0 <_dtoa_r+0x2b0>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 ff4a 	bl	80004d8 <__aeabi_dmul>
 8008644:	a364      	add	r3, pc, #400	; (adr r3, 80087d8 <_dtoa_r+0x2b8>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fd8f 	bl	800016c <__adddf3>
 800864e:	4606      	mov	r6, r0
 8008650:	4620      	mov	r0, r4
 8008652:	460f      	mov	r7, r1
 8008654:	f7f7 fed6 	bl	8000404 <__aeabi_i2d>
 8008658:	a361      	add	r3, pc, #388	; (adr r3, 80087e0 <_dtoa_r+0x2c0>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f7 ff3b 	bl	80004d8 <__aeabi_dmul>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7f7 fd7f 	bl	800016c <__adddf3>
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	f7f8 f9e1 	bl	8000a38 <__aeabi_d2iz>
 8008676:	2200      	movs	r2, #0
 8008678:	4682      	mov	sl, r0
 800867a:	2300      	movs	r3, #0
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f8 f99c 	bl	80009bc <__aeabi_dcmplt>
 8008684:	b148      	cbz	r0, 800869a <_dtoa_r+0x17a>
 8008686:	4650      	mov	r0, sl
 8008688:	f7f7 febc 	bl	8000404 <__aeabi_i2d>
 800868c:	4632      	mov	r2, r6
 800868e:	463b      	mov	r3, r7
 8008690:	f7f8 f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8008694:	b908      	cbnz	r0, 800869a <_dtoa_r+0x17a>
 8008696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800869a:	f1ba 0f16 	cmp.w	sl, #22
 800869e:	d858      	bhi.n	8008752 <_dtoa_r+0x232>
 80086a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086a4:	4b57      	ldr	r3, [pc, #348]	; (8008804 <_dtoa_r+0x2e4>)
 80086a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f8 f985 	bl	80009bc <__aeabi_dcmplt>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d04f      	beq.n	8008756 <_dtoa_r+0x236>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80086be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086c0:	1b1c      	subs	r4, r3, r4
 80086c2:	1e63      	subs	r3, r4, #1
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
 80086c6:	bf49      	itett	mi
 80086c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80086cc:	2300      	movpl	r3, #0
 80086ce:	9306      	strmi	r3, [sp, #24]
 80086d0:	2300      	movmi	r3, #0
 80086d2:	bf54      	ite	pl
 80086d4:	9306      	strpl	r3, [sp, #24]
 80086d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	db3d      	blt.n	800875a <_dtoa_r+0x23a>
 80086de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80086e4:	4453      	add	r3, sl
 80086e6:	9309      	str	r3, [sp, #36]	; 0x24
 80086e8:	2300      	movs	r3, #0
 80086ea:	930a      	str	r3, [sp, #40]	; 0x28
 80086ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ee:	2b09      	cmp	r3, #9
 80086f0:	f200 808c 	bhi.w	800880c <_dtoa_r+0x2ec>
 80086f4:	2b05      	cmp	r3, #5
 80086f6:	bfc4      	itt	gt
 80086f8:	3b04      	subgt	r3, #4
 80086fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80086fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086fe:	bfc8      	it	gt
 8008700:	2400      	movgt	r4, #0
 8008702:	f1a3 0302 	sub.w	r3, r3, #2
 8008706:	bfd8      	it	le
 8008708:	2401      	movle	r4, #1
 800870a:	2b03      	cmp	r3, #3
 800870c:	f200 808a 	bhi.w	8008824 <_dtoa_r+0x304>
 8008710:	e8df f003 	tbb	[pc, r3]
 8008714:	5b4d4f2d 	.word	0x5b4d4f2d
 8008718:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800871c:	441c      	add	r4, r3
 800871e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008722:	2b20      	cmp	r3, #32
 8008724:	bfc3      	ittte	gt
 8008726:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800872a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800872e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008732:	f1c3 0320 	rsble	r3, r3, #32
 8008736:	bfc6      	itte	gt
 8008738:	fa26 f000 	lsrgt.w	r0, r6, r0
 800873c:	4318      	orrgt	r0, r3
 800873e:	fa06 f003 	lslle.w	r0, r6, r3
 8008742:	f7f7 fe4f 	bl	80003e4 <__aeabi_ui2d>
 8008746:	2301      	movs	r3, #1
 8008748:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800874c:	3c01      	subs	r4, #1
 800874e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008750:	e76f      	b.n	8008632 <_dtoa_r+0x112>
 8008752:	2301      	movs	r3, #1
 8008754:	e7b2      	b.n	80086bc <_dtoa_r+0x19c>
 8008756:	900f      	str	r0, [sp, #60]	; 0x3c
 8008758:	e7b1      	b.n	80086be <_dtoa_r+0x19e>
 800875a:	9b06      	ldr	r3, [sp, #24]
 800875c:	eba3 030a 	sub.w	r3, r3, sl
 8008760:	9306      	str	r3, [sp, #24]
 8008762:	f1ca 0300 	rsb	r3, sl, #0
 8008766:	930a      	str	r3, [sp, #40]	; 0x28
 8008768:	2300      	movs	r3, #0
 800876a:	930e      	str	r3, [sp, #56]	; 0x38
 800876c:	e7be      	b.n	80086ec <_dtoa_r+0x1cc>
 800876e:	2300      	movs	r3, #0
 8008770:	930b      	str	r3, [sp, #44]	; 0x2c
 8008772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008774:	2b00      	cmp	r3, #0
 8008776:	dc58      	bgt.n	800882a <_dtoa_r+0x30a>
 8008778:	f04f 0901 	mov.w	r9, #1
 800877c:	464b      	mov	r3, r9
 800877e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008782:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008786:	2200      	movs	r2, #0
 8008788:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800878a:	6042      	str	r2, [r0, #4]
 800878c:	2204      	movs	r2, #4
 800878e:	f102 0614 	add.w	r6, r2, #20
 8008792:	429e      	cmp	r6, r3
 8008794:	6841      	ldr	r1, [r0, #4]
 8008796:	d94e      	bls.n	8008836 <_dtoa_r+0x316>
 8008798:	4628      	mov	r0, r5
 800879a:	f001 f84f 	bl	800983c <_Balloc>
 800879e:	9003      	str	r0, [sp, #12]
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d14c      	bne.n	800883e <_dtoa_r+0x31e>
 80087a4:	4602      	mov	r2, r0
 80087a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80087aa:	4b17      	ldr	r3, [pc, #92]	; (8008808 <_dtoa_r+0x2e8>)
 80087ac:	e6cc      	b.n	8008548 <_dtoa_r+0x28>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e7de      	b.n	8008770 <_dtoa_r+0x250>
 80087b2:	2300      	movs	r3, #0
 80087b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087b8:	eb0a 0903 	add.w	r9, sl, r3
 80087bc:	f109 0301 	add.w	r3, r9, #1
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	9308      	str	r3, [sp, #32]
 80087c4:	bfb8      	it	lt
 80087c6:	2301      	movlt	r3, #1
 80087c8:	e7dd      	b.n	8008786 <_dtoa_r+0x266>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e7f2      	b.n	80087b4 <_dtoa_r+0x294>
 80087ce:	bf00      	nop
 80087d0:	636f4361 	.word	0x636f4361
 80087d4:	3fd287a7 	.word	0x3fd287a7
 80087d8:	8b60c8b3 	.word	0x8b60c8b3
 80087dc:	3fc68a28 	.word	0x3fc68a28
 80087e0:	509f79fb 	.word	0x509f79fb
 80087e4:	3fd34413 	.word	0x3fd34413
 80087e8:	0800b44e 	.word	0x0800b44e
 80087ec:	0800b465 	.word	0x0800b465
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	0800b44a 	.word	0x0800b44a
 80087f8:	0800b441 	.word	0x0800b441
 80087fc:	0800b2c1 	.word	0x0800b2c1
 8008800:	3ff80000 	.word	0x3ff80000
 8008804:	0800b5d0 	.word	0x0800b5d0
 8008808:	0800b4c0 	.word	0x0800b4c0
 800880c:	2401      	movs	r4, #1
 800880e:	2300      	movs	r3, #0
 8008810:	940b      	str	r4, [sp, #44]	; 0x2c
 8008812:	9322      	str	r3, [sp, #136]	; 0x88
 8008814:	f04f 39ff 	mov.w	r9, #4294967295
 8008818:	2200      	movs	r2, #0
 800881a:	2312      	movs	r3, #18
 800881c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008820:	9223      	str	r2, [sp, #140]	; 0x8c
 8008822:	e7b0      	b.n	8008786 <_dtoa_r+0x266>
 8008824:	2301      	movs	r3, #1
 8008826:	930b      	str	r3, [sp, #44]	; 0x2c
 8008828:	e7f4      	b.n	8008814 <_dtoa_r+0x2f4>
 800882a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800882e:	464b      	mov	r3, r9
 8008830:	f8cd 9020 	str.w	r9, [sp, #32]
 8008834:	e7a7      	b.n	8008786 <_dtoa_r+0x266>
 8008836:	3101      	adds	r1, #1
 8008838:	6041      	str	r1, [r0, #4]
 800883a:	0052      	lsls	r2, r2, #1
 800883c:	e7a7      	b.n	800878e <_dtoa_r+0x26e>
 800883e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008840:	9a03      	ldr	r2, [sp, #12]
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	2b0e      	cmp	r3, #14
 8008848:	f200 80a8 	bhi.w	800899c <_dtoa_r+0x47c>
 800884c:	2c00      	cmp	r4, #0
 800884e:	f000 80a5 	beq.w	800899c <_dtoa_r+0x47c>
 8008852:	f1ba 0f00 	cmp.w	sl, #0
 8008856:	dd34      	ble.n	80088c2 <_dtoa_r+0x3a2>
 8008858:	4a9a      	ldr	r2, [pc, #616]	; (8008ac4 <_dtoa_r+0x5a4>)
 800885a:	f00a 030f 	and.w	r3, sl, #15
 800885e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008862:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008866:	e9d3 3400 	ldrd	r3, r4, [r3]
 800886a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800886e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008872:	d016      	beq.n	80088a2 <_dtoa_r+0x382>
 8008874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008878:	4b93      	ldr	r3, [pc, #588]	; (8008ac8 <_dtoa_r+0x5a8>)
 800887a:	2703      	movs	r7, #3
 800887c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008880:	f7f7 ff54 	bl	800072c <__aeabi_ddiv>
 8008884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008888:	f004 040f 	and.w	r4, r4, #15
 800888c:	4e8e      	ldr	r6, [pc, #568]	; (8008ac8 <_dtoa_r+0x5a8>)
 800888e:	b954      	cbnz	r4, 80088a6 <_dtoa_r+0x386>
 8008890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008898:	f7f7 ff48 	bl	800072c <__aeabi_ddiv>
 800889c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088a0:	e029      	b.n	80088f6 <_dtoa_r+0x3d6>
 80088a2:	2702      	movs	r7, #2
 80088a4:	e7f2      	b.n	800888c <_dtoa_r+0x36c>
 80088a6:	07e1      	lsls	r1, r4, #31
 80088a8:	d508      	bpl.n	80088bc <_dtoa_r+0x39c>
 80088aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088b2:	f7f7 fe11 	bl	80004d8 <__aeabi_dmul>
 80088b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088ba:	3701      	adds	r7, #1
 80088bc:	1064      	asrs	r4, r4, #1
 80088be:	3608      	adds	r6, #8
 80088c0:	e7e5      	b.n	800888e <_dtoa_r+0x36e>
 80088c2:	f000 80a5 	beq.w	8008a10 <_dtoa_r+0x4f0>
 80088c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088ca:	f1ca 0400 	rsb	r4, sl, #0
 80088ce:	4b7d      	ldr	r3, [pc, #500]	; (8008ac4 <_dtoa_r+0x5a4>)
 80088d0:	f004 020f 	and.w	r2, r4, #15
 80088d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fdfc 	bl	80004d8 <__aeabi_dmul>
 80088e0:	2702      	movs	r7, #2
 80088e2:	2300      	movs	r3, #0
 80088e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e8:	4e77      	ldr	r6, [pc, #476]	; (8008ac8 <_dtoa_r+0x5a8>)
 80088ea:	1124      	asrs	r4, r4, #4
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	f040 8084 	bne.w	80089fa <_dtoa_r+0x4da>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d2      	bne.n	800889c <_dtoa_r+0x37c>
 80088f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 808b 	beq.w	8008a14 <_dtoa_r+0x4f4>
 80088fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008902:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008906:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800890a:	2200      	movs	r2, #0
 800890c:	4b6f      	ldr	r3, [pc, #444]	; (8008acc <_dtoa_r+0x5ac>)
 800890e:	f7f8 f855 	bl	80009bc <__aeabi_dcmplt>
 8008912:	2800      	cmp	r0, #0
 8008914:	d07e      	beq.n	8008a14 <_dtoa_r+0x4f4>
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d07b      	beq.n	8008a14 <_dtoa_r+0x4f4>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	dd38      	ble.n	8008994 <_dtoa_r+0x474>
 8008922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008926:	2200      	movs	r2, #0
 8008928:	4b69      	ldr	r3, [pc, #420]	; (8008ad0 <_dtoa_r+0x5b0>)
 800892a:	f7f7 fdd5 	bl	80004d8 <__aeabi_dmul>
 800892e:	464c      	mov	r4, r9
 8008930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008934:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008938:	3701      	adds	r7, #1
 800893a:	4638      	mov	r0, r7
 800893c:	f7f7 fd62 	bl	8000404 <__aeabi_i2d>
 8008940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008944:	f7f7 fdc8 	bl	80004d8 <__aeabi_dmul>
 8008948:	2200      	movs	r2, #0
 800894a:	4b62      	ldr	r3, [pc, #392]	; (8008ad4 <_dtoa_r+0x5b4>)
 800894c:	f7f7 fc0e 	bl	800016c <__adddf3>
 8008950:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008954:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008958:	9611      	str	r6, [sp, #68]	; 0x44
 800895a:	2c00      	cmp	r4, #0
 800895c:	d15d      	bne.n	8008a1a <_dtoa_r+0x4fa>
 800895e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008962:	2200      	movs	r2, #0
 8008964:	4b5c      	ldr	r3, [pc, #368]	; (8008ad8 <_dtoa_r+0x5b8>)
 8008966:	f7f7 fbff 	bl	8000168 <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008972:	4633      	mov	r3, r6
 8008974:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008976:	f7f8 f83f 	bl	80009f8 <__aeabi_dcmpgt>
 800897a:	2800      	cmp	r0, #0
 800897c:	f040 829c 	bne.w	8008eb8 <_dtoa_r+0x998>
 8008980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008986:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800898a:	f7f8 f817 	bl	80009bc <__aeabi_dcmplt>
 800898e:	2800      	cmp	r0, #0
 8008990:	f040 8290 	bne.w	8008eb4 <_dtoa_r+0x994>
 8008994:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008998:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800899c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f2c0 8152 	blt.w	8008c48 <_dtoa_r+0x728>
 80089a4:	f1ba 0f0e 	cmp.w	sl, #14
 80089a8:	f300 814e 	bgt.w	8008c48 <_dtoa_r+0x728>
 80089ac:	4b45      	ldr	r3, [pc, #276]	; (8008ac4 <_dtoa_r+0x5a4>)
 80089ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80089ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f280 80db 	bge.w	8008b78 <_dtoa_r+0x658>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f300 80d7 	bgt.w	8008b78 <_dtoa_r+0x658>
 80089ca:	f040 8272 	bne.w	8008eb2 <_dtoa_r+0x992>
 80089ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d2:	2200      	movs	r2, #0
 80089d4:	4b40      	ldr	r3, [pc, #256]	; (8008ad8 <_dtoa_r+0x5b8>)
 80089d6:	f7f7 fd7f 	bl	80004d8 <__aeabi_dmul>
 80089da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089de:	f7f8 f801 	bl	80009e4 <__aeabi_dcmpge>
 80089e2:	9c08      	ldr	r4, [sp, #32]
 80089e4:	4626      	mov	r6, r4
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f040 8248 	bne.w	8008e7c <_dtoa_r+0x95c>
 80089ec:	2331      	movs	r3, #49	; 0x31
 80089ee:	9f03      	ldr	r7, [sp, #12]
 80089f0:	f10a 0a01 	add.w	sl, sl, #1
 80089f4:	f807 3b01 	strb.w	r3, [r7], #1
 80089f8:	e244      	b.n	8008e84 <_dtoa_r+0x964>
 80089fa:	07e2      	lsls	r2, r4, #31
 80089fc:	d505      	bpl.n	8008a0a <_dtoa_r+0x4ea>
 80089fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a02:	f7f7 fd69 	bl	80004d8 <__aeabi_dmul>
 8008a06:	2301      	movs	r3, #1
 8008a08:	3701      	adds	r7, #1
 8008a0a:	1064      	asrs	r4, r4, #1
 8008a0c:	3608      	adds	r6, #8
 8008a0e:	e76d      	b.n	80088ec <_dtoa_r+0x3cc>
 8008a10:	2702      	movs	r7, #2
 8008a12:	e770      	b.n	80088f6 <_dtoa_r+0x3d6>
 8008a14:	46d0      	mov	r8, sl
 8008a16:	9c08      	ldr	r4, [sp, #32]
 8008a18:	e78f      	b.n	800893a <_dtoa_r+0x41a>
 8008a1a:	9903      	ldr	r1, [sp, #12]
 8008a1c:	4b29      	ldr	r3, [pc, #164]	; (8008ac4 <_dtoa_r+0x5a4>)
 8008a1e:	4421      	add	r1, r4
 8008a20:	9112      	str	r1, [sp, #72]	; 0x48
 8008a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a30:	2900      	cmp	r1, #0
 8008a32:	d055      	beq.n	8008ae0 <_dtoa_r+0x5c0>
 8008a34:	2000      	movs	r0, #0
 8008a36:	4929      	ldr	r1, [pc, #164]	; (8008adc <_dtoa_r+0x5bc>)
 8008a38:	f7f7 fe78 	bl	800072c <__aeabi_ddiv>
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	4632      	mov	r2, r6
 8008a40:	f7f7 fb92 	bl	8000168 <__aeabi_dsub>
 8008a44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a48:	9f03      	ldr	r7, [sp, #12]
 8008a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a4e:	f7f7 fff3 	bl	8000a38 <__aeabi_d2iz>
 8008a52:	4604      	mov	r4, r0
 8008a54:	f7f7 fcd6 	bl	8000404 <__aeabi_i2d>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a60:	f7f7 fb82 	bl	8000168 <__aeabi_dsub>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	3430      	adds	r4, #48	; 0x30
 8008a6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a72:	f807 4b01 	strb.w	r4, [r7], #1
 8008a76:	f7f7 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d174      	bne.n	8008b68 <_dtoa_r+0x648>
 8008a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a82:	2000      	movs	r0, #0
 8008a84:	4911      	ldr	r1, [pc, #68]	; (8008acc <_dtoa_r+0x5ac>)
 8008a86:	f7f7 fb6f 	bl	8000168 <__aeabi_dsub>
 8008a8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a8e:	f7f7 ff95 	bl	80009bc <__aeabi_dcmplt>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f040 80b7 	bne.w	8008c06 <_dtoa_r+0x6e6>
 8008a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a9a:	429f      	cmp	r7, r3
 8008a9c:	f43f af7a 	beq.w	8008994 <_dtoa_r+0x474>
 8008aa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <_dtoa_r+0x5b0>)
 8008aa8:	f7f7 fd16 	bl	80004d8 <__aeabi_dmul>
 8008aac:	2200      	movs	r2, #0
 8008aae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <_dtoa_r+0x5b0>)
 8008ab8:	f7f7 fd0e 	bl	80004d8 <__aeabi_dmul>
 8008abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac0:	e7c3      	b.n	8008a4a <_dtoa_r+0x52a>
 8008ac2:	bf00      	nop
 8008ac4:	0800b5d0 	.word	0x0800b5d0
 8008ac8:	0800b5a8 	.word	0x0800b5a8
 8008acc:	3ff00000 	.word	0x3ff00000
 8008ad0:	40240000 	.word	0x40240000
 8008ad4:	401c0000 	.word	0x401c0000
 8008ad8:	40140000 	.word	0x40140000
 8008adc:	3fe00000 	.word	0x3fe00000
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f7 fcf8 	bl	80004d8 <__aeabi_dmul>
 8008ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008aea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aee:	9c03      	ldr	r4, [sp, #12]
 8008af0:	9314      	str	r3, [sp, #80]	; 0x50
 8008af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af6:	f7f7 ff9f 	bl	8000a38 <__aeabi_d2iz>
 8008afa:	9015      	str	r0, [sp, #84]	; 0x54
 8008afc:	f7f7 fc82 	bl	8000404 <__aeabi_i2d>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b08:	f7f7 fb2e 	bl	8000168 <__aeabi_dsub>
 8008b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b0e:	4606      	mov	r6, r0
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	f804 3b01 	strb.w	r3, [r4], #1
 8008b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b18:	460f      	mov	r7, r1
 8008b1a:	429c      	cmp	r4, r3
 8008b1c:	f04f 0200 	mov.w	r2, #0
 8008b20:	d124      	bne.n	8008b6c <_dtoa_r+0x64c>
 8008b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b26:	4bb0      	ldr	r3, [pc, #704]	; (8008de8 <_dtoa_r+0x8c8>)
 8008b28:	f7f7 fb20 	bl	800016c <__adddf3>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 ff60 	bl	80009f8 <__aeabi_dcmpgt>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d163      	bne.n	8008c04 <_dtoa_r+0x6e4>
 8008b3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b40:	2000      	movs	r0, #0
 8008b42:	49a9      	ldr	r1, [pc, #676]	; (8008de8 <_dtoa_r+0x8c8>)
 8008b44:	f7f7 fb10 	bl	8000168 <__aeabi_dsub>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f7f7 ff34 	bl	80009bc <__aeabi_dcmplt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f43f af1d 	beq.w	8008994 <_dtoa_r+0x474>
 8008b5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b5c:	1e7b      	subs	r3, r7, #1
 8008b5e:	9314      	str	r3, [sp, #80]	; 0x50
 8008b60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008b64:	2b30      	cmp	r3, #48	; 0x30
 8008b66:	d0f8      	beq.n	8008b5a <_dtoa_r+0x63a>
 8008b68:	46c2      	mov	sl, r8
 8008b6a:	e03b      	b.n	8008be4 <_dtoa_r+0x6c4>
 8008b6c:	4b9f      	ldr	r3, [pc, #636]	; (8008dec <_dtoa_r+0x8cc>)
 8008b6e:	f7f7 fcb3 	bl	80004d8 <__aeabi_dmul>
 8008b72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b76:	e7bc      	b.n	8008af2 <_dtoa_r+0x5d2>
 8008b78:	9f03      	ldr	r7, [sp, #12]
 8008b7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fdd1 	bl	800072c <__aeabi_ddiv>
 8008b8a:	f7f7 ff55 	bl	8000a38 <__aeabi_d2iz>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	f7f7 fc38 	bl	8000404 <__aeabi_i2d>
 8008b94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b98:	f7f7 fc9e 	bl	80004d8 <__aeabi_dmul>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	f7f7 fae0 	bl	8000168 <__aeabi_dsub>
 8008ba8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008bac:	f807 6b01 	strb.w	r6, [r7], #1
 8008bb0:	9e03      	ldr	r6, [sp, #12]
 8008bb2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008bb6:	1bbe      	subs	r6, r7, r6
 8008bb8:	45b4      	cmp	ip, r6
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	d136      	bne.n	8008c2e <_dtoa_r+0x70e>
 8008bc0:	f7f7 fad4 	bl	800016c <__adddf3>
 8008bc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc8:	4680      	mov	r8, r0
 8008bca:	4689      	mov	r9, r1
 8008bcc:	f7f7 ff14 	bl	80009f8 <__aeabi_dcmpgt>
 8008bd0:	bb58      	cbnz	r0, 8008c2a <_dtoa_r+0x70a>
 8008bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fee5 	bl	80009a8 <__aeabi_dcmpeq>
 8008bde:	b108      	cbz	r0, 8008be4 <_dtoa_r+0x6c4>
 8008be0:	07e1      	lsls	r1, r4, #31
 8008be2:	d422      	bmi.n	8008c2a <_dtoa_r+0x70a>
 8008be4:	4628      	mov	r0, r5
 8008be6:	4659      	mov	r1, fp
 8008be8:	f000 fe68 	bl	80098bc <_Bfree>
 8008bec:	2300      	movs	r3, #0
 8008bee:	703b      	strb	r3, [r7, #0]
 8008bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008bf2:	f10a 0001 	add.w	r0, sl, #1
 8008bf6:	6018      	str	r0, [r3, #0]
 8008bf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f43f acde 	beq.w	80085bc <_dtoa_r+0x9c>
 8008c00:	601f      	str	r7, [r3, #0]
 8008c02:	e4db      	b.n	80085bc <_dtoa_r+0x9c>
 8008c04:	4627      	mov	r7, r4
 8008c06:	463b      	mov	r3, r7
 8008c08:	461f      	mov	r7, r3
 8008c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c0e:	2a39      	cmp	r2, #57	; 0x39
 8008c10:	d107      	bne.n	8008c22 <_dtoa_r+0x702>
 8008c12:	9a03      	ldr	r2, [sp, #12]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d1f7      	bne.n	8008c08 <_dtoa_r+0x6e8>
 8008c18:	2230      	movs	r2, #48	; 0x30
 8008c1a:	9903      	ldr	r1, [sp, #12]
 8008c1c:	f108 0801 	add.w	r8, r8, #1
 8008c20:	700a      	strb	r2, [r1, #0]
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	3201      	adds	r2, #1
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	e79e      	b.n	8008b68 <_dtoa_r+0x648>
 8008c2a:	46d0      	mov	r8, sl
 8008c2c:	e7eb      	b.n	8008c06 <_dtoa_r+0x6e6>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4b6e      	ldr	r3, [pc, #440]	; (8008dec <_dtoa_r+0x8cc>)
 8008c32:	f7f7 fc51 	bl	80004d8 <__aeabi_dmul>
 8008c36:	2200      	movs	r2, #0
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4680      	mov	r8, r0
 8008c3c:	4689      	mov	r9, r1
 8008c3e:	f7f7 feb3 	bl	80009a8 <__aeabi_dcmpeq>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d09b      	beq.n	8008b7e <_dtoa_r+0x65e>
 8008c46:	e7cd      	b.n	8008be4 <_dtoa_r+0x6c4>
 8008c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c4a:	2a00      	cmp	r2, #0
 8008c4c:	f000 80d0 	beq.w	8008df0 <_dtoa_r+0x8d0>
 8008c50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c52:	2a01      	cmp	r2, #1
 8008c54:	f300 80ae 	bgt.w	8008db4 <_dtoa_r+0x894>
 8008c58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	f000 80a6 	beq.w	8008dac <_dtoa_r+0x88c>
 8008c60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c66:	9f06      	ldr	r7, [sp, #24]
 8008c68:	9a06      	ldr	r2, [sp, #24]
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	441a      	add	r2, r3
 8008c6e:	9206      	str	r2, [sp, #24]
 8008c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c72:	4628      	mov	r0, r5
 8008c74:	441a      	add	r2, r3
 8008c76:	9209      	str	r2, [sp, #36]	; 0x24
 8008c78:	f000 ff20 	bl	8009abc <__i2b>
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	dd0c      	ble.n	8008c9c <_dtoa_r+0x77c>
 8008c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dd09      	ble.n	8008c9c <_dtoa_r+0x77c>
 8008c88:	42bb      	cmp	r3, r7
 8008c8a:	bfa8      	it	ge
 8008c8c:	463b      	movge	r3, r7
 8008c8e:	9a06      	ldr	r2, [sp, #24]
 8008c90:	1aff      	subs	r7, r7, r3
 8008c92:	1ad2      	subs	r2, r2, r3
 8008c94:	9206      	str	r2, [sp, #24]
 8008c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9e:	b1f3      	cbz	r3, 8008cde <_dtoa_r+0x7be>
 8008ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80a8 	beq.w	8008df8 <_dtoa_r+0x8d8>
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	dd10      	ble.n	8008cce <_dtoa_r+0x7ae>
 8008cac:	4631      	mov	r1, r6
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 ffc1 	bl	8009c38 <__pow5mult>
 8008cb6:	465a      	mov	r2, fp
 8008cb8:	4601      	mov	r1, r0
 8008cba:	4606      	mov	r6, r0
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 ff13 	bl	8009ae8 <__multiply>
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 fdf8 	bl	80098bc <_Bfree>
 8008ccc:	46c3      	mov	fp, r8
 8008cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd0:	1b1a      	subs	r2, r3, r4
 8008cd2:	d004      	beq.n	8008cde <_dtoa_r+0x7be>
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 ffae 	bl	8009c38 <__pow5mult>
 8008cdc:	4683      	mov	fp, r0
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 feeb 	bl	8009abc <__i2b>
 8008ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce8:	4604      	mov	r4, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f340 8086 	ble.w	8008dfc <_dtoa_r+0x8dc>
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f000 ff9f 	bl	8009c38 <__pow5mult>
 8008cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	dd7f      	ble.n	8008e02 <_dtoa_r+0x8e2>
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d0c:	6918      	ldr	r0, [r3, #16]
 8008d0e:	f000 fe87 	bl	8009a20 <__hi0bits>
 8008d12:	f1c0 0020 	rsb	r0, r0, #32
 8008d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d18:	4418      	add	r0, r3
 8008d1a:	f010 001f 	ands.w	r0, r0, #31
 8008d1e:	f000 8092 	beq.w	8008e46 <_dtoa_r+0x926>
 8008d22:	f1c0 0320 	rsb	r3, r0, #32
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	f340 808a 	ble.w	8008e40 <_dtoa_r+0x920>
 8008d2c:	f1c0 001c 	rsb	r0, r0, #28
 8008d30:	9b06      	ldr	r3, [sp, #24]
 8008d32:	4407      	add	r7, r0
 8008d34:	4403      	add	r3, r0
 8008d36:	9306      	str	r3, [sp, #24]
 8008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3a:	4403      	add	r3, r0
 8008d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3e:	9b06      	ldr	r3, [sp, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dd05      	ble.n	8008d50 <_dtoa_r+0x830>
 8008d44:	4659      	mov	r1, fp
 8008d46:	461a      	mov	r2, r3
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 ffcf 	bl	8009cec <__lshift>
 8008d4e:	4683      	mov	fp, r0
 8008d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dd05      	ble.n	8008d62 <_dtoa_r+0x842>
 8008d56:	4621      	mov	r1, r4
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 ffc6 	bl	8009cec <__lshift>
 8008d60:	4604      	mov	r4, r0
 8008d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d070      	beq.n	8008e4a <_dtoa_r+0x92a>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4658      	mov	r0, fp
 8008d6c:	f001 f82e 	bl	8009dcc <__mcmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	da6a      	bge.n	8008e4a <_dtoa_r+0x92a>
 8008d74:	2300      	movs	r3, #0
 8008d76:	4659      	mov	r1, fp
 8008d78:	220a      	movs	r2, #10
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 fdc0 	bl	8009900 <__multadd>
 8008d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d82:	4683      	mov	fp, r0
 8008d84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8194 	beq.w	80090b6 <_dtoa_r+0xb96>
 8008d8e:	4631      	mov	r1, r6
 8008d90:	2300      	movs	r3, #0
 8008d92:	220a      	movs	r2, #10
 8008d94:	4628      	mov	r0, r5
 8008d96:	f000 fdb3 	bl	8009900 <__multadd>
 8008d9a:	f1b9 0f00 	cmp.w	r9, #0
 8008d9e:	4606      	mov	r6, r0
 8008da0:	f300 8093 	bgt.w	8008eca <_dtoa_r+0x9aa>
 8008da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	dc57      	bgt.n	8008e5a <_dtoa_r+0x93a>
 8008daa:	e08e      	b.n	8008eca <_dtoa_r+0x9aa>
 8008dac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008db2:	e757      	b.n	8008c64 <_dtoa_r+0x744>
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	1e5c      	subs	r4, r3, #1
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	bfb7      	itett	lt
 8008dbe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dc0:	1b1c      	subge	r4, r3, r4
 8008dc2:	1ae2      	sublt	r2, r4, r3
 8008dc4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008dc6:	bfbe      	ittt	lt
 8008dc8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008dca:	189b      	addlt	r3, r3, r2
 8008dcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dce:	9b08      	ldr	r3, [sp, #32]
 8008dd0:	bfb8      	it	lt
 8008dd2:	2400      	movlt	r4, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bfbb      	ittet	lt
 8008dd8:	9b06      	ldrlt	r3, [sp, #24]
 8008dda:	9a08      	ldrlt	r2, [sp, #32]
 8008ddc:	9f06      	ldrge	r7, [sp, #24]
 8008dde:	1a9f      	sublt	r7, r3, r2
 8008de0:	bfac      	ite	ge
 8008de2:	9b08      	ldrge	r3, [sp, #32]
 8008de4:	2300      	movlt	r3, #0
 8008de6:	e73f      	b.n	8008c68 <_dtoa_r+0x748>
 8008de8:	3fe00000 	.word	0x3fe00000
 8008dec:	40240000 	.word	0x40240000
 8008df0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008df2:	9f06      	ldr	r7, [sp, #24]
 8008df4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008df6:	e742      	b.n	8008c7e <_dtoa_r+0x75e>
 8008df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dfa:	e76b      	b.n	8008cd4 <_dtoa_r+0x7b4>
 8008dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	dc19      	bgt.n	8008e36 <_dtoa_r+0x916>
 8008e02:	9b04      	ldr	r3, [sp, #16]
 8008e04:	b9bb      	cbnz	r3, 8008e36 <_dtoa_r+0x916>
 8008e06:	9b05      	ldr	r3, [sp, #20]
 8008e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e0c:	b99b      	cbnz	r3, 8008e36 <_dtoa_r+0x916>
 8008e0e:	9b05      	ldr	r3, [sp, #20]
 8008e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	0d1b      	lsrs	r3, r3, #20
 8008e16:	051b      	lsls	r3, r3, #20
 8008e18:	b183      	cbz	r3, 8008e3c <_dtoa_r+0x91c>
 8008e1a:	f04f 0801 	mov.w	r8, #1
 8008e1e:	9b06      	ldr	r3, [sp, #24]
 8008e20:	3301      	adds	r3, #1
 8008e22:	9306      	str	r3, [sp, #24]
 8008e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e26:	3301      	adds	r3, #1
 8008e28:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f47f af6a 	bne.w	8008d06 <_dtoa_r+0x7e6>
 8008e32:	2001      	movs	r0, #1
 8008e34:	e76f      	b.n	8008d16 <_dtoa_r+0x7f6>
 8008e36:	f04f 0800 	mov.w	r8, #0
 8008e3a:	e7f6      	b.n	8008e2a <_dtoa_r+0x90a>
 8008e3c:	4698      	mov	r8, r3
 8008e3e:	e7f4      	b.n	8008e2a <_dtoa_r+0x90a>
 8008e40:	f43f af7d 	beq.w	8008d3e <_dtoa_r+0x81e>
 8008e44:	4618      	mov	r0, r3
 8008e46:	301c      	adds	r0, #28
 8008e48:	e772      	b.n	8008d30 <_dtoa_r+0x810>
 8008e4a:	9b08      	ldr	r3, [sp, #32]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dc36      	bgt.n	8008ebe <_dtoa_r+0x99e>
 8008e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	dd33      	ble.n	8008ebe <_dtoa_r+0x99e>
 8008e56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e5a:	f1b9 0f00 	cmp.w	r9, #0
 8008e5e:	d10d      	bne.n	8008e7c <_dtoa_r+0x95c>
 8008e60:	4621      	mov	r1, r4
 8008e62:	464b      	mov	r3, r9
 8008e64:	2205      	movs	r2, #5
 8008e66:	4628      	mov	r0, r5
 8008e68:	f000 fd4a 	bl	8009900 <__multadd>
 8008e6c:	4601      	mov	r1, r0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4658      	mov	r0, fp
 8008e72:	f000 ffab 	bl	8009dcc <__mcmp>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f73f adb8 	bgt.w	80089ec <_dtoa_r+0x4cc>
 8008e7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e7e:	9f03      	ldr	r7, [sp, #12]
 8008e80:	ea6f 0a03 	mvn.w	sl, r3
 8008e84:	f04f 0800 	mov.w	r8, #0
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 fd16 	bl	80098bc <_Bfree>
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	f43f aea7 	beq.w	8008be4 <_dtoa_r+0x6c4>
 8008e96:	f1b8 0f00 	cmp.w	r8, #0
 8008e9a:	d005      	beq.n	8008ea8 <_dtoa_r+0x988>
 8008e9c:	45b0      	cmp	r8, r6
 8008e9e:	d003      	beq.n	8008ea8 <_dtoa_r+0x988>
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 fd0a 	bl	80098bc <_Bfree>
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f000 fd06 	bl	80098bc <_Bfree>
 8008eb0:	e698      	b.n	8008be4 <_dtoa_r+0x6c4>
 8008eb2:	2400      	movs	r4, #0
 8008eb4:	4626      	mov	r6, r4
 8008eb6:	e7e1      	b.n	8008e7c <_dtoa_r+0x95c>
 8008eb8:	46c2      	mov	sl, r8
 8008eba:	4626      	mov	r6, r4
 8008ebc:	e596      	b.n	80089ec <_dtoa_r+0x4cc>
 8008ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80fd 	beq.w	80090c4 <_dtoa_r+0xba4>
 8008eca:	2f00      	cmp	r7, #0
 8008ecc:	dd05      	ble.n	8008eda <_dtoa_r+0x9ba>
 8008ece:	4631      	mov	r1, r6
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 ff0a 	bl	8009cec <__lshift>
 8008ed8:	4606      	mov	r6, r0
 8008eda:	f1b8 0f00 	cmp.w	r8, #0
 8008ede:	d05c      	beq.n	8008f9a <_dtoa_r+0xa7a>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	6871      	ldr	r1, [r6, #4]
 8008ee4:	f000 fcaa 	bl	800983c <_Balloc>
 8008ee8:	4607      	mov	r7, r0
 8008eea:	b928      	cbnz	r0, 8008ef8 <_dtoa_r+0x9d8>
 8008eec:	4602      	mov	r2, r0
 8008eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ef2:	4b7f      	ldr	r3, [pc, #508]	; (80090f0 <_dtoa_r+0xbd0>)
 8008ef4:	f7ff bb28 	b.w	8008548 <_dtoa_r+0x28>
 8008ef8:	6932      	ldr	r2, [r6, #16]
 8008efa:	f106 010c 	add.w	r1, r6, #12
 8008efe:	3202      	adds	r2, #2
 8008f00:	0092      	lsls	r2, r2, #2
 8008f02:	300c      	adds	r0, #12
 8008f04:	f000 fc8c 	bl	8009820 <memcpy>
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f000 feed 	bl	8009cec <__lshift>
 8008f12:	46b0      	mov	r8, r6
 8008f14:	4606      	mov	r6, r0
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	444b      	add	r3, r9
 8008f20:	930a      	str	r3, [sp, #40]	; 0x28
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2a:	9b08      	ldr	r3, [sp, #32]
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	4658      	mov	r0, fp
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	f7ff fa68 	bl	8008408 <quorem>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	3330      	adds	r3, #48	; 0x30
 8008f3e:	9006      	str	r0, [sp, #24]
 8008f40:	4658      	mov	r0, fp
 8008f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f44:	f000 ff42 	bl	8009dcc <__mcmp>
 8008f48:	4632      	mov	r2, r6
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 ff58 	bl	8009e04 <__mdiff>
 8008f54:	68c2      	ldr	r2, [r0, #12]
 8008f56:	4607      	mov	r7, r0
 8008f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5a:	bb02      	cbnz	r2, 8008f9e <_dtoa_r+0xa7e>
 8008f5c:	4601      	mov	r1, r0
 8008f5e:	4658      	mov	r0, fp
 8008f60:	f000 ff34 	bl	8009dcc <__mcmp>
 8008f64:	4602      	mov	r2, r0
 8008f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008f70:	f000 fca4 	bl	80098bc <_Bfree>
 8008f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f78:	9f08      	ldr	r7, [sp, #32]
 8008f7a:	ea43 0102 	orr.w	r1, r3, r2
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	430b      	orrs	r3, r1
 8008f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f84:	d10d      	bne.n	8008fa2 <_dtoa_r+0xa82>
 8008f86:	2b39      	cmp	r3, #57	; 0x39
 8008f88:	d029      	beq.n	8008fde <_dtoa_r+0xabe>
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	dd01      	ble.n	8008f94 <_dtoa_r+0xa74>
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	3331      	adds	r3, #49	; 0x31
 8008f94:	9a04      	ldr	r2, [sp, #16]
 8008f96:	7013      	strb	r3, [r2, #0]
 8008f98:	e776      	b.n	8008e88 <_dtoa_r+0x968>
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	e7b9      	b.n	8008f12 <_dtoa_r+0x9f2>
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	e7e2      	b.n	8008f68 <_dtoa_r+0xa48>
 8008fa2:	f1b9 0f00 	cmp.w	r9, #0
 8008fa6:	db06      	blt.n	8008fb6 <_dtoa_r+0xa96>
 8008fa8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008faa:	ea41 0909 	orr.w	r9, r1, r9
 8008fae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fb0:	ea59 0101 	orrs.w	r1, r9, r1
 8008fb4:	d120      	bne.n	8008ff8 <_dtoa_r+0xad8>
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	ddec      	ble.n	8008f94 <_dtoa_r+0xa74>
 8008fba:	4659      	mov	r1, fp
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	9308      	str	r3, [sp, #32]
 8008fc2:	f000 fe93 	bl	8009cec <__lshift>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4683      	mov	fp, r0
 8008fca:	f000 feff 	bl	8009dcc <__mcmp>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	9b08      	ldr	r3, [sp, #32]
 8008fd2:	dc02      	bgt.n	8008fda <_dtoa_r+0xaba>
 8008fd4:	d1de      	bne.n	8008f94 <_dtoa_r+0xa74>
 8008fd6:	07da      	lsls	r2, r3, #31
 8008fd8:	d5dc      	bpl.n	8008f94 <_dtoa_r+0xa74>
 8008fda:	2b39      	cmp	r3, #57	; 0x39
 8008fdc:	d1d8      	bne.n	8008f90 <_dtoa_r+0xa70>
 8008fde:	2339      	movs	r3, #57	; 0x39
 8008fe0:	9a04      	ldr	r2, [sp, #16]
 8008fe2:	7013      	strb	r3, [r2, #0]
 8008fe4:	463b      	mov	r3, r7
 8008fe6:	461f      	mov	r7, r3
 8008fe8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	2a39      	cmp	r2, #57	; 0x39
 8008ff0:	d050      	beq.n	8009094 <_dtoa_r+0xb74>
 8008ff2:	3201      	adds	r2, #1
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	e747      	b.n	8008e88 <_dtoa_r+0x968>
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	dd03      	ble.n	8009004 <_dtoa_r+0xae4>
 8008ffc:	2b39      	cmp	r3, #57	; 0x39
 8008ffe:	d0ee      	beq.n	8008fde <_dtoa_r+0xabe>
 8009000:	3301      	adds	r3, #1
 8009002:	e7c7      	b.n	8008f94 <_dtoa_r+0xa74>
 8009004:	9a08      	ldr	r2, [sp, #32]
 8009006:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009008:	f802 3c01 	strb.w	r3, [r2, #-1]
 800900c:	428a      	cmp	r2, r1
 800900e:	d02a      	beq.n	8009066 <_dtoa_r+0xb46>
 8009010:	4659      	mov	r1, fp
 8009012:	2300      	movs	r3, #0
 8009014:	220a      	movs	r2, #10
 8009016:	4628      	mov	r0, r5
 8009018:	f000 fc72 	bl	8009900 <__multadd>
 800901c:	45b0      	cmp	r8, r6
 800901e:	4683      	mov	fp, r0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	f04f 020a 	mov.w	r2, #10
 8009028:	4641      	mov	r1, r8
 800902a:	4628      	mov	r0, r5
 800902c:	d107      	bne.n	800903e <_dtoa_r+0xb1e>
 800902e:	f000 fc67 	bl	8009900 <__multadd>
 8009032:	4680      	mov	r8, r0
 8009034:	4606      	mov	r6, r0
 8009036:	9b08      	ldr	r3, [sp, #32]
 8009038:	3301      	adds	r3, #1
 800903a:	9308      	str	r3, [sp, #32]
 800903c:	e775      	b.n	8008f2a <_dtoa_r+0xa0a>
 800903e:	f000 fc5f 	bl	8009900 <__multadd>
 8009042:	4631      	mov	r1, r6
 8009044:	4680      	mov	r8, r0
 8009046:	2300      	movs	r3, #0
 8009048:	220a      	movs	r2, #10
 800904a:	4628      	mov	r0, r5
 800904c:	f000 fc58 	bl	8009900 <__multadd>
 8009050:	4606      	mov	r6, r0
 8009052:	e7f0      	b.n	8009036 <_dtoa_r+0xb16>
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	bfcc      	ite	gt
 800905a:	464f      	movgt	r7, r9
 800905c:	2701      	movle	r7, #1
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	9a03      	ldr	r2, [sp, #12]
 8009064:	4417      	add	r7, r2
 8009066:	4659      	mov	r1, fp
 8009068:	2201      	movs	r2, #1
 800906a:	4628      	mov	r0, r5
 800906c:	9308      	str	r3, [sp, #32]
 800906e:	f000 fe3d 	bl	8009cec <__lshift>
 8009072:	4621      	mov	r1, r4
 8009074:	4683      	mov	fp, r0
 8009076:	f000 fea9 	bl	8009dcc <__mcmp>
 800907a:	2800      	cmp	r0, #0
 800907c:	dcb2      	bgt.n	8008fe4 <_dtoa_r+0xac4>
 800907e:	d102      	bne.n	8009086 <_dtoa_r+0xb66>
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	07db      	lsls	r3, r3, #31
 8009084:	d4ae      	bmi.n	8008fe4 <_dtoa_r+0xac4>
 8009086:	463b      	mov	r3, r7
 8009088:	461f      	mov	r7, r3
 800908a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800908e:	2a30      	cmp	r2, #48	; 0x30
 8009090:	d0fa      	beq.n	8009088 <_dtoa_r+0xb68>
 8009092:	e6f9      	b.n	8008e88 <_dtoa_r+0x968>
 8009094:	9a03      	ldr	r2, [sp, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d1a5      	bne.n	8008fe6 <_dtoa_r+0xac6>
 800909a:	2331      	movs	r3, #49	; 0x31
 800909c:	f10a 0a01 	add.w	sl, sl, #1
 80090a0:	e779      	b.n	8008f96 <_dtoa_r+0xa76>
 80090a2:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <_dtoa_r+0xbd4>)
 80090a4:	f7ff baa8 	b.w	80085f8 <_dtoa_r+0xd8>
 80090a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f47f aa81 	bne.w	80085b2 <_dtoa_r+0x92>
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <_dtoa_r+0xbd8>)
 80090b2:	f7ff baa1 	b.w	80085f8 <_dtoa_r+0xd8>
 80090b6:	f1b9 0f00 	cmp.w	r9, #0
 80090ba:	dc03      	bgt.n	80090c4 <_dtoa_r+0xba4>
 80090bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090be:	2b02      	cmp	r3, #2
 80090c0:	f73f aecb 	bgt.w	8008e5a <_dtoa_r+0x93a>
 80090c4:	9f03      	ldr	r7, [sp, #12]
 80090c6:	4621      	mov	r1, r4
 80090c8:	4658      	mov	r0, fp
 80090ca:	f7ff f99d 	bl	8008408 <quorem>
 80090ce:	9a03      	ldr	r2, [sp, #12]
 80090d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090d4:	f807 3b01 	strb.w	r3, [r7], #1
 80090d8:	1aba      	subs	r2, r7, r2
 80090da:	4591      	cmp	r9, r2
 80090dc:	ddba      	ble.n	8009054 <_dtoa_r+0xb34>
 80090de:	4659      	mov	r1, fp
 80090e0:	2300      	movs	r3, #0
 80090e2:	220a      	movs	r2, #10
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 fc0b 	bl	8009900 <__multadd>
 80090ea:	4683      	mov	fp, r0
 80090ec:	e7eb      	b.n	80090c6 <_dtoa_r+0xba6>
 80090ee:	bf00      	nop
 80090f0:	0800b4c0 	.word	0x0800b4c0
 80090f4:	0800b2c0 	.word	0x0800b2c0
 80090f8:	0800b441 	.word	0x0800b441

080090fc <rshift>:
 80090fc:	6903      	ldr	r3, [r0, #16]
 80090fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009102:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009106:	f100 0414 	add.w	r4, r0, #20
 800910a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800910e:	dd46      	ble.n	800919e <rshift+0xa2>
 8009110:	f011 011f 	ands.w	r1, r1, #31
 8009114:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009118:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800911c:	d10c      	bne.n	8009138 <rshift+0x3c>
 800911e:	4629      	mov	r1, r5
 8009120:	f100 0710 	add.w	r7, r0, #16
 8009124:	42b1      	cmp	r1, r6
 8009126:	d335      	bcc.n	8009194 <rshift+0x98>
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	1eea      	subs	r2, r5, #3
 800912e:	4296      	cmp	r6, r2
 8009130:	bf38      	it	cc
 8009132:	2300      	movcc	r3, #0
 8009134:	4423      	add	r3, r4
 8009136:	e015      	b.n	8009164 <rshift+0x68>
 8009138:	46a1      	mov	r9, r4
 800913a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800913e:	f1c1 0820 	rsb	r8, r1, #32
 8009142:	40cf      	lsrs	r7, r1
 8009144:	f105 0e04 	add.w	lr, r5, #4
 8009148:	4576      	cmp	r6, lr
 800914a:	46f4      	mov	ip, lr
 800914c:	d816      	bhi.n	800917c <rshift+0x80>
 800914e:	1a9a      	subs	r2, r3, r2
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	3a04      	subs	r2, #4
 8009154:	3501      	adds	r5, #1
 8009156:	42ae      	cmp	r6, r5
 8009158:	bf38      	it	cc
 800915a:	2200      	movcc	r2, #0
 800915c:	18a3      	adds	r3, r4, r2
 800915e:	50a7      	str	r7, [r4, r2]
 8009160:	b107      	cbz	r7, 8009164 <rshift+0x68>
 8009162:	3304      	adds	r3, #4
 8009164:	42a3      	cmp	r3, r4
 8009166:	eba3 0204 	sub.w	r2, r3, r4
 800916a:	bf08      	it	eq
 800916c:	2300      	moveq	r3, #0
 800916e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009172:	6102      	str	r2, [r0, #16]
 8009174:	bf08      	it	eq
 8009176:	6143      	streq	r3, [r0, #20]
 8009178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917c:	f8dc c000 	ldr.w	ip, [ip]
 8009180:	fa0c fc08 	lsl.w	ip, ip, r8
 8009184:	ea4c 0707 	orr.w	r7, ip, r7
 8009188:	f849 7b04 	str.w	r7, [r9], #4
 800918c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009190:	40cf      	lsrs	r7, r1
 8009192:	e7d9      	b.n	8009148 <rshift+0x4c>
 8009194:	f851 cb04 	ldr.w	ip, [r1], #4
 8009198:	f847 cf04 	str.w	ip, [r7, #4]!
 800919c:	e7c2      	b.n	8009124 <rshift+0x28>
 800919e:	4623      	mov	r3, r4
 80091a0:	e7e0      	b.n	8009164 <rshift+0x68>

080091a2 <__hexdig_fun>:
 80091a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d802      	bhi.n	80091b0 <__hexdig_fun+0xe>
 80091aa:	3820      	subs	r0, #32
 80091ac:	b2c0      	uxtb	r0, r0
 80091ae:	4770      	bx	lr
 80091b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	d801      	bhi.n	80091bc <__hexdig_fun+0x1a>
 80091b8:	3847      	subs	r0, #71	; 0x47
 80091ba:	e7f7      	b.n	80091ac <__hexdig_fun+0xa>
 80091bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	d801      	bhi.n	80091c8 <__hexdig_fun+0x26>
 80091c4:	3827      	subs	r0, #39	; 0x27
 80091c6:	e7f1      	b.n	80091ac <__hexdig_fun+0xa>
 80091c8:	2000      	movs	r0, #0
 80091ca:	4770      	bx	lr

080091cc <__gethex>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	b08b      	sub	sp, #44	; 0x2c
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	4bb2      	ldr	r3, [pc, #712]	; (80094a0 <__gethex+0x2d4>)
 80091d6:	9002      	str	r0, [sp, #8]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	468b      	mov	fp, r1
 80091dc:	4618      	mov	r0, r3
 80091de:	4690      	mov	r8, r2
 80091e0:	9303      	str	r3, [sp, #12]
 80091e2:	f7f6 ffb5 	bl	8000150 <strlen>
 80091e6:	4682      	mov	sl, r0
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	f8db 2000 	ldr.w	r2, [fp]
 80091ee:	4403      	add	r3, r0
 80091f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80091f4:	9306      	str	r3, [sp, #24]
 80091f6:	1c93      	adds	r3, r2, #2
 80091f8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80091fc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009200:	32fe      	adds	r2, #254	; 0xfe
 8009202:	18d1      	adds	r1, r2, r3
 8009204:	461f      	mov	r7, r3
 8009206:	f813 0b01 	ldrb.w	r0, [r3], #1
 800920a:	9101      	str	r1, [sp, #4]
 800920c:	2830      	cmp	r0, #48	; 0x30
 800920e:	d0f8      	beq.n	8009202 <__gethex+0x36>
 8009210:	f7ff ffc7 	bl	80091a2 <__hexdig_fun>
 8009214:	4604      	mov	r4, r0
 8009216:	2800      	cmp	r0, #0
 8009218:	d13a      	bne.n	8009290 <__gethex+0xc4>
 800921a:	4652      	mov	r2, sl
 800921c:	4638      	mov	r0, r7
 800921e:	9903      	ldr	r1, [sp, #12]
 8009220:	f001 fa26 	bl	800a670 <strncmp>
 8009224:	4605      	mov	r5, r0
 8009226:	2800      	cmp	r0, #0
 8009228:	d166      	bne.n	80092f8 <__gethex+0x12c>
 800922a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800922e:	eb07 060a 	add.w	r6, r7, sl
 8009232:	f7ff ffb6 	bl	80091a2 <__hexdig_fun>
 8009236:	2800      	cmp	r0, #0
 8009238:	d060      	beq.n	80092fc <__gethex+0x130>
 800923a:	4633      	mov	r3, r6
 800923c:	7818      	ldrb	r0, [r3, #0]
 800923e:	461f      	mov	r7, r3
 8009240:	2830      	cmp	r0, #48	; 0x30
 8009242:	f103 0301 	add.w	r3, r3, #1
 8009246:	d0f9      	beq.n	800923c <__gethex+0x70>
 8009248:	f7ff ffab 	bl	80091a2 <__hexdig_fun>
 800924c:	2301      	movs	r3, #1
 800924e:	fab0 f480 	clz	r4, r0
 8009252:	4635      	mov	r5, r6
 8009254:	0964      	lsrs	r4, r4, #5
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	463a      	mov	r2, r7
 800925a:	4616      	mov	r6, r2
 800925c:	7830      	ldrb	r0, [r6, #0]
 800925e:	3201      	adds	r2, #1
 8009260:	f7ff ff9f 	bl	80091a2 <__hexdig_fun>
 8009264:	2800      	cmp	r0, #0
 8009266:	d1f8      	bne.n	800925a <__gethex+0x8e>
 8009268:	4652      	mov	r2, sl
 800926a:	4630      	mov	r0, r6
 800926c:	9903      	ldr	r1, [sp, #12]
 800926e:	f001 f9ff 	bl	800a670 <strncmp>
 8009272:	b980      	cbnz	r0, 8009296 <__gethex+0xca>
 8009274:	b94d      	cbnz	r5, 800928a <__gethex+0xbe>
 8009276:	eb06 050a 	add.w	r5, r6, sl
 800927a:	462a      	mov	r2, r5
 800927c:	4616      	mov	r6, r2
 800927e:	7830      	ldrb	r0, [r6, #0]
 8009280:	3201      	adds	r2, #1
 8009282:	f7ff ff8e 	bl	80091a2 <__hexdig_fun>
 8009286:	2800      	cmp	r0, #0
 8009288:	d1f8      	bne.n	800927c <__gethex+0xb0>
 800928a:	1bad      	subs	r5, r5, r6
 800928c:	00ad      	lsls	r5, r5, #2
 800928e:	e004      	b.n	800929a <__gethex+0xce>
 8009290:	2400      	movs	r4, #0
 8009292:	4625      	mov	r5, r4
 8009294:	e7e0      	b.n	8009258 <__gethex+0x8c>
 8009296:	2d00      	cmp	r5, #0
 8009298:	d1f7      	bne.n	800928a <__gethex+0xbe>
 800929a:	7833      	ldrb	r3, [r6, #0]
 800929c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092a0:	2b50      	cmp	r3, #80	; 0x50
 80092a2:	d139      	bne.n	8009318 <__gethex+0x14c>
 80092a4:	7873      	ldrb	r3, [r6, #1]
 80092a6:	2b2b      	cmp	r3, #43	; 0x2b
 80092a8:	d02a      	beq.n	8009300 <__gethex+0x134>
 80092aa:	2b2d      	cmp	r3, #45	; 0x2d
 80092ac:	d02c      	beq.n	8009308 <__gethex+0x13c>
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	1c71      	adds	r1, r6, #1
 80092b4:	7808      	ldrb	r0, [r1, #0]
 80092b6:	f7ff ff74 	bl	80091a2 <__hexdig_fun>
 80092ba:	1e43      	subs	r3, r0, #1
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b18      	cmp	r3, #24
 80092c0:	d82a      	bhi.n	8009318 <__gethex+0x14c>
 80092c2:	f1a0 0210 	sub.w	r2, r0, #16
 80092c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092ca:	f7ff ff6a 	bl	80091a2 <__hexdig_fun>
 80092ce:	1e43      	subs	r3, r0, #1
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b18      	cmp	r3, #24
 80092d4:	d91b      	bls.n	800930e <__gethex+0x142>
 80092d6:	f1b9 0f00 	cmp.w	r9, #0
 80092da:	d000      	beq.n	80092de <__gethex+0x112>
 80092dc:	4252      	negs	r2, r2
 80092de:	4415      	add	r5, r2
 80092e0:	f8cb 1000 	str.w	r1, [fp]
 80092e4:	b1d4      	cbz	r4, 800931c <__gethex+0x150>
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf14      	ite	ne
 80092ec:	2700      	movne	r7, #0
 80092ee:	2706      	moveq	r7, #6
 80092f0:	4638      	mov	r0, r7
 80092f2:	b00b      	add	sp, #44	; 0x2c
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	463e      	mov	r6, r7
 80092fa:	4625      	mov	r5, r4
 80092fc:	2401      	movs	r4, #1
 80092fe:	e7cc      	b.n	800929a <__gethex+0xce>
 8009300:	f04f 0900 	mov.w	r9, #0
 8009304:	1cb1      	adds	r1, r6, #2
 8009306:	e7d5      	b.n	80092b4 <__gethex+0xe8>
 8009308:	f04f 0901 	mov.w	r9, #1
 800930c:	e7fa      	b.n	8009304 <__gethex+0x138>
 800930e:	230a      	movs	r3, #10
 8009310:	fb03 0202 	mla	r2, r3, r2, r0
 8009314:	3a10      	subs	r2, #16
 8009316:	e7d6      	b.n	80092c6 <__gethex+0xfa>
 8009318:	4631      	mov	r1, r6
 800931a:	e7e1      	b.n	80092e0 <__gethex+0x114>
 800931c:	4621      	mov	r1, r4
 800931e:	1bf3      	subs	r3, r6, r7
 8009320:	3b01      	subs	r3, #1
 8009322:	2b07      	cmp	r3, #7
 8009324:	dc0a      	bgt.n	800933c <__gethex+0x170>
 8009326:	9802      	ldr	r0, [sp, #8]
 8009328:	f000 fa88 	bl	800983c <_Balloc>
 800932c:	4604      	mov	r4, r0
 800932e:	b940      	cbnz	r0, 8009342 <__gethex+0x176>
 8009330:	4602      	mov	r2, r0
 8009332:	21de      	movs	r1, #222	; 0xde
 8009334:	4b5b      	ldr	r3, [pc, #364]	; (80094a4 <__gethex+0x2d8>)
 8009336:	485c      	ldr	r0, [pc, #368]	; (80094a8 <__gethex+0x2dc>)
 8009338:	f001 f9bc 	bl	800a6b4 <__assert_func>
 800933c:	3101      	adds	r1, #1
 800933e:	105b      	asrs	r3, r3, #1
 8009340:	e7ef      	b.n	8009322 <__gethex+0x156>
 8009342:	f04f 0b00 	mov.w	fp, #0
 8009346:	f100 0914 	add.w	r9, r0, #20
 800934a:	f1ca 0301 	rsb	r3, sl, #1
 800934e:	f8cd 9010 	str.w	r9, [sp, #16]
 8009352:	f8cd b004 	str.w	fp, [sp, #4]
 8009356:	9308      	str	r3, [sp, #32]
 8009358:	42b7      	cmp	r7, r6
 800935a:	d33f      	bcc.n	80093dc <__gethex+0x210>
 800935c:	9f04      	ldr	r7, [sp, #16]
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	f847 3b04 	str.w	r3, [r7], #4
 8009364:	eba7 0709 	sub.w	r7, r7, r9
 8009368:	10bf      	asrs	r7, r7, #2
 800936a:	6127      	str	r7, [r4, #16]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fb57 	bl	8009a20 <__hi0bits>
 8009372:	017f      	lsls	r7, r7, #5
 8009374:	f8d8 6000 	ldr.w	r6, [r8]
 8009378:	1a3f      	subs	r7, r7, r0
 800937a:	42b7      	cmp	r7, r6
 800937c:	dd62      	ble.n	8009444 <__gethex+0x278>
 800937e:	1bbf      	subs	r7, r7, r6
 8009380:	4639      	mov	r1, r7
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fef1 	bl	800a16a <__any_on>
 8009388:	4682      	mov	sl, r0
 800938a:	b1a8      	cbz	r0, 80093b8 <__gethex+0x1ec>
 800938c:	f04f 0a01 	mov.w	sl, #1
 8009390:	1e7b      	subs	r3, r7, #1
 8009392:	1159      	asrs	r1, r3, #5
 8009394:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009398:	f003 021f 	and.w	r2, r3, #31
 800939c:	fa0a f202 	lsl.w	r2, sl, r2
 80093a0:	420a      	tst	r2, r1
 80093a2:	d009      	beq.n	80093b8 <__gethex+0x1ec>
 80093a4:	4553      	cmp	r3, sl
 80093a6:	dd05      	ble.n	80093b4 <__gethex+0x1e8>
 80093a8:	4620      	mov	r0, r4
 80093aa:	1eb9      	subs	r1, r7, #2
 80093ac:	f000 fedd 	bl	800a16a <__any_on>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d144      	bne.n	800943e <__gethex+0x272>
 80093b4:	f04f 0a02 	mov.w	sl, #2
 80093b8:	4639      	mov	r1, r7
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fe9e 	bl	80090fc <rshift>
 80093c0:	443d      	add	r5, r7
 80093c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093c6:	42ab      	cmp	r3, r5
 80093c8:	da4a      	bge.n	8009460 <__gethex+0x294>
 80093ca:	4621      	mov	r1, r4
 80093cc:	9802      	ldr	r0, [sp, #8]
 80093ce:	f000 fa75 	bl	80098bc <_Bfree>
 80093d2:	2300      	movs	r3, #0
 80093d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093d6:	27a3      	movs	r7, #163	; 0xa3
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	e789      	b.n	80092f0 <__gethex+0x124>
 80093dc:	1e73      	subs	r3, r6, #1
 80093de:	9a06      	ldr	r2, [sp, #24]
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d019      	beq.n	800941e <__gethex+0x252>
 80093ea:	f1bb 0f20 	cmp.w	fp, #32
 80093ee:	d107      	bne.n	8009400 <__gethex+0x234>
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	9a01      	ldr	r2, [sp, #4]
 80093f4:	f843 2b04 	str.w	r2, [r3], #4
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	2300      	movs	r3, #0
 80093fc:	469b      	mov	fp, r3
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009404:	f7ff fecd 	bl	80091a2 <__hexdig_fun>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	f000 000f 	and.w	r0, r0, #15
 800940e:	fa00 f00b 	lsl.w	r0, r0, fp
 8009412:	4303      	orrs	r3, r0
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	f10b 0b04 	add.w	fp, fp, #4
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	e00d      	b.n	800943a <__gethex+0x26e>
 800941e:	9a08      	ldr	r2, [sp, #32]
 8009420:	1e73      	subs	r3, r6, #1
 8009422:	4413      	add	r3, r2
 8009424:	42bb      	cmp	r3, r7
 8009426:	d3e0      	bcc.n	80093ea <__gethex+0x21e>
 8009428:	4618      	mov	r0, r3
 800942a:	4652      	mov	r2, sl
 800942c:	9903      	ldr	r1, [sp, #12]
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	f001 f91e 	bl	800a670 <strncmp>
 8009434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009436:	2800      	cmp	r0, #0
 8009438:	d1d7      	bne.n	80093ea <__gethex+0x21e>
 800943a:	461e      	mov	r6, r3
 800943c:	e78c      	b.n	8009358 <__gethex+0x18c>
 800943e:	f04f 0a03 	mov.w	sl, #3
 8009442:	e7b9      	b.n	80093b8 <__gethex+0x1ec>
 8009444:	da09      	bge.n	800945a <__gethex+0x28e>
 8009446:	1bf7      	subs	r7, r6, r7
 8009448:	4621      	mov	r1, r4
 800944a:	463a      	mov	r2, r7
 800944c:	9802      	ldr	r0, [sp, #8]
 800944e:	f000 fc4d 	bl	8009cec <__lshift>
 8009452:	4604      	mov	r4, r0
 8009454:	1bed      	subs	r5, r5, r7
 8009456:	f100 0914 	add.w	r9, r0, #20
 800945a:	f04f 0a00 	mov.w	sl, #0
 800945e:	e7b0      	b.n	80093c2 <__gethex+0x1f6>
 8009460:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009464:	42a8      	cmp	r0, r5
 8009466:	dd72      	ble.n	800954e <__gethex+0x382>
 8009468:	1b45      	subs	r5, r0, r5
 800946a:	42ae      	cmp	r6, r5
 800946c:	dc35      	bgt.n	80094da <__gethex+0x30e>
 800946e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d029      	beq.n	80094ca <__gethex+0x2fe>
 8009476:	2b03      	cmp	r3, #3
 8009478:	d02b      	beq.n	80094d2 <__gethex+0x306>
 800947a:	2b01      	cmp	r3, #1
 800947c:	d11c      	bne.n	80094b8 <__gethex+0x2ec>
 800947e:	42ae      	cmp	r6, r5
 8009480:	d11a      	bne.n	80094b8 <__gethex+0x2ec>
 8009482:	2e01      	cmp	r6, #1
 8009484:	d112      	bne.n	80094ac <__gethex+0x2e0>
 8009486:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800948a:	9a05      	ldr	r2, [sp, #20]
 800948c:	2762      	movs	r7, #98	; 0x62
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	2301      	movs	r3, #1
 8009492:	6123      	str	r3, [r4, #16]
 8009494:	f8c9 3000 	str.w	r3, [r9]
 8009498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800949a:	601c      	str	r4, [r3, #0]
 800949c:	e728      	b.n	80092f0 <__gethex+0x124>
 800949e:	bf00      	nop
 80094a0:	0800b538 	.word	0x0800b538
 80094a4:	0800b4c0 	.word	0x0800b4c0
 80094a8:	0800b4d1 	.word	0x0800b4d1
 80094ac:	4620      	mov	r0, r4
 80094ae:	1e71      	subs	r1, r6, #1
 80094b0:	f000 fe5b 	bl	800a16a <__any_on>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d1e6      	bne.n	8009486 <__gethex+0x2ba>
 80094b8:	4621      	mov	r1, r4
 80094ba:	9802      	ldr	r0, [sp, #8]
 80094bc:	f000 f9fe 	bl	80098bc <_Bfree>
 80094c0:	2300      	movs	r3, #0
 80094c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094c4:	2750      	movs	r7, #80	; 0x50
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	e712      	b.n	80092f0 <__gethex+0x124>
 80094ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1f3      	bne.n	80094b8 <__gethex+0x2ec>
 80094d0:	e7d9      	b.n	8009486 <__gethex+0x2ba>
 80094d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1d6      	bne.n	8009486 <__gethex+0x2ba>
 80094d8:	e7ee      	b.n	80094b8 <__gethex+0x2ec>
 80094da:	1e6f      	subs	r7, r5, #1
 80094dc:	f1ba 0f00 	cmp.w	sl, #0
 80094e0:	d132      	bne.n	8009548 <__gethex+0x37c>
 80094e2:	b127      	cbz	r7, 80094ee <__gethex+0x322>
 80094e4:	4639      	mov	r1, r7
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fe3f 	bl	800a16a <__any_on>
 80094ec:	4682      	mov	sl, r0
 80094ee:	2101      	movs	r1, #1
 80094f0:	117b      	asrs	r3, r7, #5
 80094f2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80094f6:	f007 071f 	and.w	r7, r7, #31
 80094fa:	fa01 f707 	lsl.w	r7, r1, r7
 80094fe:	421f      	tst	r7, r3
 8009500:	f04f 0702 	mov.w	r7, #2
 8009504:	4629      	mov	r1, r5
 8009506:	4620      	mov	r0, r4
 8009508:	bf18      	it	ne
 800950a:	f04a 0a02 	orrne.w	sl, sl, #2
 800950e:	1b76      	subs	r6, r6, r5
 8009510:	f7ff fdf4 	bl	80090fc <rshift>
 8009514:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009518:	f1ba 0f00 	cmp.w	sl, #0
 800951c:	d048      	beq.n	80095b0 <__gethex+0x3e4>
 800951e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d015      	beq.n	8009552 <__gethex+0x386>
 8009526:	2b03      	cmp	r3, #3
 8009528:	d017      	beq.n	800955a <__gethex+0x38e>
 800952a:	2b01      	cmp	r3, #1
 800952c:	d109      	bne.n	8009542 <__gethex+0x376>
 800952e:	f01a 0f02 	tst.w	sl, #2
 8009532:	d006      	beq.n	8009542 <__gethex+0x376>
 8009534:	f8d9 0000 	ldr.w	r0, [r9]
 8009538:	ea4a 0a00 	orr.w	sl, sl, r0
 800953c:	f01a 0f01 	tst.w	sl, #1
 8009540:	d10e      	bne.n	8009560 <__gethex+0x394>
 8009542:	f047 0710 	orr.w	r7, r7, #16
 8009546:	e033      	b.n	80095b0 <__gethex+0x3e4>
 8009548:	f04f 0a01 	mov.w	sl, #1
 800954c:	e7cf      	b.n	80094ee <__gethex+0x322>
 800954e:	2701      	movs	r7, #1
 8009550:	e7e2      	b.n	8009518 <__gethex+0x34c>
 8009552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009554:	f1c3 0301 	rsb	r3, r3, #1
 8009558:	9315      	str	r3, [sp, #84]	; 0x54
 800955a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0f0      	beq.n	8009542 <__gethex+0x376>
 8009560:	f04f 0c00 	mov.w	ip, #0
 8009564:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009568:	f104 0314 	add.w	r3, r4, #20
 800956c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009570:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009574:	4618      	mov	r0, r3
 8009576:	f853 2b04 	ldr.w	r2, [r3], #4
 800957a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800957e:	d01c      	beq.n	80095ba <__gethex+0x3ee>
 8009580:	3201      	adds	r2, #1
 8009582:	6002      	str	r2, [r0, #0]
 8009584:	2f02      	cmp	r7, #2
 8009586:	f104 0314 	add.w	r3, r4, #20
 800958a:	d13d      	bne.n	8009608 <__gethex+0x43c>
 800958c:	f8d8 2000 	ldr.w	r2, [r8]
 8009590:	3a01      	subs	r2, #1
 8009592:	42b2      	cmp	r2, r6
 8009594:	d10a      	bne.n	80095ac <__gethex+0x3e0>
 8009596:	2201      	movs	r2, #1
 8009598:	1171      	asrs	r1, r6, #5
 800959a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800959e:	f006 061f 	and.w	r6, r6, #31
 80095a2:	fa02 f606 	lsl.w	r6, r2, r6
 80095a6:	421e      	tst	r6, r3
 80095a8:	bf18      	it	ne
 80095aa:	4617      	movne	r7, r2
 80095ac:	f047 0720 	orr.w	r7, r7, #32
 80095b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095b2:	601c      	str	r4, [r3, #0]
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	601d      	str	r5, [r3, #0]
 80095b8:	e69a      	b.n	80092f0 <__gethex+0x124>
 80095ba:	4299      	cmp	r1, r3
 80095bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80095c0:	d8d8      	bhi.n	8009574 <__gethex+0x3a8>
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	459b      	cmp	fp, r3
 80095c6:	db17      	blt.n	80095f8 <__gethex+0x42c>
 80095c8:	6861      	ldr	r1, [r4, #4]
 80095ca:	9802      	ldr	r0, [sp, #8]
 80095cc:	3101      	adds	r1, #1
 80095ce:	f000 f935 	bl	800983c <_Balloc>
 80095d2:	4681      	mov	r9, r0
 80095d4:	b918      	cbnz	r0, 80095de <__gethex+0x412>
 80095d6:	4602      	mov	r2, r0
 80095d8:	2184      	movs	r1, #132	; 0x84
 80095da:	4b19      	ldr	r3, [pc, #100]	; (8009640 <__gethex+0x474>)
 80095dc:	e6ab      	b.n	8009336 <__gethex+0x16a>
 80095de:	6922      	ldr	r2, [r4, #16]
 80095e0:	f104 010c 	add.w	r1, r4, #12
 80095e4:	3202      	adds	r2, #2
 80095e6:	0092      	lsls	r2, r2, #2
 80095e8:	300c      	adds	r0, #12
 80095ea:	f000 f919 	bl	8009820 <memcpy>
 80095ee:	4621      	mov	r1, r4
 80095f0:	9802      	ldr	r0, [sp, #8]
 80095f2:	f000 f963 	bl	80098bc <_Bfree>
 80095f6:	464c      	mov	r4, r9
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	6122      	str	r2, [r4, #16]
 80095fe:	2201      	movs	r2, #1
 8009600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009604:	615a      	str	r2, [r3, #20]
 8009606:	e7bd      	b.n	8009584 <__gethex+0x3b8>
 8009608:	6922      	ldr	r2, [r4, #16]
 800960a:	455a      	cmp	r2, fp
 800960c:	dd0b      	ble.n	8009626 <__gethex+0x45a>
 800960e:	2101      	movs	r1, #1
 8009610:	4620      	mov	r0, r4
 8009612:	f7ff fd73 	bl	80090fc <rshift>
 8009616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800961a:	3501      	adds	r5, #1
 800961c:	42ab      	cmp	r3, r5
 800961e:	f6ff aed4 	blt.w	80093ca <__gethex+0x1fe>
 8009622:	2701      	movs	r7, #1
 8009624:	e7c2      	b.n	80095ac <__gethex+0x3e0>
 8009626:	f016 061f 	ands.w	r6, r6, #31
 800962a:	d0fa      	beq.n	8009622 <__gethex+0x456>
 800962c:	4453      	add	r3, sl
 800962e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009632:	f000 f9f5 	bl	8009a20 <__hi0bits>
 8009636:	f1c6 0620 	rsb	r6, r6, #32
 800963a:	42b0      	cmp	r0, r6
 800963c:	dbe7      	blt.n	800960e <__gethex+0x442>
 800963e:	e7f0      	b.n	8009622 <__gethex+0x456>
 8009640:	0800b4c0 	.word	0x0800b4c0

08009644 <L_shift>:
 8009644:	f1c2 0208 	rsb	r2, r2, #8
 8009648:	0092      	lsls	r2, r2, #2
 800964a:	b570      	push	{r4, r5, r6, lr}
 800964c:	f1c2 0620 	rsb	r6, r2, #32
 8009650:	6843      	ldr	r3, [r0, #4]
 8009652:	6804      	ldr	r4, [r0, #0]
 8009654:	fa03 f506 	lsl.w	r5, r3, r6
 8009658:	432c      	orrs	r4, r5
 800965a:	40d3      	lsrs	r3, r2
 800965c:	6004      	str	r4, [r0, #0]
 800965e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009662:	4288      	cmp	r0, r1
 8009664:	d3f4      	bcc.n	8009650 <L_shift+0xc>
 8009666:	bd70      	pop	{r4, r5, r6, pc}

08009668 <__match>:
 8009668:	b530      	push	{r4, r5, lr}
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	3301      	adds	r3, #1
 800966e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009672:	b914      	cbnz	r4, 800967a <__match+0x12>
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	2001      	movs	r0, #1
 8009678:	bd30      	pop	{r4, r5, pc}
 800967a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009682:	2d19      	cmp	r5, #25
 8009684:	bf98      	it	ls
 8009686:	3220      	addls	r2, #32
 8009688:	42a2      	cmp	r2, r4
 800968a:	d0f0      	beq.n	800966e <__match+0x6>
 800968c:	2000      	movs	r0, #0
 800968e:	e7f3      	b.n	8009678 <__match+0x10>

08009690 <__hexnan>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	2500      	movs	r5, #0
 8009696:	680b      	ldr	r3, [r1, #0]
 8009698:	4682      	mov	sl, r0
 800969a:	115e      	asrs	r6, r3, #5
 800969c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096a0:	f013 031f 	ands.w	r3, r3, #31
 80096a4:	bf18      	it	ne
 80096a6:	3604      	addne	r6, #4
 80096a8:	1f37      	subs	r7, r6, #4
 80096aa:	46b9      	mov	r9, r7
 80096ac:	463c      	mov	r4, r7
 80096ae:	46ab      	mov	fp, r5
 80096b0:	b087      	sub	sp, #28
 80096b2:	4690      	mov	r8, r2
 80096b4:	6802      	ldr	r2, [r0, #0]
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80096bc:	9502      	str	r5, [sp, #8]
 80096be:	7851      	ldrb	r1, [r2, #1]
 80096c0:	1c53      	adds	r3, r2, #1
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	b341      	cbz	r1, 8009718 <__hexnan+0x88>
 80096c6:	4608      	mov	r0, r1
 80096c8:	9205      	str	r2, [sp, #20]
 80096ca:	9104      	str	r1, [sp, #16]
 80096cc:	f7ff fd69 	bl	80091a2 <__hexdig_fun>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d14f      	bne.n	8009774 <__hexnan+0xe4>
 80096d4:	9904      	ldr	r1, [sp, #16]
 80096d6:	9a05      	ldr	r2, [sp, #20]
 80096d8:	2920      	cmp	r1, #32
 80096da:	d818      	bhi.n	800970e <__hexnan+0x7e>
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	459b      	cmp	fp, r3
 80096e0:	dd13      	ble.n	800970a <__hexnan+0x7a>
 80096e2:	454c      	cmp	r4, r9
 80096e4:	d206      	bcs.n	80096f4 <__hexnan+0x64>
 80096e6:	2d07      	cmp	r5, #7
 80096e8:	dc04      	bgt.n	80096f4 <__hexnan+0x64>
 80096ea:	462a      	mov	r2, r5
 80096ec:	4649      	mov	r1, r9
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff ffa8 	bl	8009644 <L_shift>
 80096f4:	4544      	cmp	r4, r8
 80096f6:	d950      	bls.n	800979a <__hexnan+0x10a>
 80096f8:	2300      	movs	r3, #0
 80096fa:	f1a4 0904 	sub.w	r9, r4, #4
 80096fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009702:	461d      	mov	r5, r3
 8009704:	464c      	mov	r4, r9
 8009706:	f8cd b008 	str.w	fp, [sp, #8]
 800970a:	9a03      	ldr	r2, [sp, #12]
 800970c:	e7d7      	b.n	80096be <__hexnan+0x2e>
 800970e:	2929      	cmp	r1, #41	; 0x29
 8009710:	d156      	bne.n	80097c0 <__hexnan+0x130>
 8009712:	3202      	adds	r2, #2
 8009714:	f8ca 2000 	str.w	r2, [sl]
 8009718:	f1bb 0f00 	cmp.w	fp, #0
 800971c:	d050      	beq.n	80097c0 <__hexnan+0x130>
 800971e:	454c      	cmp	r4, r9
 8009720:	d206      	bcs.n	8009730 <__hexnan+0xa0>
 8009722:	2d07      	cmp	r5, #7
 8009724:	dc04      	bgt.n	8009730 <__hexnan+0xa0>
 8009726:	462a      	mov	r2, r5
 8009728:	4649      	mov	r1, r9
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff ff8a 	bl	8009644 <L_shift>
 8009730:	4544      	cmp	r4, r8
 8009732:	d934      	bls.n	800979e <__hexnan+0x10e>
 8009734:	4623      	mov	r3, r4
 8009736:	f1a8 0204 	sub.w	r2, r8, #4
 800973a:	f853 1b04 	ldr.w	r1, [r3], #4
 800973e:	429f      	cmp	r7, r3
 8009740:	f842 1f04 	str.w	r1, [r2, #4]!
 8009744:	d2f9      	bcs.n	800973a <__hexnan+0xaa>
 8009746:	1b3b      	subs	r3, r7, r4
 8009748:	f023 0303 	bic.w	r3, r3, #3
 800974c:	3304      	adds	r3, #4
 800974e:	3401      	adds	r4, #1
 8009750:	3e03      	subs	r6, #3
 8009752:	42b4      	cmp	r4, r6
 8009754:	bf88      	it	hi
 8009756:	2304      	movhi	r3, #4
 8009758:	2200      	movs	r2, #0
 800975a:	4443      	add	r3, r8
 800975c:	f843 2b04 	str.w	r2, [r3], #4
 8009760:	429f      	cmp	r7, r3
 8009762:	d2fb      	bcs.n	800975c <__hexnan+0xcc>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	b91b      	cbnz	r3, 8009770 <__hexnan+0xe0>
 8009768:	4547      	cmp	r7, r8
 800976a:	d127      	bne.n	80097bc <__hexnan+0x12c>
 800976c:	2301      	movs	r3, #1
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	2005      	movs	r0, #5
 8009772:	e026      	b.n	80097c2 <__hexnan+0x132>
 8009774:	3501      	adds	r5, #1
 8009776:	2d08      	cmp	r5, #8
 8009778:	f10b 0b01 	add.w	fp, fp, #1
 800977c:	dd06      	ble.n	800978c <__hexnan+0xfc>
 800977e:	4544      	cmp	r4, r8
 8009780:	d9c3      	bls.n	800970a <__hexnan+0x7a>
 8009782:	2300      	movs	r3, #0
 8009784:	2501      	movs	r5, #1
 8009786:	f844 3c04 	str.w	r3, [r4, #-4]
 800978a:	3c04      	subs	r4, #4
 800978c:	6822      	ldr	r2, [r4, #0]
 800978e:	f000 000f 	and.w	r0, r0, #15
 8009792:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	e7b7      	b.n	800970a <__hexnan+0x7a>
 800979a:	2508      	movs	r5, #8
 800979c:	e7b5      	b.n	800970a <__hexnan+0x7a>
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0df      	beq.n	8009764 <__hexnan+0xd4>
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	f1c3 0320 	rsb	r3, r3, #32
 80097ac:	fa22 f303 	lsr.w	r3, r2, r3
 80097b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097b4:	401a      	ands	r2, r3
 80097b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80097ba:	e7d3      	b.n	8009764 <__hexnan+0xd4>
 80097bc:	3f04      	subs	r7, #4
 80097be:	e7d1      	b.n	8009764 <__hexnan+0xd4>
 80097c0:	2004      	movs	r0, #4
 80097c2:	b007      	add	sp, #28
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097c8 <_localeconv_r>:
 80097c8:	4800      	ldr	r0, [pc, #0]	; (80097cc <_localeconv_r+0x4>)
 80097ca:	4770      	bx	lr
 80097cc:	20000164 	.word	0x20000164

080097d0 <malloc>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <malloc+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f000 bd65 	b.w	800a2a4 <_malloc_r>
 80097da:	bf00      	nop
 80097dc:	2000000c 	.word	0x2000000c

080097e0 <__ascii_mbtowc>:
 80097e0:	b082      	sub	sp, #8
 80097e2:	b901      	cbnz	r1, 80097e6 <__ascii_mbtowc+0x6>
 80097e4:	a901      	add	r1, sp, #4
 80097e6:	b142      	cbz	r2, 80097fa <__ascii_mbtowc+0x1a>
 80097e8:	b14b      	cbz	r3, 80097fe <__ascii_mbtowc+0x1e>
 80097ea:	7813      	ldrb	r3, [r2, #0]
 80097ec:	600b      	str	r3, [r1, #0]
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	1e10      	subs	r0, r2, #0
 80097f2:	bf18      	it	ne
 80097f4:	2001      	movne	r0, #1
 80097f6:	b002      	add	sp, #8
 80097f8:	4770      	bx	lr
 80097fa:	4610      	mov	r0, r2
 80097fc:	e7fb      	b.n	80097f6 <__ascii_mbtowc+0x16>
 80097fe:	f06f 0001 	mvn.w	r0, #1
 8009802:	e7f8      	b.n	80097f6 <__ascii_mbtowc+0x16>

08009804 <memchr>:
 8009804:	4603      	mov	r3, r0
 8009806:	b510      	push	{r4, lr}
 8009808:	b2c9      	uxtb	r1, r1
 800980a:	4402      	add	r2, r0
 800980c:	4293      	cmp	r3, r2
 800980e:	4618      	mov	r0, r3
 8009810:	d101      	bne.n	8009816 <memchr+0x12>
 8009812:	2000      	movs	r0, #0
 8009814:	e003      	b.n	800981e <memchr+0x1a>
 8009816:	7804      	ldrb	r4, [r0, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	428c      	cmp	r4, r1
 800981c:	d1f6      	bne.n	800980c <memchr+0x8>
 800981e:	bd10      	pop	{r4, pc}

08009820 <memcpy>:
 8009820:	440a      	add	r2, r1
 8009822:	4291      	cmp	r1, r2
 8009824:	f100 33ff 	add.w	r3, r0, #4294967295
 8009828:	d100      	bne.n	800982c <memcpy+0xc>
 800982a:	4770      	bx	lr
 800982c:	b510      	push	{r4, lr}
 800982e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009832:	4291      	cmp	r1, r2
 8009834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009838:	d1f9      	bne.n	800982e <memcpy+0xe>
 800983a:	bd10      	pop	{r4, pc}

0800983c <_Balloc>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009840:	4604      	mov	r4, r0
 8009842:	460d      	mov	r5, r1
 8009844:	b976      	cbnz	r6, 8009864 <_Balloc+0x28>
 8009846:	2010      	movs	r0, #16
 8009848:	f7ff ffc2 	bl	80097d0 <malloc>
 800984c:	4602      	mov	r2, r0
 800984e:	6260      	str	r0, [r4, #36]	; 0x24
 8009850:	b920      	cbnz	r0, 800985c <_Balloc+0x20>
 8009852:	2166      	movs	r1, #102	; 0x66
 8009854:	4b17      	ldr	r3, [pc, #92]	; (80098b4 <_Balloc+0x78>)
 8009856:	4818      	ldr	r0, [pc, #96]	; (80098b8 <_Balloc+0x7c>)
 8009858:	f000 ff2c 	bl	800a6b4 <__assert_func>
 800985c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009860:	6006      	str	r6, [r0, #0]
 8009862:	60c6      	str	r6, [r0, #12]
 8009864:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009866:	68f3      	ldr	r3, [r6, #12]
 8009868:	b183      	cbz	r3, 800988c <_Balloc+0x50>
 800986a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009872:	b9b8      	cbnz	r0, 80098a4 <_Balloc+0x68>
 8009874:	2101      	movs	r1, #1
 8009876:	fa01 f605 	lsl.w	r6, r1, r5
 800987a:	1d72      	adds	r2, r6, #5
 800987c:	4620      	mov	r0, r4
 800987e:	0092      	lsls	r2, r2, #2
 8009880:	f000 fc94 	bl	800a1ac <_calloc_r>
 8009884:	b160      	cbz	r0, 80098a0 <_Balloc+0x64>
 8009886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800988a:	e00e      	b.n	80098aa <_Balloc+0x6e>
 800988c:	2221      	movs	r2, #33	; 0x21
 800988e:	2104      	movs	r1, #4
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fc8b 	bl	800a1ac <_calloc_r>
 8009896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009898:	60f0      	str	r0, [r6, #12]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e4      	bne.n	800986a <_Balloc+0x2e>
 80098a0:	2000      	movs	r0, #0
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	6802      	ldr	r2, [r0, #0]
 80098a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098aa:	2300      	movs	r3, #0
 80098ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098b0:	e7f7      	b.n	80098a2 <_Balloc+0x66>
 80098b2:	bf00      	nop
 80098b4:	0800b44e 	.word	0x0800b44e
 80098b8:	0800b54c 	.word	0x0800b54c

080098bc <_Bfree>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098c0:	4605      	mov	r5, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	b976      	cbnz	r6, 80098e4 <_Bfree+0x28>
 80098c6:	2010      	movs	r0, #16
 80098c8:	f7ff ff82 	bl	80097d0 <malloc>
 80098cc:	4602      	mov	r2, r0
 80098ce:	6268      	str	r0, [r5, #36]	; 0x24
 80098d0:	b920      	cbnz	r0, 80098dc <_Bfree+0x20>
 80098d2:	218a      	movs	r1, #138	; 0x8a
 80098d4:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <_Bfree+0x3c>)
 80098d6:	4809      	ldr	r0, [pc, #36]	; (80098fc <_Bfree+0x40>)
 80098d8:	f000 feec 	bl	800a6b4 <__assert_func>
 80098dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098e0:	6006      	str	r6, [r0, #0]
 80098e2:	60c6      	str	r6, [r0, #12]
 80098e4:	b13c      	cbz	r4, 80098f6 <_Bfree+0x3a>
 80098e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098e8:	6862      	ldr	r2, [r4, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098f0:	6021      	str	r1, [r4, #0]
 80098f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	0800b44e 	.word	0x0800b44e
 80098fc:	0800b54c 	.word	0x0800b54c

08009900 <__multadd>:
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	4607      	mov	r7, r0
 8009906:	460c      	mov	r4, r1
 8009908:	461e      	mov	r6, r3
 800990a:	2000      	movs	r0, #0
 800990c:	690d      	ldr	r5, [r1, #16]
 800990e:	f101 0c14 	add.w	ip, r1, #20
 8009912:	f8dc 3000 	ldr.w	r3, [ip]
 8009916:	3001      	adds	r0, #1
 8009918:	b299      	uxth	r1, r3
 800991a:	fb02 6101 	mla	r1, r2, r1, r6
 800991e:	0c1e      	lsrs	r6, r3, #16
 8009920:	0c0b      	lsrs	r3, r1, #16
 8009922:	fb02 3306 	mla	r3, r2, r6, r3
 8009926:	b289      	uxth	r1, r1
 8009928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800992c:	4285      	cmp	r5, r0
 800992e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009932:	f84c 1b04 	str.w	r1, [ip], #4
 8009936:	dcec      	bgt.n	8009912 <__multadd+0x12>
 8009938:	b30e      	cbz	r6, 800997e <__multadd+0x7e>
 800993a:	68a3      	ldr	r3, [r4, #8]
 800993c:	42ab      	cmp	r3, r5
 800993e:	dc19      	bgt.n	8009974 <__multadd+0x74>
 8009940:	6861      	ldr	r1, [r4, #4]
 8009942:	4638      	mov	r0, r7
 8009944:	3101      	adds	r1, #1
 8009946:	f7ff ff79 	bl	800983c <_Balloc>
 800994a:	4680      	mov	r8, r0
 800994c:	b928      	cbnz	r0, 800995a <__multadd+0x5a>
 800994e:	4602      	mov	r2, r0
 8009950:	21b5      	movs	r1, #181	; 0xb5
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <__multadd+0x84>)
 8009954:	480c      	ldr	r0, [pc, #48]	; (8009988 <__multadd+0x88>)
 8009956:	f000 fead 	bl	800a6b4 <__assert_func>
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	f104 010c 	add.w	r1, r4, #12
 8009960:	3202      	adds	r2, #2
 8009962:	0092      	lsls	r2, r2, #2
 8009964:	300c      	adds	r0, #12
 8009966:	f7ff ff5b 	bl	8009820 <memcpy>
 800996a:	4621      	mov	r1, r4
 800996c:	4638      	mov	r0, r7
 800996e:	f7ff ffa5 	bl	80098bc <_Bfree>
 8009972:	4644      	mov	r4, r8
 8009974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009978:	3501      	adds	r5, #1
 800997a:	615e      	str	r6, [r3, #20]
 800997c:	6125      	str	r5, [r4, #16]
 800997e:	4620      	mov	r0, r4
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	0800b4c0 	.word	0x0800b4c0
 8009988:	0800b54c 	.word	0x0800b54c

0800998c <__s2b>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	4615      	mov	r5, r2
 8009992:	2209      	movs	r2, #9
 8009994:	461f      	mov	r7, r3
 8009996:	3308      	adds	r3, #8
 8009998:	460c      	mov	r4, r1
 800999a:	fb93 f3f2 	sdiv	r3, r3, r2
 800999e:	4606      	mov	r6, r0
 80099a0:	2201      	movs	r2, #1
 80099a2:	2100      	movs	r1, #0
 80099a4:	429a      	cmp	r2, r3
 80099a6:	db09      	blt.n	80099bc <__s2b+0x30>
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7ff ff47 	bl	800983c <_Balloc>
 80099ae:	b940      	cbnz	r0, 80099c2 <__s2b+0x36>
 80099b0:	4602      	mov	r2, r0
 80099b2:	21ce      	movs	r1, #206	; 0xce
 80099b4:	4b18      	ldr	r3, [pc, #96]	; (8009a18 <__s2b+0x8c>)
 80099b6:	4819      	ldr	r0, [pc, #100]	; (8009a1c <__s2b+0x90>)
 80099b8:	f000 fe7c 	bl	800a6b4 <__assert_func>
 80099bc:	0052      	lsls	r2, r2, #1
 80099be:	3101      	adds	r1, #1
 80099c0:	e7f0      	b.n	80099a4 <__s2b+0x18>
 80099c2:	9b08      	ldr	r3, [sp, #32]
 80099c4:	2d09      	cmp	r5, #9
 80099c6:	6143      	str	r3, [r0, #20]
 80099c8:	f04f 0301 	mov.w	r3, #1
 80099cc:	6103      	str	r3, [r0, #16]
 80099ce:	dd16      	ble.n	80099fe <__s2b+0x72>
 80099d0:	f104 0909 	add.w	r9, r4, #9
 80099d4:	46c8      	mov	r8, r9
 80099d6:	442c      	add	r4, r5
 80099d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099dc:	4601      	mov	r1, r0
 80099de:	220a      	movs	r2, #10
 80099e0:	4630      	mov	r0, r6
 80099e2:	3b30      	subs	r3, #48	; 0x30
 80099e4:	f7ff ff8c 	bl	8009900 <__multadd>
 80099e8:	45a0      	cmp	r8, r4
 80099ea:	d1f5      	bne.n	80099d8 <__s2b+0x4c>
 80099ec:	f1a5 0408 	sub.w	r4, r5, #8
 80099f0:	444c      	add	r4, r9
 80099f2:	1b2d      	subs	r5, r5, r4
 80099f4:	1963      	adds	r3, r4, r5
 80099f6:	42bb      	cmp	r3, r7
 80099f8:	db04      	blt.n	8009a04 <__s2b+0x78>
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	2509      	movs	r5, #9
 8009a00:	340a      	adds	r4, #10
 8009a02:	e7f6      	b.n	80099f2 <__s2b+0x66>
 8009a04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a08:	4601      	mov	r1, r0
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	3b30      	subs	r3, #48	; 0x30
 8009a10:	f7ff ff76 	bl	8009900 <__multadd>
 8009a14:	e7ee      	b.n	80099f4 <__s2b+0x68>
 8009a16:	bf00      	nop
 8009a18:	0800b4c0 	.word	0x0800b4c0
 8009a1c:	0800b54c 	.word	0x0800b54c

08009a20 <__hi0bits>:
 8009a20:	0c02      	lsrs	r2, r0, #16
 8009a22:	0412      	lsls	r2, r2, #16
 8009a24:	4603      	mov	r3, r0
 8009a26:	b9ca      	cbnz	r2, 8009a5c <__hi0bits+0x3c>
 8009a28:	0403      	lsls	r3, r0, #16
 8009a2a:	2010      	movs	r0, #16
 8009a2c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a30:	bf04      	itt	eq
 8009a32:	021b      	lsleq	r3, r3, #8
 8009a34:	3008      	addeq	r0, #8
 8009a36:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a3a:	bf04      	itt	eq
 8009a3c:	011b      	lsleq	r3, r3, #4
 8009a3e:	3004      	addeq	r0, #4
 8009a40:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a44:	bf04      	itt	eq
 8009a46:	009b      	lsleq	r3, r3, #2
 8009a48:	3002      	addeq	r0, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	db05      	blt.n	8009a5a <__hi0bits+0x3a>
 8009a4e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009a52:	f100 0001 	add.w	r0, r0, #1
 8009a56:	bf08      	it	eq
 8009a58:	2020      	moveq	r0, #32
 8009a5a:	4770      	bx	lr
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7e5      	b.n	8009a2c <__hi0bits+0xc>

08009a60 <__lo0bits>:
 8009a60:	6803      	ldr	r3, [r0, #0]
 8009a62:	4602      	mov	r2, r0
 8009a64:	f013 0007 	ands.w	r0, r3, #7
 8009a68:	d00b      	beq.n	8009a82 <__lo0bits+0x22>
 8009a6a:	07d9      	lsls	r1, r3, #31
 8009a6c:	d421      	bmi.n	8009ab2 <__lo0bits+0x52>
 8009a6e:	0798      	lsls	r0, r3, #30
 8009a70:	bf49      	itett	mi
 8009a72:	085b      	lsrmi	r3, r3, #1
 8009a74:	089b      	lsrpl	r3, r3, #2
 8009a76:	2001      	movmi	r0, #1
 8009a78:	6013      	strmi	r3, [r2, #0]
 8009a7a:	bf5c      	itt	pl
 8009a7c:	2002      	movpl	r0, #2
 8009a7e:	6013      	strpl	r3, [r2, #0]
 8009a80:	4770      	bx	lr
 8009a82:	b299      	uxth	r1, r3
 8009a84:	b909      	cbnz	r1, 8009a8a <__lo0bits+0x2a>
 8009a86:	2010      	movs	r0, #16
 8009a88:	0c1b      	lsrs	r3, r3, #16
 8009a8a:	b2d9      	uxtb	r1, r3
 8009a8c:	b909      	cbnz	r1, 8009a92 <__lo0bits+0x32>
 8009a8e:	3008      	adds	r0, #8
 8009a90:	0a1b      	lsrs	r3, r3, #8
 8009a92:	0719      	lsls	r1, r3, #28
 8009a94:	bf04      	itt	eq
 8009a96:	091b      	lsreq	r3, r3, #4
 8009a98:	3004      	addeq	r0, #4
 8009a9a:	0799      	lsls	r1, r3, #30
 8009a9c:	bf04      	itt	eq
 8009a9e:	089b      	lsreq	r3, r3, #2
 8009aa0:	3002      	addeq	r0, #2
 8009aa2:	07d9      	lsls	r1, r3, #31
 8009aa4:	d403      	bmi.n	8009aae <__lo0bits+0x4e>
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	f100 0001 	add.w	r0, r0, #1
 8009aac:	d003      	beq.n	8009ab6 <__lo0bits+0x56>
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	4770      	bx	lr
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	4770      	bx	lr
 8009ab6:	2020      	movs	r0, #32
 8009ab8:	4770      	bx	lr
	...

08009abc <__i2b>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	460c      	mov	r4, r1
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	f7ff febb 	bl	800983c <_Balloc>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <__i2b+0x1a>
 8009aca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ace:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <__i2b+0x24>)
 8009ad0:	4804      	ldr	r0, [pc, #16]	; (8009ae4 <__i2b+0x28>)
 8009ad2:	f000 fdef 	bl	800a6b4 <__assert_func>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	6144      	str	r4, [r0, #20]
 8009ada:	6103      	str	r3, [r0, #16]
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop
 8009ae0:	0800b4c0 	.word	0x0800b4c0
 8009ae4:	0800b54c 	.word	0x0800b54c

08009ae8 <__multiply>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	4691      	mov	r9, r2
 8009aee:	690a      	ldr	r2, [r1, #16]
 8009af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009af4:	460c      	mov	r4, r1
 8009af6:	429a      	cmp	r2, r3
 8009af8:	bfbe      	ittt	lt
 8009afa:	460b      	movlt	r3, r1
 8009afc:	464c      	movlt	r4, r9
 8009afe:	4699      	movlt	r9, r3
 8009b00:	6927      	ldr	r7, [r4, #16]
 8009b02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	6861      	ldr	r1, [r4, #4]
 8009b0a:	eb07 060a 	add.w	r6, r7, sl
 8009b0e:	42b3      	cmp	r3, r6
 8009b10:	b085      	sub	sp, #20
 8009b12:	bfb8      	it	lt
 8009b14:	3101      	addlt	r1, #1
 8009b16:	f7ff fe91 	bl	800983c <_Balloc>
 8009b1a:	b930      	cbnz	r0, 8009b2a <__multiply+0x42>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	f240 115d 	movw	r1, #349	; 0x15d
 8009b22:	4b43      	ldr	r3, [pc, #268]	; (8009c30 <__multiply+0x148>)
 8009b24:	4843      	ldr	r0, [pc, #268]	; (8009c34 <__multiply+0x14c>)
 8009b26:	f000 fdc5 	bl	800a6b4 <__assert_func>
 8009b2a:	f100 0514 	add.w	r5, r0, #20
 8009b2e:	462b      	mov	r3, r5
 8009b30:	2200      	movs	r2, #0
 8009b32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b36:	4543      	cmp	r3, r8
 8009b38:	d321      	bcc.n	8009b7e <__multiply+0x96>
 8009b3a:	f104 0314 	add.w	r3, r4, #20
 8009b3e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b42:	f109 0314 	add.w	r3, r9, #20
 8009b46:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b4a:	9202      	str	r2, [sp, #8]
 8009b4c:	1b3a      	subs	r2, r7, r4
 8009b4e:	3a15      	subs	r2, #21
 8009b50:	f022 0203 	bic.w	r2, r2, #3
 8009b54:	3204      	adds	r2, #4
 8009b56:	f104 0115 	add.w	r1, r4, #21
 8009b5a:	428f      	cmp	r7, r1
 8009b5c:	bf38      	it	cc
 8009b5e:	2204      	movcc	r2, #4
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	9a02      	ldr	r2, [sp, #8]
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d80c      	bhi.n	8009b84 <__multiply+0x9c>
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	dd03      	ble.n	8009b76 <__multiply+0x8e>
 8009b6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d059      	beq.n	8009c2a <__multiply+0x142>
 8009b76:	6106      	str	r6, [r0, #16]
 8009b78:	b005      	add	sp, #20
 8009b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7e:	f843 2b04 	str.w	r2, [r3], #4
 8009b82:	e7d8      	b.n	8009b36 <__multiply+0x4e>
 8009b84:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b88:	f1ba 0f00 	cmp.w	sl, #0
 8009b8c:	d023      	beq.n	8009bd6 <__multiply+0xee>
 8009b8e:	46a9      	mov	r9, r5
 8009b90:	f04f 0c00 	mov.w	ip, #0
 8009b94:	f104 0e14 	add.w	lr, r4, #20
 8009b98:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b9c:	f8d9 1000 	ldr.w	r1, [r9]
 8009ba0:	fa1f fb82 	uxth.w	fp, r2
 8009ba4:	b289      	uxth	r1, r1
 8009ba6:	fb0a 110b 	mla	r1, sl, fp, r1
 8009baa:	4461      	add	r1, ip
 8009bac:	f8d9 c000 	ldr.w	ip, [r9]
 8009bb0:	0c12      	lsrs	r2, r2, #16
 8009bb2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009bb6:	fb0a c202 	mla	r2, sl, r2, ip
 8009bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bbe:	b289      	uxth	r1, r1
 8009bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bc4:	4577      	cmp	r7, lr
 8009bc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bca:	f849 1b04 	str.w	r1, [r9], #4
 8009bce:	d8e3      	bhi.n	8009b98 <__multiply+0xb0>
 8009bd0:	9a01      	ldr	r2, [sp, #4]
 8009bd2:	f845 c002 	str.w	ip, [r5, r2]
 8009bd6:	9a03      	ldr	r2, [sp, #12]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	d020      	beq.n	8009c26 <__multiply+0x13e>
 8009be4:	46ae      	mov	lr, r5
 8009be6:	f04f 0a00 	mov.w	sl, #0
 8009bea:	6829      	ldr	r1, [r5, #0]
 8009bec:	f104 0c14 	add.w	ip, r4, #20
 8009bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8009bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bf8:	b289      	uxth	r1, r1
 8009bfa:	fb09 220b 	mla	r2, r9, fp, r2
 8009bfe:	4492      	add	sl, r2
 8009c00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c04:	f84e 1b04 	str.w	r1, [lr], #4
 8009c08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c0c:	f8be 1000 	ldrh.w	r1, [lr]
 8009c10:	0c12      	lsrs	r2, r2, #16
 8009c12:	fb09 1102 	mla	r1, r9, r2, r1
 8009c16:	4567      	cmp	r7, ip
 8009c18:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c20:	d8e6      	bhi.n	8009bf0 <__multiply+0x108>
 8009c22:	9a01      	ldr	r2, [sp, #4]
 8009c24:	50a9      	str	r1, [r5, r2]
 8009c26:	3504      	adds	r5, #4
 8009c28:	e79b      	b.n	8009b62 <__multiply+0x7a>
 8009c2a:	3e01      	subs	r6, #1
 8009c2c:	e79d      	b.n	8009b6a <__multiply+0x82>
 8009c2e:	bf00      	nop
 8009c30:	0800b4c0 	.word	0x0800b4c0
 8009c34:	0800b54c 	.word	0x0800b54c

08009c38 <__pow5mult>:
 8009c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	4615      	mov	r5, r2
 8009c3e:	f012 0203 	ands.w	r2, r2, #3
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	d007      	beq.n	8009c58 <__pow5mult+0x20>
 8009c48:	4c25      	ldr	r4, [pc, #148]	; (8009ce0 <__pow5mult+0xa8>)
 8009c4a:	3a01      	subs	r2, #1
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c52:	f7ff fe55 	bl	8009900 <__multadd>
 8009c56:	4607      	mov	r7, r0
 8009c58:	10ad      	asrs	r5, r5, #2
 8009c5a:	d03d      	beq.n	8009cd8 <__pow5mult+0xa0>
 8009c5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c5e:	b97c      	cbnz	r4, 8009c80 <__pow5mult+0x48>
 8009c60:	2010      	movs	r0, #16
 8009c62:	f7ff fdb5 	bl	80097d0 <malloc>
 8009c66:	4602      	mov	r2, r0
 8009c68:	6270      	str	r0, [r6, #36]	; 0x24
 8009c6a:	b928      	cbnz	r0, 8009c78 <__pow5mult+0x40>
 8009c6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c70:	4b1c      	ldr	r3, [pc, #112]	; (8009ce4 <__pow5mult+0xac>)
 8009c72:	481d      	ldr	r0, [pc, #116]	; (8009ce8 <__pow5mult+0xb0>)
 8009c74:	f000 fd1e 	bl	800a6b4 <__assert_func>
 8009c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c7c:	6004      	str	r4, [r0, #0]
 8009c7e:	60c4      	str	r4, [r0, #12]
 8009c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c88:	b94c      	cbnz	r4, 8009c9e <__pow5mult+0x66>
 8009c8a:	f240 2171 	movw	r1, #625	; 0x271
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff14 	bl	8009abc <__i2b>
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	f04f 0900 	mov.w	r9, #0
 8009ca2:	07eb      	lsls	r3, r5, #31
 8009ca4:	d50a      	bpl.n	8009cbc <__pow5mult+0x84>
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7ff ff1c 	bl	8009ae8 <__multiply>
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff fe01 	bl	80098bc <_Bfree>
 8009cba:	4647      	mov	r7, r8
 8009cbc:	106d      	asrs	r5, r5, #1
 8009cbe:	d00b      	beq.n	8009cd8 <__pow5mult+0xa0>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	b938      	cbnz	r0, 8009cd4 <__pow5mult+0x9c>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff ff0d 	bl	8009ae8 <__multiply>
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	f8c0 9000 	str.w	r9, [r0]
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	e7e4      	b.n	8009ca2 <__pow5mult+0x6a>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cde:	bf00      	nop
 8009ce0:	0800b698 	.word	0x0800b698
 8009ce4:	0800b44e 	.word	0x0800b44e
 8009ce8:	0800b54c 	.word	0x0800b54c

08009cec <__lshift>:
 8009cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	4691      	mov	r9, r2
 8009cf6:	6923      	ldr	r3, [r4, #16]
 8009cf8:	6849      	ldr	r1, [r1, #4]
 8009cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d04:	f108 0601 	add.w	r6, r8, #1
 8009d08:	42b3      	cmp	r3, r6
 8009d0a:	db0b      	blt.n	8009d24 <__lshift+0x38>
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f7ff fd95 	bl	800983c <_Balloc>
 8009d12:	4605      	mov	r5, r0
 8009d14:	b948      	cbnz	r0, 8009d2a <__lshift+0x3e>
 8009d16:	4602      	mov	r2, r0
 8009d18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d1c:	4b29      	ldr	r3, [pc, #164]	; (8009dc4 <__lshift+0xd8>)
 8009d1e:	482a      	ldr	r0, [pc, #168]	; (8009dc8 <__lshift+0xdc>)
 8009d20:	f000 fcc8 	bl	800a6b4 <__assert_func>
 8009d24:	3101      	adds	r1, #1
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	e7ee      	b.n	8009d08 <__lshift+0x1c>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f100 0114 	add.w	r1, r0, #20
 8009d30:	f100 0210 	add.w	r2, r0, #16
 8009d34:	4618      	mov	r0, r3
 8009d36:	4553      	cmp	r3, sl
 8009d38:	db37      	blt.n	8009daa <__lshift+0xbe>
 8009d3a:	6920      	ldr	r0, [r4, #16]
 8009d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d40:	f104 0314 	add.w	r3, r4, #20
 8009d44:	f019 091f 	ands.w	r9, r9, #31
 8009d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d50:	d02f      	beq.n	8009db2 <__lshift+0xc6>
 8009d52:	468a      	mov	sl, r1
 8009d54:	f04f 0c00 	mov.w	ip, #0
 8009d58:	f1c9 0e20 	rsb	lr, r9, #32
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	fa02 f209 	lsl.w	r2, r2, r9
 8009d62:	ea42 020c 	orr.w	r2, r2, ip
 8009d66:	f84a 2b04 	str.w	r2, [sl], #4
 8009d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6e:	4298      	cmp	r0, r3
 8009d70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d74:	d8f2      	bhi.n	8009d5c <__lshift+0x70>
 8009d76:	1b03      	subs	r3, r0, r4
 8009d78:	3b15      	subs	r3, #21
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	3304      	adds	r3, #4
 8009d80:	f104 0215 	add.w	r2, r4, #21
 8009d84:	4290      	cmp	r0, r2
 8009d86:	bf38      	it	cc
 8009d88:	2304      	movcc	r3, #4
 8009d8a:	f841 c003 	str.w	ip, [r1, r3]
 8009d8e:	f1bc 0f00 	cmp.w	ip, #0
 8009d92:	d001      	beq.n	8009d98 <__lshift+0xac>
 8009d94:	f108 0602 	add.w	r6, r8, #2
 8009d98:	3e01      	subs	r6, #1
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	612e      	str	r6, [r5, #16]
 8009da0:	f7ff fd8c 	bl	80098bc <_Bfree>
 8009da4:	4628      	mov	r0, r5
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dae:	3301      	adds	r3, #1
 8009db0:	e7c1      	b.n	8009d36 <__lshift+0x4a>
 8009db2:	3904      	subs	r1, #4
 8009db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db8:	4298      	cmp	r0, r3
 8009dba:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dbe:	d8f9      	bhi.n	8009db4 <__lshift+0xc8>
 8009dc0:	e7ea      	b.n	8009d98 <__lshift+0xac>
 8009dc2:	bf00      	nop
 8009dc4:	0800b4c0 	.word	0x0800b4c0
 8009dc8:	0800b54c 	.word	0x0800b54c

08009dcc <__mcmp>:
 8009dcc:	4603      	mov	r3, r0
 8009dce:	690a      	ldr	r2, [r1, #16]
 8009dd0:	6900      	ldr	r0, [r0, #16]
 8009dd2:	b530      	push	{r4, r5, lr}
 8009dd4:	1a80      	subs	r0, r0, r2
 8009dd6:	d10d      	bne.n	8009df4 <__mcmp+0x28>
 8009dd8:	3314      	adds	r3, #20
 8009dda:	3114      	adds	r1, #20
 8009ddc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009de0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009de4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009de8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dec:	4295      	cmp	r5, r2
 8009dee:	d002      	beq.n	8009df6 <__mcmp+0x2a>
 8009df0:	d304      	bcc.n	8009dfc <__mcmp+0x30>
 8009df2:	2001      	movs	r0, #1
 8009df4:	bd30      	pop	{r4, r5, pc}
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	d3f4      	bcc.n	8009de4 <__mcmp+0x18>
 8009dfa:	e7fb      	b.n	8009df4 <__mcmp+0x28>
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	e7f8      	b.n	8009df4 <__mcmp+0x28>
	...

08009e04 <__mdiff>:
 8009e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	460d      	mov	r5, r1
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4628      	mov	r0, r5
 8009e10:	4614      	mov	r4, r2
 8009e12:	f7ff ffdb 	bl	8009dcc <__mcmp>
 8009e16:	1e06      	subs	r6, r0, #0
 8009e18:	d111      	bne.n	8009e3e <__mdiff+0x3a>
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff fd0d 	bl	800983c <_Balloc>
 8009e22:	4602      	mov	r2, r0
 8009e24:	b928      	cbnz	r0, 8009e32 <__mdiff+0x2e>
 8009e26:	f240 2132 	movw	r1, #562	; 0x232
 8009e2a:	4b3a      	ldr	r3, [pc, #232]	; (8009f14 <__mdiff+0x110>)
 8009e2c:	483a      	ldr	r0, [pc, #232]	; (8009f18 <__mdiff+0x114>)
 8009e2e:	f000 fc41 	bl	800a6b4 <__assert_func>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009e38:	4610      	mov	r0, r2
 8009e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	bfa4      	itt	ge
 8009e40:	4623      	movge	r3, r4
 8009e42:	462c      	movge	r4, r5
 8009e44:	4638      	mov	r0, r7
 8009e46:	6861      	ldr	r1, [r4, #4]
 8009e48:	bfa6      	itte	ge
 8009e4a:	461d      	movge	r5, r3
 8009e4c:	2600      	movge	r6, #0
 8009e4e:	2601      	movlt	r6, #1
 8009e50:	f7ff fcf4 	bl	800983c <_Balloc>
 8009e54:	4602      	mov	r2, r0
 8009e56:	b918      	cbnz	r0, 8009e60 <__mdiff+0x5c>
 8009e58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e5c:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <__mdiff+0x110>)
 8009e5e:	e7e5      	b.n	8009e2c <__mdiff+0x28>
 8009e60:	f102 0814 	add.w	r8, r2, #20
 8009e64:	46c2      	mov	sl, r8
 8009e66:	f04f 0c00 	mov.w	ip, #0
 8009e6a:	6927      	ldr	r7, [r4, #16]
 8009e6c:	60c6      	str	r6, [r0, #12]
 8009e6e:	692e      	ldr	r6, [r5, #16]
 8009e70:	f104 0014 	add.w	r0, r4, #20
 8009e74:	f105 0914 	add.w	r9, r5, #20
 8009e78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009e7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e80:	3410      	adds	r4, #16
 8009e82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009e86:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e8a:	fa1f f18b 	uxth.w	r1, fp
 8009e8e:	448c      	add	ip, r1
 8009e90:	b299      	uxth	r1, r3
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	ebac 0101 	sub.w	r1, ip, r1
 8009e98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ea0:	b289      	uxth	r1, r1
 8009ea2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009ea6:	454e      	cmp	r6, r9
 8009ea8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009eac:	f84a 3b04 	str.w	r3, [sl], #4
 8009eb0:	d8e7      	bhi.n	8009e82 <__mdiff+0x7e>
 8009eb2:	1b73      	subs	r3, r6, r5
 8009eb4:	3b15      	subs	r3, #21
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	3515      	adds	r5, #21
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	42ae      	cmp	r6, r5
 8009ec0:	bf38      	it	cc
 8009ec2:	2304      	movcc	r3, #4
 8009ec4:	4418      	add	r0, r3
 8009ec6:	4443      	add	r3, r8
 8009ec8:	461e      	mov	r6, r3
 8009eca:	4605      	mov	r5, r0
 8009ecc:	4575      	cmp	r5, lr
 8009ece:	d30e      	bcc.n	8009eee <__mdiff+0xea>
 8009ed0:	f10e 0103 	add.w	r1, lr, #3
 8009ed4:	1a09      	subs	r1, r1, r0
 8009ed6:	f021 0103 	bic.w	r1, r1, #3
 8009eda:	3803      	subs	r0, #3
 8009edc:	4586      	cmp	lr, r0
 8009ede:	bf38      	it	cc
 8009ee0:	2100      	movcc	r1, #0
 8009ee2:	4419      	add	r1, r3
 8009ee4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ee8:	b18b      	cbz	r3, 8009f0e <__mdiff+0x10a>
 8009eea:	6117      	str	r7, [r2, #16]
 8009eec:	e7a4      	b.n	8009e38 <__mdiff+0x34>
 8009eee:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ef2:	fa1f f188 	uxth.w	r1, r8
 8009ef6:	4461      	add	r1, ip
 8009ef8:	140c      	asrs	r4, r1, #16
 8009efa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009efe:	b289      	uxth	r1, r1
 8009f00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f04:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009f08:	f846 1b04 	str.w	r1, [r6], #4
 8009f0c:	e7de      	b.n	8009ecc <__mdiff+0xc8>
 8009f0e:	3f01      	subs	r7, #1
 8009f10:	e7e8      	b.n	8009ee4 <__mdiff+0xe0>
 8009f12:	bf00      	nop
 8009f14:	0800b4c0 	.word	0x0800b4c0
 8009f18:	0800b54c 	.word	0x0800b54c

08009f1c <__ulp>:
 8009f1c:	4b11      	ldr	r3, [pc, #68]	; (8009f64 <__ulp+0x48>)
 8009f1e:	400b      	ands	r3, r1
 8009f20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd02      	ble.n	8009f2e <__ulp+0x12>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4770      	bx	lr
 8009f2e:	425b      	negs	r3, r3
 8009f30:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f04f 0100 	mov.w	r1, #0
 8009f3c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f40:	da04      	bge.n	8009f4c <__ulp+0x30>
 8009f42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f46:	fa43 f102 	asr.w	r1, r3, r2
 8009f4a:	4770      	bx	lr
 8009f4c:	f1a2 0314 	sub.w	r3, r2, #20
 8009f50:	2b1e      	cmp	r3, #30
 8009f52:	bfd6      	itet	le
 8009f54:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009f58:	2301      	movgt	r3, #1
 8009f5a:	fa22 f303 	lsrle.w	r3, r2, r3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	7ff00000 	.word	0x7ff00000

08009f68 <__b2d>:
 8009f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	6907      	ldr	r7, [r0, #16]
 8009f6e:	f100 0914 	add.w	r9, r0, #20
 8009f72:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009f76:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009f7a:	f1a7 0804 	sub.w	r8, r7, #4
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7ff fd4e 	bl	8009a20 <__hi0bits>
 8009f84:	f1c0 0320 	rsb	r3, r0, #32
 8009f88:	280a      	cmp	r0, #10
 8009f8a:	600b      	str	r3, [r1, #0]
 8009f8c:	491f      	ldr	r1, [pc, #124]	; (800a00c <__b2d+0xa4>)
 8009f8e:	dc17      	bgt.n	8009fc0 <__b2d+0x58>
 8009f90:	45c1      	cmp	r9, r8
 8009f92:	bf28      	it	cs
 8009f94:	2200      	movcs	r2, #0
 8009f96:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f9a:	fa26 f30c 	lsr.w	r3, r6, ip
 8009f9e:	bf38      	it	cc
 8009fa0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009fa4:	ea43 0501 	orr.w	r5, r3, r1
 8009fa8:	f100 0315 	add.w	r3, r0, #21
 8009fac:	fa06 f303 	lsl.w	r3, r6, r3
 8009fb0:	fa22 f20c 	lsr.w	r2, r2, ip
 8009fb4:	ea43 0402 	orr.w	r4, r3, r2
 8009fb8:	4620      	mov	r0, r4
 8009fba:	4629      	mov	r1, r5
 8009fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc0:	45c1      	cmp	r9, r8
 8009fc2:	bf2e      	itee	cs
 8009fc4:	2200      	movcs	r2, #0
 8009fc6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009fca:	f1a7 0808 	subcc.w	r8, r7, #8
 8009fce:	f1b0 030b 	subs.w	r3, r0, #11
 8009fd2:	d016      	beq.n	800a002 <__b2d+0x9a>
 8009fd4:	f1c3 0720 	rsb	r7, r3, #32
 8009fd8:	fa22 f107 	lsr.w	r1, r2, r7
 8009fdc:	45c8      	cmp	r8, r9
 8009fde:	fa06 f603 	lsl.w	r6, r6, r3
 8009fe2:	ea46 0601 	orr.w	r6, r6, r1
 8009fe6:	bf94      	ite	ls
 8009fe8:	2100      	movls	r1, #0
 8009fea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009fee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009ff2:	fa02 f003 	lsl.w	r0, r2, r3
 8009ff6:	40f9      	lsrs	r1, r7
 8009ff8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ffc:	ea40 0401 	orr.w	r4, r0, r1
 800a000:	e7da      	b.n	8009fb8 <__b2d+0x50>
 800a002:	4614      	mov	r4, r2
 800a004:	ea46 0501 	orr.w	r5, r6, r1
 800a008:	e7d6      	b.n	8009fb8 <__b2d+0x50>
 800a00a:	bf00      	nop
 800a00c:	3ff00000 	.word	0x3ff00000

0800a010 <__d2b>:
 800a010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a014:	2101      	movs	r1, #1
 800a016:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a01a:	4690      	mov	r8, r2
 800a01c:	461d      	mov	r5, r3
 800a01e:	f7ff fc0d 	bl	800983c <_Balloc>
 800a022:	4604      	mov	r4, r0
 800a024:	b930      	cbnz	r0, 800a034 <__d2b+0x24>
 800a026:	4602      	mov	r2, r0
 800a028:	f240 310a 	movw	r1, #778	; 0x30a
 800a02c:	4b24      	ldr	r3, [pc, #144]	; (800a0c0 <__d2b+0xb0>)
 800a02e:	4825      	ldr	r0, [pc, #148]	; (800a0c4 <__d2b+0xb4>)
 800a030:	f000 fb40 	bl	800a6b4 <__assert_func>
 800a034:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a038:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a03c:	bb2d      	cbnz	r5, 800a08a <__d2b+0x7a>
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	f1b8 0300 	subs.w	r3, r8, #0
 800a044:	d026      	beq.n	800a094 <__d2b+0x84>
 800a046:	4668      	mov	r0, sp
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	f7ff fd09 	bl	8009a60 <__lo0bits>
 800a04e:	9900      	ldr	r1, [sp, #0]
 800a050:	b1f0      	cbz	r0, 800a090 <__d2b+0x80>
 800a052:	9a01      	ldr	r2, [sp, #4]
 800a054:	f1c0 0320 	rsb	r3, r0, #32
 800a058:	fa02 f303 	lsl.w	r3, r2, r3
 800a05c:	430b      	orrs	r3, r1
 800a05e:	40c2      	lsrs	r2, r0
 800a060:	6163      	str	r3, [r4, #20]
 800a062:	9201      	str	r2, [sp, #4]
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	bf14      	ite	ne
 800a06a:	2102      	movne	r1, #2
 800a06c:	2101      	moveq	r1, #1
 800a06e:	61a3      	str	r3, [r4, #24]
 800a070:	6121      	str	r1, [r4, #16]
 800a072:	b1c5      	cbz	r5, 800a0a6 <__d2b+0x96>
 800a074:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a078:	4405      	add	r5, r0
 800a07a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a07e:	603d      	str	r5, [r7, #0]
 800a080:	6030      	str	r0, [r6, #0]
 800a082:	4620      	mov	r0, r4
 800a084:	b002      	add	sp, #8
 800a086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a08e:	e7d6      	b.n	800a03e <__d2b+0x2e>
 800a090:	6161      	str	r1, [r4, #20]
 800a092:	e7e7      	b.n	800a064 <__d2b+0x54>
 800a094:	a801      	add	r0, sp, #4
 800a096:	f7ff fce3 	bl	8009a60 <__lo0bits>
 800a09a:	2101      	movs	r1, #1
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	6121      	str	r1, [r4, #16]
 800a0a0:	6163      	str	r3, [r4, #20]
 800a0a2:	3020      	adds	r0, #32
 800a0a4:	e7e5      	b.n	800a072 <__d2b+0x62>
 800a0a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a0aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0ae:	6038      	str	r0, [r7, #0]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fcb5 	bl	8009a20 <__hi0bits>
 800a0b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a0ba:	6031      	str	r1, [r6, #0]
 800a0bc:	e7e1      	b.n	800a082 <__d2b+0x72>
 800a0be:	bf00      	nop
 800a0c0:	0800b4c0 	.word	0x0800b4c0
 800a0c4:	0800b54c 	.word	0x0800b54c

0800a0c8 <__ratio>:
 800a0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	4688      	mov	r8, r1
 800a0ce:	4669      	mov	r1, sp
 800a0d0:	4681      	mov	r9, r0
 800a0d2:	f7ff ff49 	bl	8009f68 <__b2d>
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	4604      	mov	r4, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	4640      	mov	r0, r8
 800a0de:	a901      	add	r1, sp, #4
 800a0e0:	f7ff ff42 	bl	8009f68 <__b2d>
 800a0e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a0ec:	468b      	mov	fp, r1
 800a0ee:	eba3 0c02 	sub.w	ip, r3, r2
 800a0f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0f6:	1a9b      	subs	r3, r3, r2
 800a0f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bfd5      	itete	le
 800a100:	460a      	movle	r2, r1
 800a102:	462a      	movgt	r2, r5
 800a104:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a108:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a10c:	bfd8      	it	le
 800a10e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a112:	465b      	mov	r3, fp
 800a114:	4602      	mov	r2, r0
 800a116:	4639      	mov	r1, r7
 800a118:	4620      	mov	r0, r4
 800a11a:	f7f6 fb07 	bl	800072c <__aeabi_ddiv>
 800a11e:	b003      	add	sp, #12
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a124 <__copybits>:
 800a124:	3901      	subs	r1, #1
 800a126:	b570      	push	{r4, r5, r6, lr}
 800a128:	1149      	asrs	r1, r1, #5
 800a12a:	6914      	ldr	r4, [r2, #16]
 800a12c:	3101      	adds	r1, #1
 800a12e:	f102 0314 	add.w	r3, r2, #20
 800a132:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a136:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a13a:	1f05      	subs	r5, r0, #4
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d30c      	bcc.n	800a15a <__copybits+0x36>
 800a140:	1aa3      	subs	r3, r4, r2
 800a142:	3b11      	subs	r3, #17
 800a144:	f023 0303 	bic.w	r3, r3, #3
 800a148:	3211      	adds	r2, #17
 800a14a:	42a2      	cmp	r2, r4
 800a14c:	bf88      	it	hi
 800a14e:	2300      	movhi	r3, #0
 800a150:	4418      	add	r0, r3
 800a152:	2300      	movs	r3, #0
 800a154:	4288      	cmp	r0, r1
 800a156:	d305      	bcc.n	800a164 <__copybits+0x40>
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a15e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a162:	e7eb      	b.n	800a13c <__copybits+0x18>
 800a164:	f840 3b04 	str.w	r3, [r0], #4
 800a168:	e7f4      	b.n	800a154 <__copybits+0x30>

0800a16a <__any_on>:
 800a16a:	f100 0214 	add.w	r2, r0, #20
 800a16e:	6900      	ldr	r0, [r0, #16]
 800a170:	114b      	asrs	r3, r1, #5
 800a172:	4298      	cmp	r0, r3
 800a174:	b510      	push	{r4, lr}
 800a176:	db11      	blt.n	800a19c <__any_on+0x32>
 800a178:	dd0a      	ble.n	800a190 <__any_on+0x26>
 800a17a:	f011 011f 	ands.w	r1, r1, #31
 800a17e:	d007      	beq.n	800a190 <__any_on+0x26>
 800a180:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a184:	fa24 f001 	lsr.w	r0, r4, r1
 800a188:	fa00 f101 	lsl.w	r1, r0, r1
 800a18c:	428c      	cmp	r4, r1
 800a18e:	d10b      	bne.n	800a1a8 <__any_on+0x3e>
 800a190:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a194:	4293      	cmp	r3, r2
 800a196:	d803      	bhi.n	800a1a0 <__any_on+0x36>
 800a198:	2000      	movs	r0, #0
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	4603      	mov	r3, r0
 800a19e:	e7f7      	b.n	800a190 <__any_on+0x26>
 800a1a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	d0f5      	beq.n	800a194 <__any_on+0x2a>
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	e7f6      	b.n	800a19a <__any_on+0x30>

0800a1ac <_calloc_r>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	fba1 5402 	umull	r5, r4, r1, r2
 800a1b2:	b934      	cbnz	r4, 800a1c2 <_calloc_r+0x16>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	f000 f875 	bl	800a2a4 <_malloc_r>
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	b928      	cbnz	r0, 800a1ca <_calloc_r+0x1e>
 800a1be:	4630      	mov	r0, r6
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	220c      	movs	r2, #12
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	6002      	str	r2, [r0, #0]
 800a1c8:	e7f9      	b.n	800a1be <_calloc_r+0x12>
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	f7fc fbf3 	bl	80069b8 <memset>
 800a1d2:	e7f4      	b.n	800a1be <_calloc_r+0x12>

0800a1d4 <_free_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d040      	beq.n	800a25e <_free_r+0x8a>
 800a1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e0:	1f0c      	subs	r4, r1, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfb8      	it	lt
 800a1e6:	18e4      	addlt	r4, r4, r3
 800a1e8:	f000 faae 	bl	800a748 <__malloc_lock>
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <_free_r+0x8c>)
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	b933      	cbnz	r3, 800a200 <_free_r+0x2c>
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	6014      	str	r4, [r2, #0]
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fc:	f000 baaa 	b.w	800a754 <__malloc_unlock>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d908      	bls.n	800a216 <_free_r+0x42>
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	1821      	adds	r1, r4, r0
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf01      	itttt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	1809      	addeq	r1, r1, r0
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	e7ed      	b.n	800a1f2 <_free_r+0x1e>
 800a216:	461a      	mov	r2, r3
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b10b      	cbz	r3, 800a220 <_free_r+0x4c>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d9fa      	bls.n	800a216 <_free_r+0x42>
 800a220:	6811      	ldr	r1, [r2, #0]
 800a222:	1850      	adds	r0, r2, r1
 800a224:	42a0      	cmp	r0, r4
 800a226:	d10b      	bne.n	800a240 <_free_r+0x6c>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	4401      	add	r1, r0
 800a22c:	1850      	adds	r0, r2, r1
 800a22e:	4283      	cmp	r3, r0
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	d1e0      	bne.n	800a1f6 <_free_r+0x22>
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	4401      	add	r1, r0
 800a23a:	6011      	str	r1, [r2, #0]
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	e7da      	b.n	800a1f6 <_free_r+0x22>
 800a240:	d902      	bls.n	800a248 <_free_r+0x74>
 800a242:	230c      	movs	r3, #12
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	e7d6      	b.n	800a1f6 <_free_r+0x22>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	1821      	adds	r1, r4, r0
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf01      	itttt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	1809      	addeq	r1, r1, r0
 800a256:	6021      	streq	r1, [r4, #0]
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	6054      	str	r4, [r2, #4]
 800a25c:	e7cb      	b.n	800a1f6 <_free_r+0x22>
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	2000049c 	.word	0x2000049c

0800a264 <sbrk_aligned>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	4e0e      	ldr	r6, [pc, #56]	; (800a2a0 <sbrk_aligned+0x3c>)
 800a268:	460c      	mov	r4, r1
 800a26a:	6831      	ldr	r1, [r6, #0]
 800a26c:	4605      	mov	r5, r0
 800a26e:	b911      	cbnz	r1, 800a276 <sbrk_aligned+0x12>
 800a270:	f000 f9ee 	bl	800a650 <_sbrk_r>
 800a274:	6030      	str	r0, [r6, #0]
 800a276:	4621      	mov	r1, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f000 f9e9 	bl	800a650 <_sbrk_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d00a      	beq.n	800a298 <sbrk_aligned+0x34>
 800a282:	1cc4      	adds	r4, r0, #3
 800a284:	f024 0403 	bic.w	r4, r4, #3
 800a288:	42a0      	cmp	r0, r4
 800a28a:	d007      	beq.n	800a29c <sbrk_aligned+0x38>
 800a28c:	1a21      	subs	r1, r4, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 f9de 	bl	800a650 <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d101      	bne.n	800a29c <sbrk_aligned+0x38>
 800a298:	f04f 34ff 	mov.w	r4, #4294967295
 800a29c:	4620      	mov	r0, r4
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	200004a0 	.word	0x200004a0

0800a2a4 <_malloc_r>:
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	1ccd      	adds	r5, r1, #3
 800a2aa:	f025 0503 	bic.w	r5, r5, #3
 800a2ae:	3508      	adds	r5, #8
 800a2b0:	2d0c      	cmp	r5, #12
 800a2b2:	bf38      	it	cc
 800a2b4:	250c      	movcc	r5, #12
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	db01      	blt.n	800a2c0 <_malloc_r+0x1c>
 800a2bc:	42a9      	cmp	r1, r5
 800a2be:	d905      	bls.n	800a2cc <_malloc_r+0x28>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	2600      	movs	r6, #0
 800a2c4:	603b      	str	r3, [r7, #0]
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2cc:	4e2e      	ldr	r6, [pc, #184]	; (800a388 <_malloc_r+0xe4>)
 800a2ce:	f000 fa3b 	bl	800a748 <__malloc_lock>
 800a2d2:	6833      	ldr	r3, [r6, #0]
 800a2d4:	461c      	mov	r4, r3
 800a2d6:	bb34      	cbnz	r4, 800a326 <_malloc_r+0x82>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4638      	mov	r0, r7
 800a2dc:	f7ff ffc2 	bl	800a264 <sbrk_aligned>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	d14d      	bne.n	800a382 <_malloc_r+0xde>
 800a2e6:	6834      	ldr	r4, [r6, #0]
 800a2e8:	4626      	mov	r6, r4
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	d140      	bne.n	800a370 <_malloc_r+0xcc>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	eb04 0803 	add.w	r8, r4, r3
 800a2f8:	f000 f9aa 	bl	800a650 <_sbrk_r>
 800a2fc:	4580      	cmp	r8, r0
 800a2fe:	d13a      	bne.n	800a376 <_malloc_r+0xd2>
 800a300:	6821      	ldr	r1, [r4, #0]
 800a302:	3503      	adds	r5, #3
 800a304:	1a6d      	subs	r5, r5, r1
 800a306:	f025 0503 	bic.w	r5, r5, #3
 800a30a:	3508      	adds	r5, #8
 800a30c:	2d0c      	cmp	r5, #12
 800a30e:	bf38      	it	cc
 800a310:	250c      	movcc	r5, #12
 800a312:	4638      	mov	r0, r7
 800a314:	4629      	mov	r1, r5
 800a316:	f7ff ffa5 	bl	800a264 <sbrk_aligned>
 800a31a:	3001      	adds	r0, #1
 800a31c:	d02b      	beq.n	800a376 <_malloc_r+0xd2>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	442b      	add	r3, r5
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	e00e      	b.n	800a344 <_malloc_r+0xa0>
 800a326:	6822      	ldr	r2, [r4, #0]
 800a328:	1b52      	subs	r2, r2, r5
 800a32a:	d41e      	bmi.n	800a36a <_malloc_r+0xc6>
 800a32c:	2a0b      	cmp	r2, #11
 800a32e:	d916      	bls.n	800a35e <_malloc_r+0xba>
 800a330:	1961      	adds	r1, r4, r5
 800a332:	42a3      	cmp	r3, r4
 800a334:	6025      	str	r5, [r4, #0]
 800a336:	bf18      	it	ne
 800a338:	6059      	strne	r1, [r3, #4]
 800a33a:	6863      	ldr	r3, [r4, #4]
 800a33c:	bf08      	it	eq
 800a33e:	6031      	streq	r1, [r6, #0]
 800a340:	5162      	str	r2, [r4, r5]
 800a342:	604b      	str	r3, [r1, #4]
 800a344:	4638      	mov	r0, r7
 800a346:	f104 060b 	add.w	r6, r4, #11
 800a34a:	f000 fa03 	bl	800a754 <__malloc_unlock>
 800a34e:	f026 0607 	bic.w	r6, r6, #7
 800a352:	1d23      	adds	r3, r4, #4
 800a354:	1af2      	subs	r2, r6, r3
 800a356:	d0b6      	beq.n	800a2c6 <_malloc_r+0x22>
 800a358:	1b9b      	subs	r3, r3, r6
 800a35a:	50a3      	str	r3, [r4, r2]
 800a35c:	e7b3      	b.n	800a2c6 <_malloc_r+0x22>
 800a35e:	6862      	ldr	r2, [r4, #4]
 800a360:	42a3      	cmp	r3, r4
 800a362:	bf0c      	ite	eq
 800a364:	6032      	streq	r2, [r6, #0]
 800a366:	605a      	strne	r2, [r3, #4]
 800a368:	e7ec      	b.n	800a344 <_malloc_r+0xa0>
 800a36a:	4623      	mov	r3, r4
 800a36c:	6864      	ldr	r4, [r4, #4]
 800a36e:	e7b2      	b.n	800a2d6 <_malloc_r+0x32>
 800a370:	4634      	mov	r4, r6
 800a372:	6876      	ldr	r6, [r6, #4]
 800a374:	e7b9      	b.n	800a2ea <_malloc_r+0x46>
 800a376:	230c      	movs	r3, #12
 800a378:	4638      	mov	r0, r7
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	f000 f9ea 	bl	800a754 <__malloc_unlock>
 800a380:	e7a1      	b.n	800a2c6 <_malloc_r+0x22>
 800a382:	6025      	str	r5, [r4, #0]
 800a384:	e7de      	b.n	800a344 <_malloc_r+0xa0>
 800a386:	bf00      	nop
 800a388:	2000049c 	.word	0x2000049c

0800a38c <__ssputs_r>:
 800a38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a390:	688e      	ldr	r6, [r1, #8]
 800a392:	4682      	mov	sl, r0
 800a394:	429e      	cmp	r6, r3
 800a396:	460c      	mov	r4, r1
 800a398:	4690      	mov	r8, r2
 800a39a:	461f      	mov	r7, r3
 800a39c:	d838      	bhi.n	800a410 <__ssputs_r+0x84>
 800a39e:	898a      	ldrh	r2, [r1, #12]
 800a3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a4:	d032      	beq.n	800a40c <__ssputs_r+0x80>
 800a3a6:	6825      	ldr	r5, [r4, #0]
 800a3a8:	6909      	ldr	r1, [r1, #16]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	eba5 0901 	sub.w	r9, r5, r1
 800a3b0:	6965      	ldr	r5, [r4, #20]
 800a3b2:	444b      	add	r3, r9
 800a3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3bc:	106d      	asrs	r5, r5, #1
 800a3be:	429d      	cmp	r5, r3
 800a3c0:	bf38      	it	cc
 800a3c2:	461d      	movcc	r5, r3
 800a3c4:	0553      	lsls	r3, r2, #21
 800a3c6:	d531      	bpl.n	800a42c <__ssputs_r+0xa0>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7ff ff6b 	bl	800a2a4 <_malloc_r>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	b950      	cbnz	r0, 800a3e8 <__ssputs_r+0x5c>
 800a3d2:	230c      	movs	r3, #12
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	f8ca 3000 	str.w	r3, [sl]
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	464a      	mov	r2, r9
 800a3ea:	6921      	ldr	r1, [r4, #16]
 800a3ec:	f7ff fa18 	bl	8009820 <memcpy>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	6126      	str	r6, [r4, #16]
 800a3fe:	444e      	add	r6, r9
 800a400:	6026      	str	r6, [r4, #0]
 800a402:	463e      	mov	r6, r7
 800a404:	6165      	str	r5, [r4, #20]
 800a406:	eba5 0509 	sub.w	r5, r5, r9
 800a40a:	60a5      	str	r5, [r4, #8]
 800a40c:	42be      	cmp	r6, r7
 800a40e:	d900      	bls.n	800a412 <__ssputs_r+0x86>
 800a410:	463e      	mov	r6, r7
 800a412:	4632      	mov	r2, r6
 800a414:	4641      	mov	r1, r8
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	f000 f97c 	bl	800a714 <memmove>
 800a41c:	68a3      	ldr	r3, [r4, #8]
 800a41e:	2000      	movs	r0, #0
 800a420:	1b9b      	subs	r3, r3, r6
 800a422:	60a3      	str	r3, [r4, #8]
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	4433      	add	r3, r6
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	e7db      	b.n	800a3e4 <__ssputs_r+0x58>
 800a42c:	462a      	mov	r2, r5
 800a42e:	f000 f997 	bl	800a760 <_realloc_r>
 800a432:	4606      	mov	r6, r0
 800a434:	2800      	cmp	r0, #0
 800a436:	d1e1      	bne.n	800a3fc <__ssputs_r+0x70>
 800a438:	4650      	mov	r0, sl
 800a43a:	6921      	ldr	r1, [r4, #16]
 800a43c:	f7ff feca 	bl	800a1d4 <_free_r>
 800a440:	e7c7      	b.n	800a3d2 <__ssputs_r+0x46>
	...

0800a444 <_svfiprintf_r>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	4698      	mov	r8, r3
 800a44a:	898b      	ldrh	r3, [r1, #12]
 800a44c:	4607      	mov	r7, r0
 800a44e:	061b      	lsls	r3, r3, #24
 800a450:	460d      	mov	r5, r1
 800a452:	4614      	mov	r4, r2
 800a454:	b09d      	sub	sp, #116	; 0x74
 800a456:	d50e      	bpl.n	800a476 <_svfiprintf_r+0x32>
 800a458:	690b      	ldr	r3, [r1, #16]
 800a45a:	b963      	cbnz	r3, 800a476 <_svfiprintf_r+0x32>
 800a45c:	2140      	movs	r1, #64	; 0x40
 800a45e:	f7ff ff21 	bl	800a2a4 <_malloc_r>
 800a462:	6028      	str	r0, [r5, #0]
 800a464:	6128      	str	r0, [r5, #16]
 800a466:	b920      	cbnz	r0, 800a472 <_svfiprintf_r+0x2e>
 800a468:	230c      	movs	r3, #12
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e0d1      	b.n	800a616 <_svfiprintf_r+0x1d2>
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	616b      	str	r3, [r5, #20]
 800a476:	2300      	movs	r3, #0
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	2320      	movs	r3, #32
 800a47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a480:	2330      	movs	r3, #48	; 0x30
 800a482:	f04f 0901 	mov.w	r9, #1
 800a486:	f8cd 800c 	str.w	r8, [sp, #12]
 800a48a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a630 <_svfiprintf_r+0x1ec>
 800a48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a492:	4623      	mov	r3, r4
 800a494:	469a      	mov	sl, r3
 800a496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49a:	b10a      	cbz	r2, 800a4a0 <_svfiprintf_r+0x5c>
 800a49c:	2a25      	cmp	r2, #37	; 0x25
 800a49e:	d1f9      	bne.n	800a494 <_svfiprintf_r+0x50>
 800a4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a4:	d00b      	beq.n	800a4be <_svfiprintf_r+0x7a>
 800a4a6:	465b      	mov	r3, fp
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f7ff ff6d 	bl	800a38c <__ssputs_r>
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	f000 80aa 	beq.w	800a60c <_svfiprintf_r+0x1c8>
 800a4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ba:	445a      	add	r2, fp
 800a4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a2 	beq.w	800a60c <_svfiprintf_r+0x1c8>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d2:	f10a 0a01 	add.w	sl, sl, #1
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4de:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e0:	4654      	mov	r4, sl
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	4851      	ldr	r0, [pc, #324]	; (800a630 <_svfiprintf_r+0x1ec>)
 800a4ea:	f7ff f98b 	bl	8009804 <memchr>
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	b9d8      	cbnz	r0, 800a52a <_svfiprintf_r+0xe6>
 800a4f2:	06d0      	lsls	r0, r2, #27
 800a4f4:	bf44      	itt	mi
 800a4f6:	2320      	movmi	r3, #32
 800a4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	bf44      	itt	mi
 800a500:	232b      	movmi	r3, #43	; 0x2b
 800a502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a506:	f89a 3000 	ldrb.w	r3, [sl]
 800a50a:	2b2a      	cmp	r3, #42	; 0x2a
 800a50c:	d015      	beq.n	800a53a <_svfiprintf_r+0xf6>
 800a50e:	4654      	mov	r4, sl
 800a510:	2000      	movs	r0, #0
 800a512:	f04f 0c0a 	mov.w	ip, #10
 800a516:	9a07      	ldr	r2, [sp, #28]
 800a518:	4621      	mov	r1, r4
 800a51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51e:	3b30      	subs	r3, #48	; 0x30
 800a520:	2b09      	cmp	r3, #9
 800a522:	d94e      	bls.n	800a5c2 <_svfiprintf_r+0x17e>
 800a524:	b1b0      	cbz	r0, 800a554 <_svfiprintf_r+0x110>
 800a526:	9207      	str	r2, [sp, #28]
 800a528:	e014      	b.n	800a554 <_svfiprintf_r+0x110>
 800a52a:	eba0 0308 	sub.w	r3, r0, r8
 800a52e:	fa09 f303 	lsl.w	r3, r9, r3
 800a532:	4313      	orrs	r3, r2
 800a534:	46a2      	mov	sl, r4
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	e7d2      	b.n	800a4e0 <_svfiprintf_r+0x9c>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d19      	adds	r1, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9103      	str	r1, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfbb      	ittet	lt
 800a546:	425b      	neglt	r3, r3
 800a548:	f042 0202 	orrlt.w	r2, r2, #2
 800a54c:	9307      	strge	r3, [sp, #28]
 800a54e:	9307      	strlt	r3, [sp, #28]
 800a550:	bfb8      	it	lt
 800a552:	9204      	strlt	r2, [sp, #16]
 800a554:	7823      	ldrb	r3, [r4, #0]
 800a556:	2b2e      	cmp	r3, #46	; 0x2e
 800a558:	d10c      	bne.n	800a574 <_svfiprintf_r+0x130>
 800a55a:	7863      	ldrb	r3, [r4, #1]
 800a55c:	2b2a      	cmp	r3, #42	; 0x2a
 800a55e:	d135      	bne.n	800a5cc <_svfiprintf_r+0x188>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	3402      	adds	r4, #2
 800a564:	1d1a      	adds	r2, r3, #4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	9203      	str	r2, [sp, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bfb8      	it	lt
 800a56e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a634 <_svfiprintf_r+0x1f0>
 800a578:	2203      	movs	r2, #3
 800a57a:	4650      	mov	r0, sl
 800a57c:	7821      	ldrb	r1, [r4, #0]
 800a57e:	f7ff f941 	bl	8009804 <memchr>
 800a582:	b140      	cbz	r0, 800a596 <_svfiprintf_r+0x152>
 800a584:	2340      	movs	r3, #64	; 0x40
 800a586:	eba0 000a 	sub.w	r0, r0, sl
 800a58a:	fa03 f000 	lsl.w	r0, r3, r0
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	3401      	adds	r4, #1
 800a592:	4303      	orrs	r3, r0
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59a:	2206      	movs	r2, #6
 800a59c:	4826      	ldr	r0, [pc, #152]	; (800a638 <_svfiprintf_r+0x1f4>)
 800a59e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a2:	f7ff f92f 	bl	8009804 <memchr>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d038      	beq.n	800a61c <_svfiprintf_r+0x1d8>
 800a5aa:	4b24      	ldr	r3, [pc, #144]	; (800a63c <_svfiprintf_r+0x1f8>)
 800a5ac:	bb1b      	cbnz	r3, 800a5f6 <_svfiprintf_r+0x1b2>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	3307      	adds	r3, #7
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5bc:	4433      	add	r3, r6
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	e767      	b.n	800a492 <_svfiprintf_r+0x4e>
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ca:	e7a5      	b.n	800a518 <_svfiprintf_r+0xd4>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f04f 0c0a 	mov.w	ip, #10
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	3401      	adds	r4, #1
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5de:	3a30      	subs	r2, #48	; 0x30
 800a5e0:	2a09      	cmp	r2, #9
 800a5e2:	d903      	bls.n	800a5ec <_svfiprintf_r+0x1a8>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0c5      	beq.n	800a574 <_svfiprintf_r+0x130>
 800a5e8:	9105      	str	r1, [sp, #20]
 800a5ea:	e7c3      	b.n	800a574 <_svfiprintf_r+0x130>
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f4:	e7f0      	b.n	800a5d8 <_svfiprintf_r+0x194>
 800a5f6:	ab03      	add	r3, sp, #12
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	4b10      	ldr	r3, [pc, #64]	; (800a640 <_svfiprintf_r+0x1fc>)
 800a600:	a904      	add	r1, sp, #16
 800a602:	f7fc fa7f 	bl	8006b04 <_printf_float>
 800a606:	1c42      	adds	r2, r0, #1
 800a608:	4606      	mov	r6, r0
 800a60a:	d1d6      	bne.n	800a5ba <_svfiprintf_r+0x176>
 800a60c:	89ab      	ldrh	r3, [r5, #12]
 800a60e:	065b      	lsls	r3, r3, #25
 800a610:	f53f af2c 	bmi.w	800a46c <_svfiprintf_r+0x28>
 800a614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a616:	b01d      	add	sp, #116	; 0x74
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4638      	mov	r0, r7
 800a624:	4b06      	ldr	r3, [pc, #24]	; (800a640 <_svfiprintf_r+0x1fc>)
 800a626:	a904      	add	r1, sp, #16
 800a628:	f7fc fd08 	bl	800703c <_printf_i>
 800a62c:	e7eb      	b.n	800a606 <_svfiprintf_r+0x1c2>
 800a62e:	bf00      	nop
 800a630:	0800b6a4 	.word	0x0800b6a4
 800a634:	0800b6aa 	.word	0x0800b6aa
 800a638:	0800b6ae 	.word	0x0800b6ae
 800a63c:	08006b05 	.word	0x08006b05
 800a640:	0800a38d 	.word	0x0800a38d

0800a644 <nan>:
 800a644:	2000      	movs	r0, #0
 800a646:	4901      	ldr	r1, [pc, #4]	; (800a64c <nan+0x8>)
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	7ff80000 	.word	0x7ff80000

0800a650 <_sbrk_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	2300      	movs	r3, #0
 800a654:	4d05      	ldr	r5, [pc, #20]	; (800a66c <_sbrk_r+0x1c>)
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	602b      	str	r3, [r5, #0]
 800a65c:	f7f7 ff6e 	bl	800253c <_sbrk>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_sbrk_r+0x1a>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_sbrk_r+0x1a>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	200004a4 	.word	0x200004a4

0800a670 <strncmp>:
 800a670:	4603      	mov	r3, r0
 800a672:	b510      	push	{r4, lr}
 800a674:	b172      	cbz	r2, 800a694 <strncmp+0x24>
 800a676:	3901      	subs	r1, #1
 800a678:	1884      	adds	r4, r0, r2
 800a67a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a67e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a682:	4290      	cmp	r0, r2
 800a684:	d101      	bne.n	800a68a <strncmp+0x1a>
 800a686:	42a3      	cmp	r3, r4
 800a688:	d101      	bne.n	800a68e <strncmp+0x1e>
 800a68a:	1a80      	subs	r0, r0, r2
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	2800      	cmp	r0, #0
 800a690:	d1f3      	bne.n	800a67a <strncmp+0xa>
 800a692:	e7fa      	b.n	800a68a <strncmp+0x1a>
 800a694:	4610      	mov	r0, r2
 800a696:	e7f9      	b.n	800a68c <strncmp+0x1c>

0800a698 <__ascii_wctomb>:
 800a698:	4603      	mov	r3, r0
 800a69a:	4608      	mov	r0, r1
 800a69c:	b141      	cbz	r1, 800a6b0 <__ascii_wctomb+0x18>
 800a69e:	2aff      	cmp	r2, #255	; 0xff
 800a6a0:	d904      	bls.n	800a6ac <__ascii_wctomb+0x14>
 800a6a2:	228a      	movs	r2, #138	; 0x8a
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	4770      	bx	lr
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	700a      	strb	r2, [r1, #0]
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <__assert_func>:
 800a6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <__assert_func+0x2c>)
 800a6bc:	4605      	mov	r5, r0
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68d8      	ldr	r0, [r3, #12]
 800a6c2:	b14c      	cbz	r4, 800a6d8 <__assert_func+0x24>
 800a6c4:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <__assert_func+0x30>)
 800a6c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6ca:	9100      	str	r1, [sp, #0]
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	4906      	ldr	r1, [pc, #24]	; (800a6e8 <__assert_func+0x34>)
 800a6d0:	f000 f80e 	bl	800a6f0 <fiprintf>
 800a6d4:	f000 fa8a 	bl	800abec <abort>
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <__assert_func+0x38>)
 800a6da:	461c      	mov	r4, r3
 800a6dc:	e7f3      	b.n	800a6c6 <__assert_func+0x12>
 800a6de:	bf00      	nop
 800a6e0:	2000000c 	.word	0x2000000c
 800a6e4:	0800b6b5 	.word	0x0800b6b5
 800a6e8:	0800b6c2 	.word	0x0800b6c2
 800a6ec:	0800b6f0 	.word	0x0800b6f0

0800a6f0 <fiprintf>:
 800a6f0:	b40e      	push	{r1, r2, r3}
 800a6f2:	b503      	push	{r0, r1, lr}
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	ab03      	add	r3, sp, #12
 800a6f8:	4805      	ldr	r0, [pc, #20]	; (800a710 <fiprintf+0x20>)
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	6800      	ldr	r0, [r0, #0]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	f000 f883 	bl	800a80c <_vfiprintf_r>
 800a706:	b002      	add	sp, #8
 800a708:	f85d eb04 	ldr.w	lr, [sp], #4
 800a70c:	b003      	add	sp, #12
 800a70e:	4770      	bx	lr
 800a710:	2000000c 	.word	0x2000000c

0800a714 <memmove>:
 800a714:	4288      	cmp	r0, r1
 800a716:	b510      	push	{r4, lr}
 800a718:	eb01 0402 	add.w	r4, r1, r2
 800a71c:	d902      	bls.n	800a724 <memmove+0x10>
 800a71e:	4284      	cmp	r4, r0
 800a720:	4623      	mov	r3, r4
 800a722:	d807      	bhi.n	800a734 <memmove+0x20>
 800a724:	1e43      	subs	r3, r0, #1
 800a726:	42a1      	cmp	r1, r4
 800a728:	d008      	beq.n	800a73c <memmove+0x28>
 800a72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a732:	e7f8      	b.n	800a726 <memmove+0x12>
 800a734:	4601      	mov	r1, r0
 800a736:	4402      	add	r2, r0
 800a738:	428a      	cmp	r2, r1
 800a73a:	d100      	bne.n	800a73e <memmove+0x2a>
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a746:	e7f7      	b.n	800a738 <memmove+0x24>

0800a748 <__malloc_lock>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__malloc_lock+0x8>)
 800a74a:	f000 bc0b 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	200004a8 	.word	0x200004a8

0800a754 <__malloc_unlock>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__malloc_unlock+0x8>)
 800a756:	f000 bc06 	b.w	800af66 <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	200004a8 	.word	0x200004a8

0800a760 <_realloc_r>:
 800a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a764:	4680      	mov	r8, r0
 800a766:	4614      	mov	r4, r2
 800a768:	460e      	mov	r6, r1
 800a76a:	b921      	cbnz	r1, 800a776 <_realloc_r+0x16>
 800a76c:	4611      	mov	r1, r2
 800a76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a772:	f7ff bd97 	b.w	800a2a4 <_malloc_r>
 800a776:	b92a      	cbnz	r2, 800a784 <_realloc_r+0x24>
 800a778:	f7ff fd2c 	bl	800a1d4 <_free_r>
 800a77c:	4625      	mov	r5, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	f000 fc56 	bl	800b034 <_malloc_usable_size_r>
 800a788:	4284      	cmp	r4, r0
 800a78a:	4607      	mov	r7, r0
 800a78c:	d802      	bhi.n	800a794 <_realloc_r+0x34>
 800a78e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a792:	d812      	bhi.n	800a7ba <_realloc_r+0x5a>
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f7ff fd84 	bl	800a2a4 <_malloc_r>
 800a79c:	4605      	mov	r5, r0
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d0ed      	beq.n	800a77e <_realloc_r+0x1e>
 800a7a2:	42bc      	cmp	r4, r7
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	bf28      	it	cs
 800a7aa:	463a      	movcs	r2, r7
 800a7ac:	f7ff f838 	bl	8009820 <memcpy>
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	f7ff fd0e 	bl	800a1d4 <_free_r>
 800a7b8:	e7e1      	b.n	800a77e <_realloc_r+0x1e>
 800a7ba:	4635      	mov	r5, r6
 800a7bc:	e7df      	b.n	800a77e <_realloc_r+0x1e>

0800a7be <__sfputc_r>:
 800a7be:	6893      	ldr	r3, [r2, #8]
 800a7c0:	b410      	push	{r4}
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	6093      	str	r3, [r2, #8]
 800a7c8:	da07      	bge.n	800a7da <__sfputc_r+0x1c>
 800a7ca:	6994      	ldr	r4, [r2, #24]
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	db01      	blt.n	800a7d4 <__sfputc_r+0x16>
 800a7d0:	290a      	cmp	r1, #10
 800a7d2:	d102      	bne.n	800a7da <__sfputc_r+0x1c>
 800a7d4:	bc10      	pop	{r4}
 800a7d6:	f000 b949 	b.w	800aa6c <__swbuf_r>
 800a7da:	6813      	ldr	r3, [r2, #0]
 800a7dc:	1c58      	adds	r0, r3, #1
 800a7de:	6010      	str	r0, [r2, #0]
 800a7e0:	7019      	strb	r1, [r3, #0]
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	bc10      	pop	{r4}
 800a7e6:	4770      	bx	lr

0800a7e8 <__sfputs_r>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	4614      	mov	r4, r2
 800a7f0:	18d5      	adds	r5, r2, r3
 800a7f2:	42ac      	cmp	r4, r5
 800a7f4:	d101      	bne.n	800a7fa <__sfputs_r+0x12>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	e007      	b.n	800a80a <__sfputs_r+0x22>
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a802:	f7ff ffdc 	bl	800a7be <__sfputc_r>
 800a806:	1c43      	adds	r3, r0, #1
 800a808:	d1f3      	bne.n	800a7f2 <__sfputs_r+0xa>
 800a80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a80c <_vfiprintf_r>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	460d      	mov	r5, r1
 800a812:	4614      	mov	r4, r2
 800a814:	4698      	mov	r8, r3
 800a816:	4606      	mov	r6, r0
 800a818:	b09d      	sub	sp, #116	; 0x74
 800a81a:	b118      	cbz	r0, 800a824 <_vfiprintf_r+0x18>
 800a81c:	6983      	ldr	r3, [r0, #24]
 800a81e:	b90b      	cbnz	r3, 800a824 <_vfiprintf_r+0x18>
 800a820:	f000 fb02 	bl	800ae28 <__sinit>
 800a824:	4b89      	ldr	r3, [pc, #548]	; (800aa4c <_vfiprintf_r+0x240>)
 800a826:	429d      	cmp	r5, r3
 800a828:	d11b      	bne.n	800a862 <_vfiprintf_r+0x56>
 800a82a:	6875      	ldr	r5, [r6, #4]
 800a82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a82e:	07d9      	lsls	r1, r3, #31
 800a830:	d405      	bmi.n	800a83e <_vfiprintf_r+0x32>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	059a      	lsls	r2, r3, #22
 800a836:	d402      	bmi.n	800a83e <_vfiprintf_r+0x32>
 800a838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83a:	f000 fb93 	bl	800af64 <__retarget_lock_acquire_recursive>
 800a83e:	89ab      	ldrh	r3, [r5, #12]
 800a840:	071b      	lsls	r3, r3, #28
 800a842:	d501      	bpl.n	800a848 <_vfiprintf_r+0x3c>
 800a844:	692b      	ldr	r3, [r5, #16]
 800a846:	b9eb      	cbnz	r3, 800a884 <_vfiprintf_r+0x78>
 800a848:	4629      	mov	r1, r5
 800a84a:	4630      	mov	r0, r6
 800a84c:	f000 f960 	bl	800ab10 <__swsetup_r>
 800a850:	b1c0      	cbz	r0, 800a884 <_vfiprintf_r+0x78>
 800a852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a854:	07dc      	lsls	r4, r3, #31
 800a856:	d50e      	bpl.n	800a876 <_vfiprintf_r+0x6a>
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	b01d      	add	sp, #116	; 0x74
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	4b7b      	ldr	r3, [pc, #492]	; (800aa50 <_vfiprintf_r+0x244>)
 800a864:	429d      	cmp	r5, r3
 800a866:	d101      	bne.n	800a86c <_vfiprintf_r+0x60>
 800a868:	68b5      	ldr	r5, [r6, #8]
 800a86a:	e7df      	b.n	800a82c <_vfiprintf_r+0x20>
 800a86c:	4b79      	ldr	r3, [pc, #484]	; (800aa54 <_vfiprintf_r+0x248>)
 800a86e:	429d      	cmp	r5, r3
 800a870:	bf08      	it	eq
 800a872:	68f5      	ldreq	r5, [r6, #12]
 800a874:	e7da      	b.n	800a82c <_vfiprintf_r+0x20>
 800a876:	89ab      	ldrh	r3, [r5, #12]
 800a878:	0598      	lsls	r0, r3, #22
 800a87a:	d4ed      	bmi.n	800a858 <_vfiprintf_r+0x4c>
 800a87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a87e:	f000 fb72 	bl	800af66 <__retarget_lock_release_recursive>
 800a882:	e7e9      	b.n	800a858 <_vfiprintf_r+0x4c>
 800a884:	2300      	movs	r3, #0
 800a886:	9309      	str	r3, [sp, #36]	; 0x24
 800a888:	2320      	movs	r3, #32
 800a88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a88e:	2330      	movs	r3, #48	; 0x30
 800a890:	f04f 0901 	mov.w	r9, #1
 800a894:	f8cd 800c 	str.w	r8, [sp, #12]
 800a898:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aa58 <_vfiprintf_r+0x24c>
 800a89c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	469a      	mov	sl, r3
 800a8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a8:	b10a      	cbz	r2, 800a8ae <_vfiprintf_r+0xa2>
 800a8aa:	2a25      	cmp	r2, #37	; 0x25
 800a8ac:	d1f9      	bne.n	800a8a2 <_vfiprintf_r+0x96>
 800a8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a8b2:	d00b      	beq.n	800a8cc <_vfiprintf_r+0xc0>
 800a8b4:	465b      	mov	r3, fp
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff ff94 	bl	800a7e8 <__sfputs_r>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f000 80aa 	beq.w	800aa1a <_vfiprintf_r+0x20e>
 800a8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c8:	445a      	add	r2, fp
 800a8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 80a2 	beq.w	800aa1a <_vfiprintf_r+0x20e>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e0:	f10a 0a01 	add.w	sl, sl, #1
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	9307      	str	r3, [sp, #28]
 800a8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ee:	4654      	mov	r4, sl
 800a8f0:	2205      	movs	r2, #5
 800a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f6:	4858      	ldr	r0, [pc, #352]	; (800aa58 <_vfiprintf_r+0x24c>)
 800a8f8:	f7fe ff84 	bl	8009804 <memchr>
 800a8fc:	9a04      	ldr	r2, [sp, #16]
 800a8fe:	b9d8      	cbnz	r0, 800a938 <_vfiprintf_r+0x12c>
 800a900:	06d1      	lsls	r1, r2, #27
 800a902:	bf44      	itt	mi
 800a904:	2320      	movmi	r3, #32
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90a:	0713      	lsls	r3, r2, #28
 800a90c:	bf44      	itt	mi
 800a90e:	232b      	movmi	r3, #43	; 0x2b
 800a910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a914:	f89a 3000 	ldrb.w	r3, [sl]
 800a918:	2b2a      	cmp	r3, #42	; 0x2a
 800a91a:	d015      	beq.n	800a948 <_vfiprintf_r+0x13c>
 800a91c:	4654      	mov	r4, sl
 800a91e:	2000      	movs	r0, #0
 800a920:	f04f 0c0a 	mov.w	ip, #10
 800a924:	9a07      	ldr	r2, [sp, #28]
 800a926:	4621      	mov	r1, r4
 800a928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a92c:	3b30      	subs	r3, #48	; 0x30
 800a92e:	2b09      	cmp	r3, #9
 800a930:	d94e      	bls.n	800a9d0 <_vfiprintf_r+0x1c4>
 800a932:	b1b0      	cbz	r0, 800a962 <_vfiprintf_r+0x156>
 800a934:	9207      	str	r2, [sp, #28]
 800a936:	e014      	b.n	800a962 <_vfiprintf_r+0x156>
 800a938:	eba0 0308 	sub.w	r3, r0, r8
 800a93c:	fa09 f303 	lsl.w	r3, r9, r3
 800a940:	4313      	orrs	r3, r2
 800a942:	46a2      	mov	sl, r4
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	e7d2      	b.n	800a8ee <_vfiprintf_r+0xe2>
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	1d19      	adds	r1, r3, #4
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	9103      	str	r1, [sp, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	bfbb      	ittet	lt
 800a954:	425b      	neglt	r3, r3
 800a956:	f042 0202 	orrlt.w	r2, r2, #2
 800a95a:	9307      	strge	r3, [sp, #28]
 800a95c:	9307      	strlt	r3, [sp, #28]
 800a95e:	bfb8      	it	lt
 800a960:	9204      	strlt	r2, [sp, #16]
 800a962:	7823      	ldrb	r3, [r4, #0]
 800a964:	2b2e      	cmp	r3, #46	; 0x2e
 800a966:	d10c      	bne.n	800a982 <_vfiprintf_r+0x176>
 800a968:	7863      	ldrb	r3, [r4, #1]
 800a96a:	2b2a      	cmp	r3, #42	; 0x2a
 800a96c:	d135      	bne.n	800a9da <_vfiprintf_r+0x1ce>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	3402      	adds	r4, #2
 800a972:	1d1a      	adds	r2, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	9203      	str	r2, [sp, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	bfb8      	it	lt
 800a97c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aa5c <_vfiprintf_r+0x250>
 800a986:	2203      	movs	r2, #3
 800a988:	4650      	mov	r0, sl
 800a98a:	7821      	ldrb	r1, [r4, #0]
 800a98c:	f7fe ff3a 	bl	8009804 <memchr>
 800a990:	b140      	cbz	r0, 800a9a4 <_vfiprintf_r+0x198>
 800a992:	2340      	movs	r3, #64	; 0x40
 800a994:	eba0 000a 	sub.w	r0, r0, sl
 800a998:	fa03 f000 	lsl.w	r0, r3, r0
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	3401      	adds	r4, #1
 800a9a0:	4303      	orrs	r3, r0
 800a9a2:	9304      	str	r3, [sp, #16]
 800a9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a8:	2206      	movs	r2, #6
 800a9aa:	482d      	ldr	r0, [pc, #180]	; (800aa60 <_vfiprintf_r+0x254>)
 800a9ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9b0:	f7fe ff28 	bl	8009804 <memchr>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d03f      	beq.n	800aa38 <_vfiprintf_r+0x22c>
 800a9b8:	4b2a      	ldr	r3, [pc, #168]	; (800aa64 <_vfiprintf_r+0x258>)
 800a9ba:	bb1b      	cbnz	r3, 800aa04 <_vfiprintf_r+0x1f8>
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	3307      	adds	r3, #7
 800a9c0:	f023 0307 	bic.w	r3, r3, #7
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	9303      	str	r3, [sp, #12]
 800a9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ca:	443b      	add	r3, r7
 800a9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ce:	e767      	b.n	800a8a0 <_vfiprintf_r+0x94>
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9d8:	e7a5      	b.n	800a926 <_vfiprintf_r+0x11a>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f04f 0c0a 	mov.w	ip, #10
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	3401      	adds	r4, #1
 800a9e4:	9305      	str	r3, [sp, #20]
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ec:	3a30      	subs	r2, #48	; 0x30
 800a9ee:	2a09      	cmp	r2, #9
 800a9f0:	d903      	bls.n	800a9fa <_vfiprintf_r+0x1ee>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0c5      	beq.n	800a982 <_vfiprintf_r+0x176>
 800a9f6:	9105      	str	r1, [sp, #20]
 800a9f8:	e7c3      	b.n	800a982 <_vfiprintf_r+0x176>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa02:	e7f0      	b.n	800a9e6 <_vfiprintf_r+0x1da>
 800aa04:	ab03      	add	r3, sp, #12
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4b16      	ldr	r3, [pc, #88]	; (800aa68 <_vfiprintf_r+0x25c>)
 800aa0e:	a904      	add	r1, sp, #16
 800aa10:	f7fc f878 	bl	8006b04 <_printf_float>
 800aa14:	4607      	mov	r7, r0
 800aa16:	1c78      	adds	r0, r7, #1
 800aa18:	d1d6      	bne.n	800a9c8 <_vfiprintf_r+0x1bc>
 800aa1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa1c:	07d9      	lsls	r1, r3, #31
 800aa1e:	d405      	bmi.n	800aa2c <_vfiprintf_r+0x220>
 800aa20:	89ab      	ldrh	r3, [r5, #12]
 800aa22:	059a      	lsls	r2, r3, #22
 800aa24:	d402      	bmi.n	800aa2c <_vfiprintf_r+0x220>
 800aa26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa28:	f000 fa9d 	bl	800af66 <__retarget_lock_release_recursive>
 800aa2c:	89ab      	ldrh	r3, [r5, #12]
 800aa2e:	065b      	lsls	r3, r3, #25
 800aa30:	f53f af12 	bmi.w	800a858 <_vfiprintf_r+0x4c>
 800aa34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa36:	e711      	b.n	800a85c <_vfiprintf_r+0x50>
 800aa38:	ab03      	add	r3, sp, #12
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <_vfiprintf_r+0x25c>)
 800aa42:	a904      	add	r1, sp, #16
 800aa44:	f7fc fafa 	bl	800703c <_printf_i>
 800aa48:	e7e4      	b.n	800aa14 <_vfiprintf_r+0x208>
 800aa4a:	bf00      	nop
 800aa4c:	0800b714 	.word	0x0800b714
 800aa50:	0800b734 	.word	0x0800b734
 800aa54:	0800b6f4 	.word	0x0800b6f4
 800aa58:	0800b6a4 	.word	0x0800b6a4
 800aa5c:	0800b6aa 	.word	0x0800b6aa
 800aa60:	0800b6ae 	.word	0x0800b6ae
 800aa64:	08006b05 	.word	0x08006b05
 800aa68:	0800a7e9 	.word	0x0800a7e9

0800aa6c <__swbuf_r>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	460e      	mov	r6, r1
 800aa70:	4614      	mov	r4, r2
 800aa72:	4605      	mov	r5, r0
 800aa74:	b118      	cbz	r0, 800aa7e <__swbuf_r+0x12>
 800aa76:	6983      	ldr	r3, [r0, #24]
 800aa78:	b90b      	cbnz	r3, 800aa7e <__swbuf_r+0x12>
 800aa7a:	f000 f9d5 	bl	800ae28 <__sinit>
 800aa7e:	4b21      	ldr	r3, [pc, #132]	; (800ab04 <__swbuf_r+0x98>)
 800aa80:	429c      	cmp	r4, r3
 800aa82:	d12b      	bne.n	800aadc <__swbuf_r+0x70>
 800aa84:	686c      	ldr	r4, [r5, #4]
 800aa86:	69a3      	ldr	r3, [r4, #24]
 800aa88:	60a3      	str	r3, [r4, #8]
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	071a      	lsls	r2, r3, #28
 800aa8e:	d52f      	bpl.n	800aaf0 <__swbuf_r+0x84>
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	b36b      	cbz	r3, 800aaf0 <__swbuf_r+0x84>
 800aa94:	6923      	ldr	r3, [r4, #16]
 800aa96:	6820      	ldr	r0, [r4, #0]
 800aa98:	b2f6      	uxtb	r6, r6
 800aa9a:	1ac0      	subs	r0, r0, r3
 800aa9c:	6963      	ldr	r3, [r4, #20]
 800aa9e:	4637      	mov	r7, r6
 800aaa0:	4283      	cmp	r3, r0
 800aaa2:	dc04      	bgt.n	800aaae <__swbuf_r+0x42>
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f000 f92a 	bl	800ad00 <_fflush_r>
 800aaac:	bb30      	cbnz	r0, 800aafc <__swbuf_r+0x90>
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	3001      	adds	r0, #1
 800aab2:	3b01      	subs	r3, #1
 800aab4:	60a3      	str	r3, [r4, #8]
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	6022      	str	r2, [r4, #0]
 800aabc:	701e      	strb	r6, [r3, #0]
 800aabe:	6963      	ldr	r3, [r4, #20]
 800aac0:	4283      	cmp	r3, r0
 800aac2:	d004      	beq.n	800aace <__swbuf_r+0x62>
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	07db      	lsls	r3, r3, #31
 800aac8:	d506      	bpl.n	800aad8 <__swbuf_r+0x6c>
 800aaca:	2e0a      	cmp	r6, #10
 800aacc:	d104      	bne.n	800aad8 <__swbuf_r+0x6c>
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f915 	bl	800ad00 <_fflush_r>
 800aad6:	b988      	cbnz	r0, 800aafc <__swbuf_r+0x90>
 800aad8:	4638      	mov	r0, r7
 800aada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <__swbuf_r+0x9c>)
 800aade:	429c      	cmp	r4, r3
 800aae0:	d101      	bne.n	800aae6 <__swbuf_r+0x7a>
 800aae2:	68ac      	ldr	r4, [r5, #8]
 800aae4:	e7cf      	b.n	800aa86 <__swbuf_r+0x1a>
 800aae6:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <__swbuf_r+0xa0>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	bf08      	it	eq
 800aaec:	68ec      	ldreq	r4, [r5, #12]
 800aaee:	e7ca      	b.n	800aa86 <__swbuf_r+0x1a>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f80c 	bl	800ab10 <__swsetup_r>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0cb      	beq.n	800aa94 <__swbuf_r+0x28>
 800aafc:	f04f 37ff 	mov.w	r7, #4294967295
 800ab00:	e7ea      	b.n	800aad8 <__swbuf_r+0x6c>
 800ab02:	bf00      	nop
 800ab04:	0800b714 	.word	0x0800b714
 800ab08:	0800b734 	.word	0x0800b734
 800ab0c:	0800b6f4 	.word	0x0800b6f4

0800ab10 <__swsetup_r>:
 800ab10:	4b32      	ldr	r3, [pc, #200]	; (800abdc <__swsetup_r+0xcc>)
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	681d      	ldr	r5, [r3, #0]
 800ab16:	4606      	mov	r6, r0
 800ab18:	460c      	mov	r4, r1
 800ab1a:	b125      	cbz	r5, 800ab26 <__swsetup_r+0x16>
 800ab1c:	69ab      	ldr	r3, [r5, #24]
 800ab1e:	b913      	cbnz	r3, 800ab26 <__swsetup_r+0x16>
 800ab20:	4628      	mov	r0, r5
 800ab22:	f000 f981 	bl	800ae28 <__sinit>
 800ab26:	4b2e      	ldr	r3, [pc, #184]	; (800abe0 <__swsetup_r+0xd0>)
 800ab28:	429c      	cmp	r4, r3
 800ab2a:	d10f      	bne.n	800ab4c <__swsetup_r+0x3c>
 800ab2c:	686c      	ldr	r4, [r5, #4]
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab34:	0719      	lsls	r1, r3, #28
 800ab36:	d42c      	bmi.n	800ab92 <__swsetup_r+0x82>
 800ab38:	06dd      	lsls	r5, r3, #27
 800ab3a:	d411      	bmi.n	800ab60 <__swsetup_r+0x50>
 800ab3c:	2309      	movs	r3, #9
 800ab3e:	6033      	str	r3, [r6, #0]
 800ab40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	e03e      	b.n	800abca <__swsetup_r+0xba>
 800ab4c:	4b25      	ldr	r3, [pc, #148]	; (800abe4 <__swsetup_r+0xd4>)
 800ab4e:	429c      	cmp	r4, r3
 800ab50:	d101      	bne.n	800ab56 <__swsetup_r+0x46>
 800ab52:	68ac      	ldr	r4, [r5, #8]
 800ab54:	e7eb      	b.n	800ab2e <__swsetup_r+0x1e>
 800ab56:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <__swsetup_r+0xd8>)
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	bf08      	it	eq
 800ab5c:	68ec      	ldreq	r4, [r5, #12]
 800ab5e:	e7e6      	b.n	800ab2e <__swsetup_r+0x1e>
 800ab60:	0758      	lsls	r0, r3, #29
 800ab62:	d512      	bpl.n	800ab8a <__swsetup_r+0x7a>
 800ab64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab66:	b141      	cbz	r1, 800ab7a <__swsetup_r+0x6a>
 800ab68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab6c:	4299      	cmp	r1, r3
 800ab6e:	d002      	beq.n	800ab76 <__swsetup_r+0x66>
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7ff fb2f 	bl	800a1d4 <_free_r>
 800ab76:	2300      	movs	r3, #0
 800ab78:	6363      	str	r3, [r4, #52]	; 0x34
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	2300      	movs	r3, #0
 800ab84:	6063      	str	r3, [r4, #4]
 800ab86:	6923      	ldr	r3, [r4, #16]
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f043 0308 	orr.w	r3, r3, #8
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	b94b      	cbnz	r3, 800abaa <__swsetup_r+0x9a>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aba0:	d003      	beq.n	800abaa <__swsetup_r+0x9a>
 800aba2:	4621      	mov	r1, r4
 800aba4:	4630      	mov	r0, r6
 800aba6:	f000 fa05 	bl	800afb4 <__smakebuf_r>
 800abaa:	89a0      	ldrh	r0, [r4, #12]
 800abac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abb0:	f010 0301 	ands.w	r3, r0, #1
 800abb4:	d00a      	beq.n	800abcc <__swsetup_r+0xbc>
 800abb6:	2300      	movs	r3, #0
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	6963      	ldr	r3, [r4, #20]
 800abbc:	425b      	negs	r3, r3
 800abbe:	61a3      	str	r3, [r4, #24]
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	b943      	cbnz	r3, 800abd6 <__swsetup_r+0xc6>
 800abc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abc8:	d1ba      	bne.n	800ab40 <__swsetup_r+0x30>
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	0781      	lsls	r1, r0, #30
 800abce:	bf58      	it	pl
 800abd0:	6963      	ldrpl	r3, [r4, #20]
 800abd2:	60a3      	str	r3, [r4, #8]
 800abd4:	e7f4      	b.n	800abc0 <__swsetup_r+0xb0>
 800abd6:	2000      	movs	r0, #0
 800abd8:	e7f7      	b.n	800abca <__swsetup_r+0xba>
 800abda:	bf00      	nop
 800abdc:	2000000c 	.word	0x2000000c
 800abe0:	0800b714 	.word	0x0800b714
 800abe4:	0800b734 	.word	0x0800b734
 800abe8:	0800b6f4 	.word	0x0800b6f4

0800abec <abort>:
 800abec:	2006      	movs	r0, #6
 800abee:	b508      	push	{r3, lr}
 800abf0:	f000 fa50 	bl	800b094 <raise>
 800abf4:	2001      	movs	r0, #1
 800abf6:	f7f7 fc2e 	bl	8002456 <_exit>
	...

0800abfc <__sflush_r>:
 800abfc:	898a      	ldrh	r2, [r1, #12]
 800abfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac00:	4605      	mov	r5, r0
 800ac02:	0710      	lsls	r0, r2, #28
 800ac04:	460c      	mov	r4, r1
 800ac06:	d457      	bmi.n	800acb8 <__sflush_r+0xbc>
 800ac08:	684b      	ldr	r3, [r1, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	dc04      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc01      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac14:	2000      	movs	r0, #0
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d0fa      	beq.n	800ac14 <__sflush_r+0x18>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac24:	682f      	ldr	r7, [r5, #0]
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	d032      	beq.n	800ac90 <__sflush_r+0x94>
 800ac2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	075a      	lsls	r2, r3, #29
 800ac30:	d505      	bpl.n	800ac3e <__sflush_r+0x42>
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	1ac0      	subs	r0, r0, r3
 800ac36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac38:	b10b      	cbz	r3, 800ac3e <__sflush_r+0x42>
 800ac3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac3c:	1ac0      	subs	r0, r0, r3
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4602      	mov	r2, r0
 800ac42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac44:	4628      	mov	r0, r5
 800ac46:	6a21      	ldr	r1, [r4, #32]
 800ac48:	47b0      	blx	r6
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	d106      	bne.n	800ac5e <__sflush_r+0x62>
 800ac50:	6829      	ldr	r1, [r5, #0]
 800ac52:	291d      	cmp	r1, #29
 800ac54:	d82c      	bhi.n	800acb0 <__sflush_r+0xb4>
 800ac56:	4a29      	ldr	r2, [pc, #164]	; (800acfc <__sflush_r+0x100>)
 800ac58:	40ca      	lsrs	r2, r1
 800ac5a:	07d6      	lsls	r6, r2, #31
 800ac5c:	d528      	bpl.n	800acb0 <__sflush_r+0xb4>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	6062      	str	r2, [r4, #4]
 800ac62:	6922      	ldr	r2, [r4, #16]
 800ac64:	04d9      	lsls	r1, r3, #19
 800ac66:	6022      	str	r2, [r4, #0]
 800ac68:	d504      	bpl.n	800ac74 <__sflush_r+0x78>
 800ac6a:	1c42      	adds	r2, r0, #1
 800ac6c:	d101      	bne.n	800ac72 <__sflush_r+0x76>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b903      	cbnz	r3, 800ac74 <__sflush_r+0x78>
 800ac72:	6560      	str	r0, [r4, #84]	; 0x54
 800ac74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac76:	602f      	str	r7, [r5, #0]
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	d0cb      	beq.n	800ac14 <__sflush_r+0x18>
 800ac7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac80:	4299      	cmp	r1, r3
 800ac82:	d002      	beq.n	800ac8a <__sflush_r+0x8e>
 800ac84:	4628      	mov	r0, r5
 800ac86:	f7ff faa5 	bl	800a1d4 <_free_r>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac8e:	e7c2      	b.n	800ac16 <__sflush_r+0x1a>
 800ac90:	6a21      	ldr	r1, [r4, #32]
 800ac92:	2301      	movs	r3, #1
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b0      	blx	r6
 800ac98:	1c41      	adds	r1, r0, #1
 800ac9a:	d1c7      	bne.n	800ac2c <__sflush_r+0x30>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0c4      	beq.n	800ac2c <__sflush_r+0x30>
 800aca2:	2b1d      	cmp	r3, #29
 800aca4:	d001      	beq.n	800acaa <__sflush_r+0xae>
 800aca6:	2b16      	cmp	r3, #22
 800aca8:	d101      	bne.n	800acae <__sflush_r+0xb2>
 800acaa:	602f      	str	r7, [r5, #0]
 800acac:	e7b2      	b.n	800ac14 <__sflush_r+0x18>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	e7ae      	b.n	800ac16 <__sflush_r+0x1a>
 800acb8:	690f      	ldr	r7, [r1, #16]
 800acba:	2f00      	cmp	r7, #0
 800acbc:	d0aa      	beq.n	800ac14 <__sflush_r+0x18>
 800acbe:	0793      	lsls	r3, r2, #30
 800acc0:	bf18      	it	ne
 800acc2:	2300      	movne	r3, #0
 800acc4:	680e      	ldr	r6, [r1, #0]
 800acc6:	bf08      	it	eq
 800acc8:	694b      	ldreq	r3, [r1, #20]
 800acca:	1bf6      	subs	r6, r6, r7
 800accc:	600f      	str	r7, [r1, #0]
 800acce:	608b      	str	r3, [r1, #8]
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	dd9f      	ble.n	800ac14 <__sflush_r+0x18>
 800acd4:	4633      	mov	r3, r6
 800acd6:	463a      	mov	r2, r7
 800acd8:	4628      	mov	r0, r5
 800acda:	6a21      	ldr	r1, [r4, #32]
 800acdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ace0:	47e0      	blx	ip
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dc06      	bgt.n	800acf4 <__sflush_r+0xf8>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	e790      	b.n	800ac16 <__sflush_r+0x1a>
 800acf4:	4407      	add	r7, r0
 800acf6:	1a36      	subs	r6, r6, r0
 800acf8:	e7ea      	b.n	800acd0 <__sflush_r+0xd4>
 800acfa:	bf00      	nop
 800acfc:	20400001 	.word	0x20400001

0800ad00 <_fflush_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	690b      	ldr	r3, [r1, #16]
 800ad04:	4605      	mov	r5, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	b913      	cbnz	r3, 800ad10 <_fflush_r+0x10>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	b118      	cbz	r0, 800ad1a <_fflush_r+0x1a>
 800ad12:	6983      	ldr	r3, [r0, #24]
 800ad14:	b90b      	cbnz	r3, 800ad1a <_fflush_r+0x1a>
 800ad16:	f000 f887 	bl	800ae28 <__sinit>
 800ad1a:	4b14      	ldr	r3, [pc, #80]	; (800ad6c <_fflush_r+0x6c>)
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d11b      	bne.n	800ad58 <_fflush_r+0x58>
 800ad20:	686c      	ldr	r4, [r5, #4]
 800ad22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d0ef      	beq.n	800ad0a <_fflush_r+0xa>
 800ad2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad2c:	07d0      	lsls	r0, r2, #31
 800ad2e:	d404      	bmi.n	800ad3a <_fflush_r+0x3a>
 800ad30:	0599      	lsls	r1, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_fflush_r+0x3a>
 800ad34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad36:	f000 f915 	bl	800af64 <__retarget_lock_acquire_recursive>
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	f7ff ff5d 	bl	800abfc <__sflush_r>
 800ad42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad44:	4605      	mov	r5, r0
 800ad46:	07da      	lsls	r2, r3, #31
 800ad48:	d4e0      	bmi.n	800ad0c <_fflush_r+0xc>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	059b      	lsls	r3, r3, #22
 800ad4e:	d4dd      	bmi.n	800ad0c <_fflush_r+0xc>
 800ad50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad52:	f000 f908 	bl	800af66 <__retarget_lock_release_recursive>
 800ad56:	e7d9      	b.n	800ad0c <_fflush_r+0xc>
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <_fflush_r+0x70>)
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	d101      	bne.n	800ad62 <_fflush_r+0x62>
 800ad5e:	68ac      	ldr	r4, [r5, #8]
 800ad60:	e7df      	b.n	800ad22 <_fflush_r+0x22>
 800ad62:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <_fflush_r+0x74>)
 800ad64:	429c      	cmp	r4, r3
 800ad66:	bf08      	it	eq
 800ad68:	68ec      	ldreq	r4, [r5, #12]
 800ad6a:	e7da      	b.n	800ad22 <_fflush_r+0x22>
 800ad6c:	0800b714 	.word	0x0800b714
 800ad70:	0800b734 	.word	0x0800b734
 800ad74:	0800b6f4 	.word	0x0800b6f4

0800ad78 <std>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad86:	6083      	str	r3, [r0, #8]
 800ad88:	8181      	strh	r1, [r0, #12]
 800ad8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad8c:	81c2      	strh	r2, [r0, #14]
 800ad8e:	6183      	str	r3, [r0, #24]
 800ad90:	4619      	mov	r1, r3
 800ad92:	2208      	movs	r2, #8
 800ad94:	305c      	adds	r0, #92	; 0x5c
 800ad96:	f7fb fe0f 	bl	80069b8 <memset>
 800ad9a:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <std+0x38>)
 800ad9c:	6224      	str	r4, [r4, #32]
 800ad9e:	6263      	str	r3, [r4, #36]	; 0x24
 800ada0:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <std+0x3c>)
 800ada2:	62a3      	str	r3, [r4, #40]	; 0x28
 800ada4:	4b04      	ldr	r3, [pc, #16]	; (800adb8 <std+0x40>)
 800ada6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ada8:	4b04      	ldr	r3, [pc, #16]	; (800adbc <std+0x44>)
 800adaa:	6323      	str	r3, [r4, #48]	; 0x30
 800adac:	bd10      	pop	{r4, pc}
 800adae:	bf00      	nop
 800adb0:	0800b0cd 	.word	0x0800b0cd
 800adb4:	0800b0ef 	.word	0x0800b0ef
 800adb8:	0800b127 	.word	0x0800b127
 800adbc:	0800b14b 	.word	0x0800b14b

0800adc0 <_cleanup_r>:
 800adc0:	4901      	ldr	r1, [pc, #4]	; (800adc8 <_cleanup_r+0x8>)
 800adc2:	f000 b8af 	b.w	800af24 <_fwalk_reent>
 800adc6:	bf00      	nop
 800adc8:	0800ad01 	.word	0x0800ad01

0800adcc <__sfmoreglue>:
 800adcc:	2268      	movs	r2, #104	; 0x68
 800adce:	b570      	push	{r4, r5, r6, lr}
 800add0:	1e4d      	subs	r5, r1, #1
 800add2:	4355      	muls	r5, r2
 800add4:	460e      	mov	r6, r1
 800add6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adda:	f7ff fa63 	bl	800a2a4 <_malloc_r>
 800adde:	4604      	mov	r4, r0
 800ade0:	b140      	cbz	r0, 800adf4 <__sfmoreglue+0x28>
 800ade2:	2100      	movs	r1, #0
 800ade4:	e9c0 1600 	strd	r1, r6, [r0]
 800ade8:	300c      	adds	r0, #12
 800adea:	60a0      	str	r0, [r4, #8]
 800adec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adf0:	f7fb fde2 	bl	80069b8 <memset>
 800adf4:	4620      	mov	r0, r4
 800adf6:	bd70      	pop	{r4, r5, r6, pc}

0800adf8 <__sfp_lock_acquire>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__sfp_lock_acquire+0x8>)
 800adfa:	f000 b8b3 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800adfe:	bf00      	nop
 800ae00:	200004a9 	.word	0x200004a9

0800ae04 <__sfp_lock_release>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sfp_lock_release+0x8>)
 800ae06:	f000 b8ae 	b.w	800af66 <__retarget_lock_release_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	200004a9 	.word	0x200004a9

0800ae10 <__sinit_lock_acquire>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sinit_lock_acquire+0x8>)
 800ae12:	f000 b8a7 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	200004aa 	.word	0x200004aa

0800ae1c <__sinit_lock_release>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__sinit_lock_release+0x8>)
 800ae1e:	f000 b8a2 	b.w	800af66 <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	200004aa 	.word	0x200004aa

0800ae28 <__sinit>:
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	f7ff fff0 	bl	800ae10 <__sinit_lock_acquire>
 800ae30:	69a3      	ldr	r3, [r4, #24]
 800ae32:	b11b      	cbz	r3, 800ae3c <__sinit+0x14>
 800ae34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae38:	f7ff bff0 	b.w	800ae1c <__sinit_lock_release>
 800ae3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae40:	6523      	str	r3, [r4, #80]	; 0x50
 800ae42:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <__sinit+0x68>)
 800ae44:	4a13      	ldr	r2, [pc, #76]	; (800ae94 <__sinit+0x6c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	bf08      	it	eq
 800ae4e:	2301      	moveq	r3, #1
 800ae50:	4620      	mov	r0, r4
 800ae52:	bf08      	it	eq
 800ae54:	61a3      	streq	r3, [r4, #24]
 800ae56:	f000 f81f 	bl	800ae98 <__sfp>
 800ae5a:	6060      	str	r0, [r4, #4]
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 f81b 	bl	800ae98 <__sfp>
 800ae62:	60a0      	str	r0, [r4, #8]
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 f817 	bl	800ae98 <__sfp>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2104      	movs	r1, #4
 800ae6e:	60e0      	str	r0, [r4, #12]
 800ae70:	6860      	ldr	r0, [r4, #4]
 800ae72:	f7ff ff81 	bl	800ad78 <std>
 800ae76:	2201      	movs	r2, #1
 800ae78:	2109      	movs	r1, #9
 800ae7a:	68a0      	ldr	r0, [r4, #8]
 800ae7c:	f7ff ff7c 	bl	800ad78 <std>
 800ae80:	2202      	movs	r2, #2
 800ae82:	2112      	movs	r1, #18
 800ae84:	68e0      	ldr	r0, [r4, #12]
 800ae86:	f7ff ff77 	bl	800ad78 <std>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	61a3      	str	r3, [r4, #24]
 800ae8e:	e7d1      	b.n	800ae34 <__sinit+0xc>
 800ae90:	0800b2ac 	.word	0x0800b2ac
 800ae94:	0800adc1 	.word	0x0800adc1

0800ae98 <__sfp>:
 800ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9a:	4607      	mov	r7, r0
 800ae9c:	f7ff ffac 	bl	800adf8 <__sfp_lock_acquire>
 800aea0:	4b1e      	ldr	r3, [pc, #120]	; (800af1c <__sfp+0x84>)
 800aea2:	681e      	ldr	r6, [r3, #0]
 800aea4:	69b3      	ldr	r3, [r6, #24]
 800aea6:	b913      	cbnz	r3, 800aeae <__sfp+0x16>
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff ffbd 	bl	800ae28 <__sinit>
 800aeae:	3648      	adds	r6, #72	; 0x48
 800aeb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	d503      	bpl.n	800aec0 <__sfp+0x28>
 800aeb8:	6833      	ldr	r3, [r6, #0]
 800aeba:	b30b      	cbz	r3, 800af00 <__sfp+0x68>
 800aebc:	6836      	ldr	r6, [r6, #0]
 800aebe:	e7f7      	b.n	800aeb0 <__sfp+0x18>
 800aec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aec4:	b9d5      	cbnz	r5, 800aefc <__sfp+0x64>
 800aec6:	4b16      	ldr	r3, [pc, #88]	; (800af20 <__sfp+0x88>)
 800aec8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aecc:	60e3      	str	r3, [r4, #12]
 800aece:	6665      	str	r5, [r4, #100]	; 0x64
 800aed0:	f000 f847 	bl	800af62 <__retarget_lock_init_recursive>
 800aed4:	f7ff ff96 	bl	800ae04 <__sfp_lock_release>
 800aed8:	2208      	movs	r2, #8
 800aeda:	4629      	mov	r1, r5
 800aedc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aee4:	6025      	str	r5, [r4, #0]
 800aee6:	61a5      	str	r5, [r4, #24]
 800aee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeec:	f7fb fd64 	bl	80069b8 <memset>
 800aef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aef8:	4620      	mov	r0, r4
 800aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aefc:	3468      	adds	r4, #104	; 0x68
 800aefe:	e7d9      	b.n	800aeb4 <__sfp+0x1c>
 800af00:	2104      	movs	r1, #4
 800af02:	4638      	mov	r0, r7
 800af04:	f7ff ff62 	bl	800adcc <__sfmoreglue>
 800af08:	4604      	mov	r4, r0
 800af0a:	6030      	str	r0, [r6, #0]
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d1d5      	bne.n	800aebc <__sfp+0x24>
 800af10:	f7ff ff78 	bl	800ae04 <__sfp_lock_release>
 800af14:	230c      	movs	r3, #12
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	e7ee      	b.n	800aef8 <__sfp+0x60>
 800af1a:	bf00      	nop
 800af1c:	0800b2ac 	.word	0x0800b2ac
 800af20:	ffff0001 	.word	0xffff0001

0800af24 <_fwalk_reent>:
 800af24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af28:	4606      	mov	r6, r0
 800af2a:	4688      	mov	r8, r1
 800af2c:	2700      	movs	r7, #0
 800af2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af36:	f1b9 0901 	subs.w	r9, r9, #1
 800af3a:	d505      	bpl.n	800af48 <_fwalk_reent+0x24>
 800af3c:	6824      	ldr	r4, [r4, #0]
 800af3e:	2c00      	cmp	r4, #0
 800af40:	d1f7      	bne.n	800af32 <_fwalk_reent+0xe>
 800af42:	4638      	mov	r0, r7
 800af44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af48:	89ab      	ldrh	r3, [r5, #12]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d907      	bls.n	800af5e <_fwalk_reent+0x3a>
 800af4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af52:	3301      	adds	r3, #1
 800af54:	d003      	beq.n	800af5e <_fwalk_reent+0x3a>
 800af56:	4629      	mov	r1, r5
 800af58:	4630      	mov	r0, r6
 800af5a:	47c0      	blx	r8
 800af5c:	4307      	orrs	r7, r0
 800af5e:	3568      	adds	r5, #104	; 0x68
 800af60:	e7e9      	b.n	800af36 <_fwalk_reent+0x12>

0800af62 <__retarget_lock_init_recursive>:
 800af62:	4770      	bx	lr

0800af64 <__retarget_lock_acquire_recursive>:
 800af64:	4770      	bx	lr

0800af66 <__retarget_lock_release_recursive>:
 800af66:	4770      	bx	lr

0800af68 <__swhatbuf_r>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	460e      	mov	r6, r1
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	4614      	mov	r4, r2
 800af72:	2900      	cmp	r1, #0
 800af74:	461d      	mov	r5, r3
 800af76:	b096      	sub	sp, #88	; 0x58
 800af78:	da08      	bge.n	800af8c <__swhatbuf_r+0x24>
 800af7a:	2200      	movs	r2, #0
 800af7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	061a      	lsls	r2, r3, #24
 800af84:	d410      	bmi.n	800afa8 <__swhatbuf_r+0x40>
 800af86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af8a:	e00e      	b.n	800afaa <__swhatbuf_r+0x42>
 800af8c:	466a      	mov	r2, sp
 800af8e:	f000 f903 	bl	800b198 <_fstat_r>
 800af92:	2800      	cmp	r0, #0
 800af94:	dbf1      	blt.n	800af7a <__swhatbuf_r+0x12>
 800af96:	9a01      	ldr	r2, [sp, #4]
 800af98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afa0:	425a      	negs	r2, r3
 800afa2:	415a      	adcs	r2, r3
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	e7ee      	b.n	800af86 <__swhatbuf_r+0x1e>
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	2000      	movs	r0, #0
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	b016      	add	sp, #88	; 0x58
 800afb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afb4 <__smakebuf_r>:
 800afb4:	898b      	ldrh	r3, [r1, #12]
 800afb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afb8:	079d      	lsls	r5, r3, #30
 800afba:	4606      	mov	r6, r0
 800afbc:	460c      	mov	r4, r1
 800afbe:	d507      	bpl.n	800afd0 <__smakebuf_r+0x1c>
 800afc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	6123      	str	r3, [r4, #16]
 800afc8:	2301      	movs	r3, #1
 800afca:	6163      	str	r3, [r4, #20]
 800afcc:	b002      	add	sp, #8
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	466a      	mov	r2, sp
 800afd2:	ab01      	add	r3, sp, #4
 800afd4:	f7ff ffc8 	bl	800af68 <__swhatbuf_r>
 800afd8:	9900      	ldr	r1, [sp, #0]
 800afda:	4605      	mov	r5, r0
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff f961 	bl	800a2a4 <_malloc_r>
 800afe2:	b948      	cbnz	r0, 800aff8 <__smakebuf_r+0x44>
 800afe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe8:	059a      	lsls	r2, r3, #22
 800afea:	d4ef      	bmi.n	800afcc <__smakebuf_r+0x18>
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	f043 0302 	orr.w	r3, r3, #2
 800aff4:	81a3      	strh	r3, [r4, #12]
 800aff6:	e7e3      	b.n	800afc0 <__smakebuf_r+0xc>
 800aff8:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <__smakebuf_r+0x7c>)
 800affa:	62b3      	str	r3, [r6, #40]	; 0x28
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	6020      	str	r0, [r4, #0]
 800b000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b004:	81a3      	strh	r3, [r4, #12]
 800b006:	9b00      	ldr	r3, [sp, #0]
 800b008:	6120      	str	r0, [r4, #16]
 800b00a:	6163      	str	r3, [r4, #20]
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	b15b      	cbz	r3, 800b028 <__smakebuf_r+0x74>
 800b010:	4630      	mov	r0, r6
 800b012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b016:	f000 f8d1 	bl	800b1bc <_isatty_r>
 800b01a:	b128      	cbz	r0, 800b028 <__smakebuf_r+0x74>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	f043 0301 	orr.w	r3, r3, #1
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	89a0      	ldrh	r0, [r4, #12]
 800b02a:	4305      	orrs	r5, r0
 800b02c:	81a5      	strh	r5, [r4, #12]
 800b02e:	e7cd      	b.n	800afcc <__smakebuf_r+0x18>
 800b030:	0800adc1 	.word	0x0800adc1

0800b034 <_malloc_usable_size_r>:
 800b034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b038:	1f18      	subs	r0, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfbc      	itt	lt
 800b03e:	580b      	ldrlt	r3, [r1, r0]
 800b040:	18c0      	addlt	r0, r0, r3
 800b042:	4770      	bx	lr

0800b044 <_raise_r>:
 800b044:	291f      	cmp	r1, #31
 800b046:	b538      	push	{r3, r4, r5, lr}
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	d904      	bls.n	800b058 <_raise_r+0x14>
 800b04e:	2316      	movs	r3, #22
 800b050:	6003      	str	r3, [r0, #0]
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b05a:	b112      	cbz	r2, 800b062 <_raise_r+0x1e>
 800b05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b060:	b94b      	cbnz	r3, 800b076 <_raise_r+0x32>
 800b062:	4620      	mov	r0, r4
 800b064:	f000 f830 	bl	800b0c8 <_getpid_r>
 800b068:	462a      	mov	r2, r5
 800b06a:	4601      	mov	r1, r0
 800b06c:	4620      	mov	r0, r4
 800b06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b072:	f000 b817 	b.w	800b0a4 <_kill_r>
 800b076:	2b01      	cmp	r3, #1
 800b078:	d00a      	beq.n	800b090 <_raise_r+0x4c>
 800b07a:	1c59      	adds	r1, r3, #1
 800b07c:	d103      	bne.n	800b086 <_raise_r+0x42>
 800b07e:	2316      	movs	r3, #22
 800b080:	6003      	str	r3, [r0, #0]
 800b082:	2001      	movs	r0, #1
 800b084:	e7e7      	b.n	800b056 <_raise_r+0x12>
 800b086:	2400      	movs	r4, #0
 800b088:	4628      	mov	r0, r5
 800b08a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b08e:	4798      	blx	r3
 800b090:	2000      	movs	r0, #0
 800b092:	e7e0      	b.n	800b056 <_raise_r+0x12>

0800b094 <raise>:
 800b094:	4b02      	ldr	r3, [pc, #8]	; (800b0a0 <raise+0xc>)
 800b096:	4601      	mov	r1, r0
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f7ff bfd3 	b.w	800b044 <_raise_r>
 800b09e:	bf00      	nop
 800b0a0:	2000000c 	.word	0x2000000c

0800b0a4 <_kill_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	4d06      	ldr	r5, [pc, #24]	; (800b0c4 <_kill_r+0x20>)
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	f7f7 f9c0 	bl	8002436 <_kill>
 800b0b6:	1c43      	adds	r3, r0, #1
 800b0b8:	d102      	bne.n	800b0c0 <_kill_r+0x1c>
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	b103      	cbz	r3, 800b0c0 <_kill_r+0x1c>
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	bd38      	pop	{r3, r4, r5, pc}
 800b0c2:	bf00      	nop
 800b0c4:	200004a4 	.word	0x200004a4

0800b0c8 <_getpid_r>:
 800b0c8:	f7f7 b9ae 	b.w	8002428 <_getpid>

0800b0cc <__sread>:
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d4:	f000 f894 	bl	800b200 <_read_r>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	bfab      	itete	ge
 800b0dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0de:	89a3      	ldrhlt	r3, [r4, #12]
 800b0e0:	181b      	addge	r3, r3, r0
 800b0e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0e6:	bfac      	ite	ge
 800b0e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ea:	81a3      	strhlt	r3, [r4, #12]
 800b0ec:	bd10      	pop	{r4, pc}

0800b0ee <__swrite>:
 800b0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f2:	461f      	mov	r7, r3
 800b0f4:	898b      	ldrh	r3, [r1, #12]
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	05db      	lsls	r3, r3, #23
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	d505      	bpl.n	800b10c <__swrite+0x1e>
 800b100:	2302      	movs	r3, #2
 800b102:	2200      	movs	r2, #0
 800b104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b108:	f000 f868 	bl	800b1dc <_lseek_r>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	4632      	mov	r2, r6
 800b110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b114:	81a3      	strh	r3, [r4, #12]
 800b116:	4628      	mov	r0, r5
 800b118:	463b      	mov	r3, r7
 800b11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b122:	f000 b817 	b.w	800b154 <_write_r>

0800b126 <__sseek>:
 800b126:	b510      	push	{r4, lr}
 800b128:	460c      	mov	r4, r1
 800b12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12e:	f000 f855 	bl	800b1dc <_lseek_r>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	bf15      	itete	ne
 800b138:	6560      	strne	r0, [r4, #84]	; 0x54
 800b13a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b13e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b142:	81a3      	strheq	r3, [r4, #12]
 800b144:	bf18      	it	ne
 800b146:	81a3      	strhne	r3, [r4, #12]
 800b148:	bd10      	pop	{r4, pc}

0800b14a <__sclose>:
 800b14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14e:	f000 b813 	b.w	800b178 <_close_r>
	...

0800b154 <_write_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	4611      	mov	r1, r2
 800b15c:	2200      	movs	r2, #0
 800b15e:	4d05      	ldr	r5, [pc, #20]	; (800b174 <_write_r+0x20>)
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f7 f99e 	bl	80024a4 <_write>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_write_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_write_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	200004a4 	.word	0x200004a4

0800b178 <_close_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	2300      	movs	r3, #0
 800b17c:	4d05      	ldr	r5, [pc, #20]	; (800b194 <_close_r+0x1c>)
 800b17e:	4604      	mov	r4, r0
 800b180:	4608      	mov	r0, r1
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	f7f7 f9aa 	bl	80024dc <_close>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_close_r+0x1a>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_close_r+0x1a>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	200004a4 	.word	0x200004a4

0800b198 <_fstat_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	2300      	movs	r3, #0
 800b19c:	4d06      	ldr	r5, [pc, #24]	; (800b1b8 <_fstat_r+0x20>)
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	602b      	str	r3, [r5, #0]
 800b1a6:	f7f7 f9a4 	bl	80024f2 <_fstat>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d102      	bne.n	800b1b4 <_fstat_r+0x1c>
 800b1ae:	682b      	ldr	r3, [r5, #0]
 800b1b0:	b103      	cbz	r3, 800b1b4 <_fstat_r+0x1c>
 800b1b2:	6023      	str	r3, [r4, #0]
 800b1b4:	bd38      	pop	{r3, r4, r5, pc}
 800b1b6:	bf00      	nop
 800b1b8:	200004a4 	.word	0x200004a4

0800b1bc <_isatty_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	2300      	movs	r3, #0
 800b1c0:	4d05      	ldr	r5, [pc, #20]	; (800b1d8 <_isatty_r+0x1c>)
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	602b      	str	r3, [r5, #0]
 800b1c8:	f7f7 f9a2 	bl	8002510 <_isatty>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_isatty_r+0x1a>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_isatty_r+0x1a>
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	200004a4 	.word	0x200004a4

0800b1dc <_lseek_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4d05      	ldr	r5, [pc, #20]	; (800b1fc <_lseek_r+0x20>)
 800b1e8:	602a      	str	r2, [r5, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f7f7 f99a 	bl	8002524 <_lseek>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_lseek_r+0x1e>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_lseek_r+0x1e>
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	200004a4 	.word	0x200004a4

0800b200 <_read_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	2200      	movs	r2, #0
 800b20a:	4d05      	ldr	r5, [pc, #20]	; (800b220 <_read_r+0x20>)
 800b20c:	602a      	str	r2, [r5, #0]
 800b20e:	461a      	mov	r2, r3
 800b210:	f7f7 f92b 	bl	800246a <_read>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_read_r+0x1e>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_read_r+0x1e>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	200004a4 	.word	0x200004a4

0800b224 <_init>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr

0800b230 <_fini>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	bf00      	nop
 800b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b236:	bc08      	pop	{r3}
 800b238:	469e      	mov	lr, r3
 800b23a:	4770      	bx	lr
